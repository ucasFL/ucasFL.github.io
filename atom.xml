<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>春暖花开</title>
  <subtitle>love, life, thinking, coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ucasfl.me/"/>
  <updated>2018-06-05T05:56:42.838Z</updated>
  <id>http://ucasfl.me/</id>
  
  <author>
    <name>Flynn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一次意外的移位错误</title>
    <link href="http://ucasfl.me/2018/06/05/An-unexpected-shifting-error/"/>
    <id>http://ucasfl.me/2018/06/05/An-unexpected-shifting-error/</id>
    <published>2018-06-05T04:37:40.000Z</published>
    <updated>2018-06-05T05:56:42.838Z</updated>
    
    <content type="html"><![CDATA[<h3 id="移位错误"><a href="#移位错误" class="headerlink" title="移位错误"></a>移位错误</h3>
<p>前天晚上，刷<a href="http://www.51nod.com" target="_blank" rel="external">51Nod</a>上面的一个题：通过矩阵快速幂计算斐波那契数列，结果发生了一个意想不到的错误，这件事也告诉了我一个道理：</p>
<p><strong>当代码出错的时候，不要轻易去怀疑工具的问题，而要去想 90% 的可能性是自己的代码有问题.</strong></p>
<a id="more"></a>
<p>下面是最开始的代码：<br>
  <figure class="highlight mipsasm">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></div><div class="line">typedef long long <span class="keyword">ll;</span></div><div class="line">using namespace std<span class="comment">;</span></div><div class="line"></div><div class="line">const <span class="keyword">ll </span>MAXV = <span class="number">1</span>e9 + <span class="number">9</span><span class="comment">;</span></div><div class="line"><span class="keyword">ll </span><span class="keyword">base[2][2] </span>= &#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;<span class="comment">;</span></div><div class="line"><span class="keyword">ll </span>Reult[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;<span class="comment">;</span></div><div class="line"></div><div class="line">void <span class="keyword">multi(ll </span>A[][<span class="number">2</span>], <span class="keyword">ll </span><span class="keyword">B[][2])&#123;</span></div><div class="line">	<span class="keyword">ll </span>tmp[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;<span class="comment">;</span></div><div class="line">	for(int i = <span class="number">0</span><span class="comment">; i != 2; ++i)&#123;</span></div><div class="line">		for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j != 2; ++j)&#123;</span></div><div class="line">			for(int k = <span class="number">0</span><span class="comment">; k != 2; ++k)&#123;</span></div><div class="line">				tmp[i][<span class="keyword">j] </span>+= (A[i][k] * <span class="keyword">B[k][j]) </span>% MAXV<span class="comment">;</span></div><div class="line">				tmp[i][<span class="keyword">j] </span>%= MAXV<span class="comment">;</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	for(int i = <span class="number">0</span><span class="comment">; i != 2; ++i)&#123;</span></div><div class="line">		for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j != 2; ++j)&#123;</span></div><div class="line">			A[i][<span class="keyword">j] </span>= tmp[i][<span class="keyword">j];</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void QuickPow(int N)&#123;</div><div class="line">	while (N)&#123;</div><div class="line">		if (N&amp;<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">multi(Reult, </span><span class="keyword">base);</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">multi(base, </span><span class="keyword">base);</span></div><div class="line">		N &gt;&gt;= <span class="number">1</span><span class="comment">;</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	<span class="keyword">ll </span>n<span class="comment">;</span></div><div class="line">	cin &gt;&gt; n<span class="comment">;</span></div><div class="line">	QuickPow(n-1)<span class="comment">;</span></div><div class="line">	cout &lt;&lt; Reult[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt;endl<span class="comment">;</span></div><div class="line">	return <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>提交之后，有一部分 test cases 发生错误，而且居然还出现超时.之后查看了一下题目，发现是因为函数 QuickPow 的参数是 <code>int</code> 型，而需要计算的数列的项最大是 10^18，因此，导致发生了溢出，之后，将参数由 <code>int</code> 改为 <code>long long</code> 就好了：<br>
  <figure class="highlight mipsasm">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="comment">#include&lt;bits/stdc++.h&gt;</span></div><div class="line">typedef long long <span class="keyword">ll;</span></div><div class="line">using namespace std<span class="comment">;</span></div><div class="line"></div><div class="line">const <span class="keyword">ll </span>MAXV = <span class="number">1</span>e9 + <span class="number">9</span><span class="comment">;</span></div><div class="line"><span class="keyword">ll </span><span class="keyword">base[2][2] </span>= &#123;&#123;<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;&#125;<span class="comment">;</span></div><div class="line"><span class="keyword">ll </span>Reult[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;, &#123;<span class="number">0</span>,<span class="number">1</span>&#125;&#125;<span class="comment">;</span></div><div class="line"></div><div class="line">void <span class="keyword">multi(ll </span>A[][<span class="number">2</span>], <span class="keyword">ll </span><span class="keyword">B[][2])&#123;</span></div><div class="line">	<span class="keyword">ll </span>tmp[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">0</span>&#125;&#125;<span class="comment">;</span></div><div class="line">	for(int i = <span class="number">0</span><span class="comment">; i != 2; ++i)&#123;</span></div><div class="line">		for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j != 2; ++j)&#123;</span></div><div class="line">			for(int k = <span class="number">0</span><span class="comment">; k != 2; ++k)&#123;</span></div><div class="line">				tmp[i][<span class="keyword">j] </span>+= (A[i][k] * <span class="keyword">B[k][j]) </span>% MAXV<span class="comment">;</span></div><div class="line">				tmp[i][<span class="keyword">j] </span>%= MAXV<span class="comment">;</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	for(int i = <span class="number">0</span><span class="comment">; i != 2; ++i)&#123;</span></div><div class="line">		for(int <span class="keyword">j </span>= <span class="number">0</span><span class="comment">; j != 2; ++j)&#123;</span></div><div class="line">			A[i][<span class="keyword">j] </span>= tmp[i][<span class="keyword">j];</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">void QuickPow(<span class="keyword">ll </span>N)&#123;</div><div class="line">	while (N)&#123;</div><div class="line">		if (N&amp;<span class="number">1</span>)&#123;</div><div class="line">			<span class="keyword">multi(Reult, </span><span class="keyword">base);</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">multi(base, </span><span class="keyword">base);</span></div><div class="line">		N &gt;&gt;= <span class="number">1</span><span class="comment">;</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main()&#123;</div><div class="line">	<span class="keyword">ll </span>n<span class="comment">;</span></div><div class="line">	cin &gt;&gt; n<span class="comment">;</span></div><div class="line">	QuickPow(n-1)<span class="comment">;</span></div><div class="line">	cout &lt;&lt; Reult[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt;endl<span class="comment">;</span></div><div class="line">	return <span class="number">0</span><span class="comment">;</span></div><div class="line">&#125;</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>当输入的数过大时，前一个程序由于发生溢出导致计算结果不对我能理解，但是有时候会卡我就无法理解了，讲道理不应该啊，由于两个程序除了一个参数类型之外其他地方完全相同，所以我也就没有怀疑是程序的逻辑出了问题，反而去怀疑是编译器的问题.对目标程序进行反汇编，也没发现什么不对劲的地方，唯一的区别就是前者用的是一个 32 位寄存器传参，后者用的是一个 64 位寄存器传参.</p>
<p>昨天，我去向编译原理老师请教，还在想自己会不会发现了一个天大的编译器错误.当老师给我指出错误的时候，突然觉得无比尴尬，自己宛如一个智障.</p>
<p>错误原因如下：</p>
<p><strong>在C/C++中，无符号数移位是逻辑移位，而有符号数移位是算术移位.我在函数中使用了移位运算，因此，当溢出变为负数之后，我们知道，计算机中数的表示都是补码，负数的符号位是 1 ，因此，算术移位右移时高位补符号位就是补 1，所以导致 N 永远不会变为 0，<code>while</code> 循环永远不会结束，程序自然就卡住了.</strong></p>
<p>看下面一个例子：<br><img src="/photos/shift/sh.png" class="full-image"></p>
<p>从上面例子可以看出，有符号移位是算术移位，右移时高位补符号位.</p>
<h3 id="逻辑移位与算术移位"><a href="#逻辑移位与算术移位" class="headerlink" title="逻辑移位与算术移位"></a>逻辑移位与算术移位</h3>
<p>顺便复习一下逻辑移位和算术移位：</p>
<h4 id="逻辑移位"><a href="#逻辑移位" class="headerlink" title="逻辑移位"></a>逻辑移位</h4>
<p>无论左移还是右移，都是补 0.</p>
<h4 id="算术移位"><a href="#算术移位" class="headerlink" title="算术移位"></a>算术移位</h4>
<p>左移：低位补 0<br>右移：高位补符号位</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;移位错误&quot;&gt;&lt;a href=&quot;#移位错误&quot; class=&quot;headerlink&quot; title=&quot;移位错误&quot;&gt;&lt;/a&gt;移位错误&lt;/h3&gt;
&lt;p&gt;前天晚上，刷&lt;a href=&quot;http://www.51nod.com&quot;&gt;51Nod&lt;/a&gt;上面的一个题：通过矩阵快速幂计算斐波那契数列，结果发生了一个意想不到的错误，这件事也告诉了我一个道理：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当代码出错的时候，不要轻易去怀疑工具的问题，而要去想 90% 的可能性是自己的代码有问题.&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://ucasfl.me/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://ucasfl.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>网易公开课《博弈论简介》总结</title>
    <link href="http://ucasfl.me/2018/05/15/NetEase-openCourse-of-Game-theory/"/>
    <id>http://ucasfl.me/2018/05/15/NetEase-openCourse-of-Game-theory/</id>
    <published>2018-05-15T12:29:52.000Z</published>
    <updated>2018-05-20T08:19:23.765Z</updated>
    
    <content type="html"><![CDATA[<h3 id="囚徒困境与严格优势策略"><a href="#囚徒困境与严格优势策略" class="headerlink" title="囚徒困境与严格优势策略"></a>囚徒困境与严格优势策略</h3>
<p>囚徒困境定义：<br><em>两个嫌疑人甲乙被捕，如果均否认，两人都关押一个月，如果均承认，两人都关押六个月，如果一个承认，一个否认，那么否认的人关押十二个月，承认的人释放。</em></p>
<p>策略矩阵分析 x = 甲, y = 乙<br>
  <figure class="highlight lsl">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">          deny     confess</div><div class="line">deny    (<span class="number">-1</span>, <span class="number">-1</span>)  (<span class="number">-12</span>, <span class="number">0</span>)</div><div class="line">confess (<span class="number">0</span>, <span class="number">-12</span>)  (<span class="number">-6</span>, <span class="number">-6</span>)</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>对于甲来说，如果乙承认，那么承认的 payoff 是 -1, 否则 payoff 是 -12，承认更好；如果乙否认，那么承认的 payoff 是 0, 而否认的 payoff 是 -12。对于甲来说，无论乙选择何种策略，选择承认都能得到最高的 payoff ，所以在这儿，对甲来说，承认就是一个<strong>严格优势策略</strong>(strictly dominate strategy)。交换甲乙的位置，也是同样的。即：</p>
<p>如果对于对手的任何策略，该策略都能得到最高的 payoff，那么就是严格优势策略。</p>
<a id="more"></a>
<p>因此，此时，两人都会选择自己的严格优势策略：承认。尽管这样并不能得到最好的 payoff。</p>
<h3 id="严格劣势策略"><a href="#严格劣势策略" class="headerlink" title="严格劣势策略"></a>严格劣势策略</h3>
<p>在一次博弈中，如果无法找出严格优势策略，那么我们可以先排除严格劣势策略：</p>
<p><em>如果存在两个策略，无论对手选择何种策略，策略一都能得到比策略二更高的 payoff，那么策略二就是严格劣势策略。注意，总的策略数不止两个.</em></p>
<p>当排除了严格劣势策略之后，可能就能够选出严格优势策略。</p>
<h3 id="纳什均衡NE"><a href="#纳什均衡NE" class="headerlink" title="纳什均衡NE"></a>纳什均衡NE</h3>
<p>某些情况下，既找不到严格优势策略，也找不到严格劣势策略，这时候，就需要找到一个稳定的结果，使得双方都能得到最好的利益，这就是纳什均衡。</p>
<h4 id="协调均衡"><a href="#协调均衡" class="headerlink" title="协调均衡"></a>协调均衡</h4>
<p>两个人一起去捕猎，可以选择捕鹿或者兔，捕鹿需要合作，捕兔不需要<br>
  <figure class="highlight lsl">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">        捕鹿   捕兔</div><div class="line">捕鹿  (<span class="number">12</span>,<span class="number">12</span>) (<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">捕兔  (<span class="number">2</span>,  <span class="number">0</span>) (<span class="number">2</span>, <span class="number">2</span>)</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>在这儿，对于两个人来说，均没有严格优势策略和严格劣势策略，如果一个人选择捕鹿，那么另一个人也应该选择捕鹿才能得到最高的 payoff, 如果一个人选择捕兔，那么另一个也应该选择捕兔，才能得到最高的 payoff. 因此，在这一个博弈中，双方应该做同样的决策。因此，我们说在这个博弈中有两个纳什均衡：(12, 12), (2, 2).</p>
<p>纳什均衡指的是博弈中的一对策略，选择这对策略后，没有博弈者会想改变自己的策略，因为在给定决策中，这个博弈者已经选择了最佳策略。</p>
<h3 id="反协调均衡"><a href="#反协调均衡" class="headerlink" title="反协调均衡"></a>反协调均衡</h3>
<p>玩家选择不同策略才能获益最高：<br>
  <figure class="highlight lsl">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">(<span class="number">-2</span>, <span class="number">-2</span>) (<span class="number">2</span>, <span class="number">0</span>)</div><div class="line">(<span class="number">0</span>,   <span class="number">2</span>) (<span class="number">1</span>, <span class="number">1</span>)</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="混合均衡策略"><a href="#混合均衡策略" class="headerlink" title="混合均衡策略"></a>混合均衡策略</h3>
<p>上面说到的均为纯策略，混合策略就是说假设有两个策略，那么以概率 p 选择一个策略，1-p 选择另一个策略，存在概率 p, 使得博弈的另一方随机选择策略 payoff 最高<br>
  <figure class="highlight lsl">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"> p       <span class="number">1</span>-p</div><div class="line">(<span class="number">1</span>, <span class="number">-1</span>) (<span class="number">-1</span>, <span class="number">1</span>)</div><div class="line">(<span class="number">-1</span>, <span class="number">1</span>) (<span class="number">1</span>, <span class="number">-1</span>)</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>p - (1- p) = -p + 1- p =&gt; p = 1/2</p>
<p><strong>在每个有限博弈中（有限人数和有限策略），至少存在一个纳什均衡。</strong></p>
<h3 id="序贯模型"><a href="#序贯模型" class="headerlink" title="序贯模型"></a>序贯模型</h3>
<p>博弈者需要在不同时间，不同阶段做出决策。</p>
<p>公司 A 和 B，A 想要进入市场，如果 A 进入市场， B accept, 那么A的payoff = 2, B的payoff = 1, 如果 B fight, 那么 A 的payoff = -3, B 的payoff = -1，而如果 A 不进入市场，那么 A 的 payoff = 0, B的 payoff = 2</p>
<p><strong>子博弈完美纳什均衡(subgame perfect Nash equilibrium)SPNE</strong> : A strategy profile is a SPNE if it is a NE of every subgame of the original game<br>
  <figure class="highlight lsl">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">A -- Out -- (<span class="number">0</span>, <span class="number">2</span>)</div><div class="line">|</div><div class="line">In -- B fight -- (<span class="number">-3</span>, <span class="number">-1</span>)</div><div class="line">|</div><div class="line">B accept</div><div class="line">|</div><div class="line">(<span class="number">2</span>, <span class="number">1</span>)</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>即使 B 威胁如果 A 进入就 fight, 但实际上是一个幌子，因为如果 A 进入了，那么 accept 比 fight 会得到更高的 payoff，因此 B 会选择 accept 而不是 fight，有了这一结论之后，对 A 的分析就可以简化，如果进入 payoff = 2, 不进入, payoff = 0，自然，进入是更好的策略。</p>
<p>因此，在整个博弈中，A In, B accept 是唯一的 SPNE. 该理论是关于威胁和承诺的，通过 SPNE, 能够排除 B 在第二阶段中的 fight 并不是真正的威胁，除非 B 通过一些方法，排除了 accept 这一种策略，只剩下 fight 这一策略，那么就真正对 A 构成了威胁。</p>
<p>未完~</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;囚徒困境与严格优势策略&quot;&gt;&lt;a href=&quot;#囚徒困境与严格优势策略&quot; class=&quot;headerlink&quot; title=&quot;囚徒困境与严格优势策略&quot;&gt;&lt;/a&gt;囚徒困境与严格优势策略&lt;/h3&gt;
&lt;p&gt;囚徒困境定义：&lt;br&gt;&lt;em&gt;两个嫌疑人甲乙被捕，如果均否认，两人都关押一个月，如果均承认，两人都关押六个月，如果一个承认，一个否认，那么否认的人关押十二个月，承认的人释放。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;策略矩阵分析 x = 甲, y = 乙&lt;br&gt;
  &lt;figure class=&quot;highlight lsl&quot;&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td class=&quot;gutter&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;          deny     confess&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deny    (&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)  (&lt;span class=&quot;number&quot;&gt;-12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;confess (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-12&lt;/span&gt;)  (&lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-6&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;对于甲来说，如果乙承认，那么承认的 payoff 是 -1, 否则 payoff 是 -12，承认更好；如果乙否认，那么承认的 payoff 是 0, 而否认的 payoff 是 -12。对于甲来说，无论乙选择何种策略，选择承认都能得到最高的 payoff ，所以在这儿，对甲来说，承认就是一个&lt;strong&gt;严格优势策略&lt;/strong&gt;(strictly dominate strategy)。交换甲乙的位置，也是同样的。即：&lt;/p&gt;
&lt;p&gt;如果对于对手的任何策略，该策略都能得到最高的 payoff，那么就是严格优势策略。&lt;/p&gt;
    
    </summary>
    
      <category term="Math" scheme="http://ucasfl.me/categories/Math/"/>
    
    
      <category term="Math/Game theory" scheme="http://ucasfl.me/tags/Math-Game-theory/"/>
    
  </entry>
  
  <entry>
    <title>C++ 中的虚函数与动态绑定杂谈</title>
    <link href="http://ucasfl.me/2018/05/13/something-about-virtual-function-and-dynamic-binding-in-cpp/"/>
    <id>http://ucasfl.me/2018/05/13/something-about-virtual-function-and-dynamic-binding-in-cpp/</id>
    <published>2018-05-13T07:59:23.000Z</published>
    <updated>2018-06-05T04:46:31.142Z</updated>
    
    <content type="html"><![CDATA[<p>上大学之后学的第一门编程语言是 C，尽管 C 的确是一门很强大的语言，但是，在某些情况下，用 C 语言来解决问题实现起来会麻烦很多，另外，某些东西在 C 语言里面也是没有的，比如面向对象。</p>
<p>第一次接触面向对象大概是大二自学 Python 的时候，那时候看的一头雾水，什么构造函数，析构函数不理解它的原理，书里面讲解的也不是很清楚，更别提多态、继承等等。到后面看 C++ 的时候终于对面向对象有一些基本的理解了，虽然很多东西还是理解的不够透彻。</p>
<a id="more"></a>
<p>说到底，面向对象最重要的还是在其思想，当你理解了它的精髓和思想，那么，你再去看无论是 C++ ，还是 Python，还是 Java，其中的面向对象的内容都是一样的，只是不同语言的实现形式有所不同而已。</p>
<h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3>
<p>先简单说一下 C++ 里面的重载，所谓重载，就是可以定义两个名字一样的函数，它们的参数列表不同，那么就可以把其中一个函数称为另一个函数的重载，例如：</p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Equal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a == b;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Equal</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a == b;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>需要注意的是，只有参数列表不同：个数或类型。如果只有返回类型不同，那么第二个声明是错误的。这样，当你在调用函数时，编译器会根据参数类型来选择合适的函数。显然，这儿会产生一个问题，比如上面的 <code>Equal</code> 函数，如果传入的参数一个为 <code>int</code> ，一个为 <code>long</code> ，那么编译器就会被迷惑，因为它无法确定哪一个是最匹配的，编程的过程中应尽量避免这样的歧义。另外，<code>main</code> 函数不可以被重载。</p>
<h3 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h3>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">class</span> Person &#123;</div><div class="line">	<span class="keyword">public</span> :</div><div class="line">		<span class="keyword">float</span> height;</div><div class="line">		<span class="keyword">float</span> weight;</div><div class="line">		<span class="keyword">int</span> age;</div><div class="line">		Person()&#123;</div><div class="line">			height = <span class="number">0.0</span></div><div class="line">			weight = <span class="number">0.0</span></div><div class="line">			age = <span class="number">0</span>;</div><div class="line">		&#125;;</div><div class="line">		Person(<span class="keyword">float</span>, h, <span class="keyword">float</span> w, <span class="keyword">int</span> a)&#123;</div><div class="line">			height = h;</div><div class="line">			weight = w;</div><div class="line">			age = a;</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">virtual</span> ~Person()&#123;</div><div class="line">			<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Kill me."</span>;</div><div class="line">		&#125;</div><div class="line">&#125;;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>上面定义了一个类 <code>Person</code> ，同时定义了两个构造函数，当创建一个新的对象时，就会执行构造函数，显然，构造函数是可以被重载的，因此，编译器会根据参数列表来选择合适的构造函数，另外，初始类成员时也可以通过初始化列表，这儿不再叙述。</p>
<p>而析构函数则与构造函数相反，它是在一个对象消失的时候执行的，比如静态声明的对象退出作用域时，或动态分配的对象调用 <code>delete</code> 删除时。析构函数的函数名也和类名相同，只是前面多了一个符号 <code>~</code> 。另外，注意到上面的析构函数前面多了一个关键字 <code>virtual</code> 。先说一下该关键字是什么意思，它是实现动态绑定的关键，<code>virtual</code> 关键字允许在子类中重新定义该成员函数。下面，定义一个子类：</p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Person&#123;</div><div class="line">	<span class="keyword">public</span> :</div><div class="line">		<span class="keyword">int</span> salary;</div><div class="line">		<span class="built_in">std</span>::<span class="built_in">string</span> *name;</div><div class="line">		Man(<span class="keyword">char</span> *s)&#123;</div><div class="line">			name = <span class="keyword">new</span> <span class="built_in">string</span>(s);</div><div class="line">			salary = <span class="number">0</span>;</div><div class="line">		&#125;;</div><div class="line">		<span class="keyword">virtual</span> ~Man()&#123;</div><div class="line">			<span class="keyword">if</span> (name)&#123;</div><div class="line">				<span class="keyword">delete</span> name;</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">&#125;;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>在该类初始化的时候，动态分配了一个 <code>string</code> 存储名字，因此，需要在虚构函数中将其删除。</p>
<p>在 C++ 中，基类的指针是可以指向派生类的：</p>
<figure class="highlight inform7">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">Person</span> *<span class="keyword">man</span> = new <span class="keyword">Man</span>(<span class="string">"Ana"</span>);</div><div class="line">delete <span class="keyword">man</span>;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>考虑上面的代码，<code>man</code> 是一个 <code>Person</code> 类的指针，它指向了一个 <code>Man</code> 对象，假如上面的虚构函数没有定义成虚函数，那么 <code>delete</code> 的时候，只会调用 <code>Person</code> 的析构函数，这样，便发生了内存泄露，因为，动态分配的 <code>string</code> 并没有被删除。但定义成虚函数，那么编译器会根据它所指向的对象来选择对应的析构函数，从而实现动态绑定，这就是为什么基类的析构函数一般需要定义成虚函数。</p>
<p>最后，说一个有趣的问题，假如就像上面说的由于没有进行动态绑定导致发生内存泄露，那么，这部分内存什么时候被释放？很多人会以为需要等到关机或者重启，因为内存是易失性存储，但事实不是的，别忘了，计算机的终极大 Boss 可是操作系统，你分配出去的每一块内存它都时候监测着呢，<code>malloc</code> 是通过系统调用分配内存，而 <code>new</code> 则是通过 <code>malloc</code> 以及调用构造函数来实现对象分配。因此，当程序运行结束或 Crash 终止之后，操作系统会回收所有内存，无论是动态分配的还是静态分配的。但是，如果在程序运行的过程中，动态分配的内存是不会被回收的，因此，如果在运行过程不停分配内存而没有释放，那么内存就可能会被耗尽，这就是为什么要防止出现内存泄露。当然，如果一个进程分配了过多的内存超过一定限制，那么，我们的终极大
  Boss 又会出场了，它会直接把你 Kill 了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上大学之后学的第一门编程语言是 C，尽管 C 的确是一门很强大的语言，但是，在某些情况下，用 C 语言来解决问题实现起来会麻烦很多，另外，某些东西在 C 语言里面也是没有的，比如面向对象。&lt;/p&gt;
&lt;p&gt;第一次接触面向对象大概是大二自学 Python 的时候，那时候看的一头雾水，什么构造函数，析构函数不理解它的原理，书里面讲解的也不是很清楚，更别提多态、继承等等。到后面看 C++ 的时候终于对面向对象有一些基本的理解了，虽然很多东西还是理解的不够透彻。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://ucasfl.me/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://ucasfl.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>我们和好啦啦啦</title>
    <link href="http://ucasfl.me/2018/05/04/make-it-up/"/>
    <id>http://ucasfl.me/2018/05/04/make-it-up/</id>
    <published>2018-05-03T16:28:05.000Z</published>
    <updated>2018-05-13T07:55:16.619Z</updated>
    
    <content type="html"><![CDATA[<p>“unfortunately”, 我们在分手后的第二天（5 月 2 号）和好啦啦啦。</p>
<p>顺便，哈哈哈哈哈</p>
<a id="more"></a>
<p><img src="/photos/make/1.jpg" alt=""></p>
<p><img src="/photos/make/2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“unfortunately”, 我们在分手后的第二天（5 月 2 号）和好啦啦啦。&lt;/p&gt;
&lt;p&gt;顺便，哈哈哈哈哈&lt;/p&gt;
    
    </summary>
    
      <category term="love" scheme="http://ucasfl.me/categories/love/"/>
    
    
      <category term="love" scheme="http://ucasfl.me/tags/love/"/>
    
  </entry>
  
  <entry>
    <title>分别</title>
    <link href="http://ucasfl.me/2018/05/01/ending/"/>
    <id>http://ucasfl.me/2018/05/01/ending/</id>
    <published>2018-05-01T06:13:12.000Z</published>
    <updated>2018-05-01T11:02:19.370Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h3 id="曾经沧海难为水，除却巫山不是云"><a href="#曾经沧海难为水，除却巫山不是云" class="headerlink" title="曾经沧海难为水，除却巫山不是云"></a>曾经沧海难为水，除却巫山不是云</h3>
<p>2018 年 5 月 1 日<br>我失恋了<br>我们于 17 年 1 月 22 日在一起<br>到今天 465 天<br>刚好一年零 100 天<br>没想到这一次真的要离别了</p>
<p>之前有一个<a href="https://ilovezyq.github.io" target="_blank" rel="external">博客</a><br>专门用于记录我们之间的爱情<br>不过其实也没有在上面放过多少东西<br>以后 没有以后了</p>
<p>今天<br>是结束<br>也是开始</p>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;曾经沧海难为水，除却巫山不是云&quot;&gt;&lt;a href=&quot;#曾经沧海难为水，除却巫山不是云&quot; class=&quot;headerlink&quot; title=&quot;曾经沧海难为水，除却巫山不是云&quot;&gt;&lt;/a&gt;曾经沧海难为水，除却巫山不是云&lt;/h3&gt;
&lt;p
    
    </summary>
    
      <category term="ending" scheme="http://ucasfl.me/categories/ending/"/>
    
    
      <category term="ending" scheme="http://ucasfl.me/tags/ending/"/>
    
  </entry>
  
  <entry>
    <title>Git 通过 Ssh 连接 GitHub 无反应</title>
    <link href="http://ucasfl.me/2018/03/30/git-connect-to-github-with-ssh-no-response/"/>
    <id>http://ucasfl.me/2018/03/30/git-connect-to-github-with-ssh-no-response/</id>
    <published>2018-03-30T02:45:38.000Z</published>
    <updated>2018-03-30T02:50:43.098Z</updated>
    
    <content type="html"><![CDATA[<p>最近，ssh 连接 GitHub 突然不能用了，重新生成 ssh-key 也一样，执行命令 <code>git push origin master</code> 之后没有任何反应。<br>
  <a id="more"></a><br>通过网上查询得到如下方法，经验证有效（但不一定适用所有情况），故记录如下：</p>
<p>在命令行执行如下命令：</p>
<figure class="highlight ruby">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">$ eval <span class="string">`ssh-agent`</span></div><div class="line">$ ssh-add ~<span class="regexp">/.ssh/id</span>_rsa</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>问题解决~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，ssh 连接 GitHub 突然不能用了，重新生成 ssh-key 也一样，执行命令 &lt;code&gt;git push origin master&lt;/code&gt; 之后没有任何反应。&lt;br&gt;
    
    </summary>
    
      <category term="ssh" scheme="http://ucasfl.me/categories/ssh/"/>
    
    
      <category term="git ssh github" scheme="http://ucasfl.me/tags/git-ssh-github/"/>
    
  </entry>
  
  <entry>
    <title>如何通过命令行调节音量</title>
    <link href="http://ucasfl.me/2018/03/11/How-to-adjust-volume-in-command-line/"/>
    <id>http://ucasfl.me/2018/03/11/How-to-adjust-volume-in-command-line/</id>
    <published>2018-03-11T14:31:20.000Z</published>
    <updated>2018-03-11T14:34:22.091Z</updated>
    
    <content type="html"><![CDATA[<p>直接使用命令：<br>
  <figure class="highlight crmsh">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">amixer set <span class="keyword">Master</span> <span class="title">100</span>% : 调到最大，参数范围是 <span class="number">0</span>% ~ <span class="number">100</span> %</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<a id="more"></a>
<p>或输入：<br>
  <figure class="highlight ebnf">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="attribute">alsamixer</span></div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>运行该命令后将会进入命令行图形界面，从而可调节音量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直接使用命令：&lt;br&gt;
  &lt;figure class=&quot;highlight crmsh&quot;&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td class=&quot;gutter&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;amixer set &lt;span class=&quot;keyword&quot;&gt;Master&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;100&lt;/span&gt;% : 调到最大，参数范围是 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;% ~ &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; %&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/figure&gt;
&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Command" scheme="http://ucasfl.me/tags/Command/"/>
    
  </entry>
  
  <entry>
    <title>C++中的关联容器</title>
    <link href="http://ucasfl.me/2018/03/11/Summary-of-Associative-Container-in-C-plus-plus/"/>
    <id>http://ucasfl.me/2018/03/11/Summary-of-Associative-Container-in-C-plus-plus/</id>
    <published>2018-03-11T06:47:30.000Z</published>
    <updated>2018-03-11T11:31:35.840Z</updated>
    
    <content type="html"><![CDATA[<p>关联容器(Associative containers)支持通过键来高效地查找和读取元素。两个基本的关联容器类型是 map, set。</p>
<p>本文主要是对 C++ 中基本的关联容器 map, set 中的类型和支持的操作进行总结。</p>
<p>关联容器支持很多顺序容器也提供的相同操作,此外,还提供管理或使用键的特殊操作。</p>
<h3 id="关联容器类型"><a href="#关联容器类型" class="headerlink" title="关联容器类型"></a>关联容器类型</h3>
<p><img src="/photos/ac/1.png" alt=""></p>
<a id="more"></a>
<h3 id="pair-类型"><a href="#pair-类型" class="headerlink" title="pair 类型"></a>pair 类型</h3>
<p>在头文件 <code>utility</code> 中定义。</p>
<p><img src="/photos/ac/1.png" alt=""><br> <em>pair 类型提供的操作, T1, T2, 为类型，如 <code>pair&lt;string, vector&lt;int&gt; &gt; line;</code></em></p>
<p>pair 类型的使用相当繁琐,因此,如果需要定义多个相同的 pair 类型对象,可考虑利用 typedef 简化其声明。</p>
<p>与其他标准库类型不同,对于 pair 类,可以直接访问其数据成员:其成员都是仅有的,分别命名为 first 和 second。只需使用普通的点操作符——成员访问标志即可访问其成员。</p>
<h3 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h3>
<p>关联容器共享大部分——但并非全部——的顺序容器操作。关联容器不提供front、 push_front、 pop_front、back、push_back 以及 pop_back 操作。</p>
<h3 id="map-容器"><a href="#map-容器" class="headerlink" title="map 容器"></a>map 容器</h3>
<p>map 类型通常可理解为关联数组。同样，要使用 map 类型，也需要包含相应的头文件。</p>
<p>map 的构造函数：</p>
<p><img src="/photos/ac/3.png" alt=""></p>
<p>对于键类型,唯一的约束就是必须支持 &lt; 操作符,至于是否支持其他的关系或相等运算,则不作要求。</p>
<h4 id="map-类定义的类型"><a href="#map-类定义的类型" class="headerlink" title="map 类定义的类型"></a>map 类定义的类型</h4>
<p><img src="/photos/ac/4.png" alt=""></p>
<p>对 map 类型迭代器解引用，会得到一个 pair 类型。</p>
<h4 id="给-map-添加元素"><a href="#给-map-添加元素" class="headerlink" title="给 map 添加元素"></a>给 map 添加元素</h4>
<ul>
  <li>通过下标：下标为键，如果没找到，则添加键值对。使用下标访问 map 与使用下标访问数组或 vector 的行为截然不同:用下标访问不存在的元素将导致在 map 容器中添加一个新元素,它的键即为该下标值。</li>
</ul>
<p>在 map 中，迭代器返回 value_type 类型的值——包含 const key_type 和mapped_type 类型成员的 pair 对象;下标操作符则返回一个 mapped_type 类型的值。</p>
<p>对于 map 容器,如果下标所表示的键在容器中不存在,则添加新元素，而值进行默认初始化。</p>
<p>例如，利用 map 来统计输入单词数的简单方法：<br>
  <figure class="highlight cpp">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; words;</div><div class="line">	<span class="built_in">string</span> word;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; word)&#123;</div><div class="line">		++words[word];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator iter = words.begin(); iter != words.end(); ++iter)&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt;<span class="string">"\t"</span> &lt;&lt; iter-&gt;second &lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<h4 id="map-的-insert-操作"><a href="#map-的-insert-操作" class="headerlink" title="map 的 insert 操作"></a>map 的 insert 操作</h4>
<p><img src="/photos/ac/5.png" alt=""></p>
<h4 id="不修改map对象的查询操作"><a href="#不修改map对象的查询操作" class="headerlink" title="不修改map对象的查询操作"></a>不修改map对象的查询操作</h4>
<ul>
  <li>m.count(k) : 返回 m 中 k 出现的次数</li>
  <li>m.find(k) : 如果 m 中存在按 k 索引的元素，则返回指向该元素的迭代器，否则，返回超出末端迭代器。</li>
</ul>
<h4 id="map-的删除操作"><a href="#map-的删除操作" class="headerlink" title="map 的删除操作"></a>map 的删除操作</h4>
<p><img src="/photos/ac/6.png" alt=""></p>
<h4 id="map对象的遍历"><a href="#map对象的遍历" class="headerlink" title="map对象的遍历"></a>map对象的遍历</h4>
<p>同样提供 begin, end 运算，以生成用于遍历整个容器的迭代器。</p>
<h3 id="set-容器"><a href="#set-容器" class="headerlink" title="set 容器"></a>set 容器</h3>
<p>set 是键的集合，支持大部分前面的操作，但不支持下标操作。set 支持的操作基本与 map 相同。set 中的键和 map 中的一样，只能做读操作，不能做写操作。</p>
<h3 id="multimap-和-multiset-类型"><a href="#multimap-和-multiset-类型" class="headerlink" title="multimap 和 multiset 类型"></a>multimap 和 multiset 类型</h3>
<p>multimap 和 multiset 所支持的操作分别与 map 和 set 的操作相同,只有一个例外:multimap 不支持下标运算。</p>
<h3 id="返回迭代器的关联容器操作"><a href="#返回迭代器的关联容器操作" class="headerlink" title="返回迭代器的关联容器操作"></a>返回迭代器的关联容器操作</h3>
<p><img src="/photos/ac/7.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关联容器(Associative containers)支持通过键来高效地查找和读取元素。两个基本的关联容器类型是 map, set。&lt;/p&gt;
&lt;p&gt;本文主要是对 C++ 中基本的关联容器 map, set 中的类型和支持的操作进行总结。&lt;/p&gt;
&lt;p&gt;关联容器支持很多顺序容器也提供的相同操作,此外,还提供管理或使用键的特殊操作。&lt;/p&gt;
&lt;h3 id=&quot;关联容器类型&quot;&gt;&lt;a href=&quot;#关联容器类型&quot; class=&quot;headerlink&quot; title=&quot;关联容器类型&quot;&gt;&lt;/a&gt;关联容器类型&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/photos/ac/1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://ucasfl.me/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://ucasfl.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++中三种顺序容器的总结</title>
    <link href="http://ucasfl.me/2018/03/11/Summary-of-Sequential-Container-in-C-plus-plus/"/>
    <id>http://ucasfl.me/2018/03/11/Summary-of-Sequential-Container-in-C-plus-plus/</id>
    <published>2018-03-11T03:51:30.000Z</published>
    <updated>2018-03-11T05:46:18.372Z</updated>
    
    <content type="html"><![CDATA[<p>在 C++ 中，标准库提供了三种顺序容器：vector, list, deque，还有三种顺序容器适配器：stack, queue, priority_queue，要使用这些容器，需要在源程序中包含对应的头文件，如 <code>include&lt;vector&gt;</code>。本文主要总结容器的操作。</p>
<h3 id="容器类型："><a href="#容器类型：" class="headerlink" title="容器类型："></a>容器类型：</h3>
<ul>
  <li>vector: 支持快速随机访问（顺序存储）</li>
  <li>list : 支持快速插入、删除（非顺序存储）</li>
  <li>deque : 双端队列</li>
  <li>stack : 后进先出堆栈</li>
  <li>queue : 先进先出队列</li>
  <li>priority_queue : 有优先级管理的队列</li>
</ul>
<a id="more"></a>
<h3 id="容器构造函数"><a href="#容器构造函数" class="headerlink" title="容器构造函数"></a>容器构造函数</h3>
<p><img src="/photos/cpp/1.png" alt=""></p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3>
<p>每种容器类型都提供若干共同工作的迭代器类型。与容器类型一样,所有迭代器具有相同的接口:如果某种迭代器支持某种操作,那么支持这种操作的其他迭代器也会以相同的方式支持这种操作。</p>
<figure class="highlight armasm">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="symbol">container</span>&lt;elemtype&gt;::<span class="keyword">iterator </span><span class="keyword">iter; </span>//声明一个迭代器</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>所有容器均支持的迭代器操作：<br>
  <figure class="highlight armasm">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">*<span class="keyword">iter </span>返回迭代器 <span class="keyword">iter </span>所指向的元素的引用</div><div class="line"><span class="keyword">iter-&gt;mem </span>对 <span class="keyword">iter </span>进行解引用,获取指定元素中名为 mem 的成员。等效于(*<span class="keyword">iter).mem</span></div><div class="line">++<span class="keyword">iter/iter++ </span>: 给 <span class="keyword">iter </span>加 <span class="number">1</span>,使其指向容器里的下一个元素</div><div class="line">--<span class="keyword">iter/iter-- </span>: 给 <span class="keyword">iter </span>减 <span class="number">1</span>,使其指向容器里的前一个元素</div><div class="line"><span class="keyword">iter1 </span>== <span class="keyword">iter2/iter1 </span>!= <span class="keyword">iter2 </span>: 比较两个迭代器是否相等(或不等)。当两个迭代器指向同一个容器中的同一个元素,或者当它们都指向同一个容器的超出末端的下一位置时,两个迭代器相等</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>另外，vector 和 deque 的迭代器还提供额外的运算：<br>
  <figure class="highlight armasm">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="keyword">iter </span>+ n / <span class="keyword">iter </span>- n : 在迭代器上加(减)整数值 n,将产生指向容器中前面(后面)第 n个元素的迭代器。新计算出来的迭代器必须指向容器中的元素或超出容器末端的下一位置</div><div class="line"><span class="keyword">iter1 </span>+= <span class="keyword">iter2 </span>/ <span class="keyword">iter1 </span>-= <span class="keyword">iter2</span></div><div class="line">&gt;, &gt;=, &lt;, &lt;= 操作符</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>以上运算符仅适用于 vector 和　deque 的迭代器，因为这两种容器是顺序存储的，能够为元素提供快速，随机的访问它们确保可根据元素位置直接有效地访问指定的容器元素。这两种容器都支持通过元素位置实现的随机访问,因此它们的迭代器可以有效地实现算术和关系运算。</p>
<h3 id="迭代器范围"><a href="#迭代器范围" class="headerlink" title="迭代器范围"></a>迭代器范围</h3>
<p>左闭右开：[first, last)</p>
<p>编程意义：</p>
<ol>
  <li>当 first 与 last 相等时,迭代器范围为空;</li>
  <li>当 first 与不相等时,迭代器范围内至少有一个元素,而且 first 指向该区间中的第一元素。此外,通过若干次自增运算可以使 first 的值不断增大,直到 first == last 为止。</li>
</ol>
<h3 id="容器定义的类型别名"><a href="#容器定义的类型别名" class="headerlink" title="容器定义的类型别名"></a>容器定义的类型别名</h3>
<p><img src="/photos/cpp/2.png" alt=""></p>
<h3 id="容器的begin和end操作"><a href="#容器的begin和end操作" class="headerlink" title="容器的begin和end操作"></a>容器的begin和end操作</h3>
<p><img src="/photos/cpp/3.png" alt=""></p>
<p>另外，每个操作都有两个版本：const 和 非const，取决于容器的类型是 const 还是 非const</p>
<h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3>
<p><img src="/photos/cpp/4.png" alt=""></p>
<p>正如上图所示，<code>push_front</code> 仅适用于 list 和 deque 。</p>
<p>另外，需要注意的是，插入元素之后可能会使之前的迭代器失效，需要谨慎考虑。</p>
<h3 id="容器大小操作"><a href="#容器大小操作" class="headerlink" title="容器大小操作"></a>容器大小操作</h3>
<p><img src="/photos/cpp/5.png" alt=""></p>
<h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3>
<p><img src="/photos/cpp/6.png" alt=""></p>
<p>vector, deque 是顺序存储的，因此可通过下标访问。</p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3>
<p><img src="/photos/cpp/7.png" alt=""></p>
<h3 id="赋值与交换"><a href="#赋值与交换" class="headerlink" title="赋值与交换"></a>赋值与交换</h3>
<p><img src="/photos/cpp/8.png" alt=""></p>
<p>swap 相当于先删除，然后再赋值，使用swap可以节省删除的成本。</p>
<h3 id="容器自增长"><a href="#容器自增长" class="headerlink" title="容器自增长"></a>容器自增长</h3>
<p>对于大部分应用,使用 vector 容器是最好的。原因在于,标准库的实现者使用这样内存分配策略:以最小的代价连续存储元素。由此而带来的访问元素的便利弥补了其存储代价。</p>
<p>为了使 vector 容器实现快速的内存分配,其实际分配的容量要比当前所需的空间多一些。vector 容器预留了这些额外的存储区,用于存放新添加的元素。于是,不必为每个新元素重新分配容器。所分配的额外内存容量的确切数目因库的实现不同而不同。比起每添加一个新元素就必须重新分配一次容器,这个分配策略带来显著的效率。</p>
<h3 id="capacity-和-reserve-成员"><a href="#capacity-和-reserve-成员" class="headerlink" title="capacity 和 reserve 成员"></a>capacity 和 reserve 成员</h3>
<figure class="highlight ada">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">c.capacity() : 返回容器容量, <span class="type">capacity</span> &gt;= size</div><div class="line">c.reserve(n) : 将容器的预留量设为 <span class="type">n</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="string-类型"><a href="#string-类型" class="headerlink" title="string 类型"></a>string 类型</h3>
<p>在某些方面，可以将 string 看成是字符的容器，因此，大多数的容器操作也适合于 string 。</p>
<p><img src="/photos/cpp/9.png" alt=""><br> <em>string 特有的插入和删除操作</em></p>
<p><img src="/photos/cpp/10.png" alt=""><br> <em>子串操作</em></p>
<p><img src="/photos/cpp/11.png" alt=""><br> <em>append/replace</em></p>
<p><img src="/photos/cpp/12.png" alt=""><br> <em>append/replace 的参数 args</em></p>
<p><img src="/photos/cpp/13.png" alt=""><br> <em>string 查找operator</em></p>
<p><img src="/photos/cpp/14.png" alt=""><br> <em>args</em></p>
<p><img src="/photos/cpp/15.png" alt=""><br> <em>string compare operator</em></p>
<h3 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h3>
<p>除了顺序容器,标准库还提供了三种顺序容器适配器:queue、priority_queue 和 stack。</p>
<p>通用操作和类型：</p>
<p><img src="/photos/cpp/16.png" alt=""></p>
<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4>
<p><img src="/photos/cpp/17.png" alt=""></p>
<h4 id="queue-priority-queue"><a href="#queue-priority-queue" class="headerlink" title="queue/priority queue"></a>queue/priority queue</h4>
<p><img src="/photos/cpp/18.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 C++ 中，标准库提供了三种顺序容器：vector, list, deque，还有三种顺序容器适配器：stack, queue, priority_queue，要使用这些容器，需要在源程序中包含对应的头文件，如 &lt;code&gt;include&amp;lt;vector&amp;gt;&lt;/code&gt;。本文主要总结容器的操作。&lt;/p&gt;
&lt;h3 id=&quot;容器类型：&quot;&gt;&lt;a href=&quot;#容器类型：&quot; class=&quot;headerlink&quot; title=&quot;容器类型：&quot;&gt;&lt;/a&gt;容器类型：&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;vector: 支持快速随机访问（顺序存储）&lt;/li&gt;
  &lt;li&gt;list : 支持快速插入、删除（非顺序存储）&lt;/li&gt;
  &lt;li&gt;deque : 双端队列&lt;/li&gt;
  &lt;li&gt;stack : 后进先出堆栈&lt;/li&gt;
  &lt;li&gt;queue : 先进先出队列&lt;/li&gt;
  &lt;li&gt;priority_queue : 有优先级管理的队列&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://ucasfl.me/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://ucasfl.me/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Linux 命令行中更改屏幕亮度</title>
    <link href="http://ucasfl.me/2018/03/08/How-to-Change-Brightness-in-Linux-Command-Line/"/>
    <id>http://ucasfl.me/2018/03/08/How-to-Change-Brightness-in-Linux-Command-Line/</id>
    <published>2018-03-08T15:28:59.000Z</published>
    <updated>2018-03-11T03:58:39.322Z</updated>
    
    <content type="html"><![CDATA[<p>寒假的时候，笔记本又坏了，这次比前面两次还要更严重，直接开不了机。于是好了，一个寒假在家什么也没干。到学校的第一天就把电脑送去维修，今天才拿回来。好吧，这已经是第三次维修了。取电脑的时候，我问维修的工程师，这次是哪儿坏了。他回答，主板坏了。我说，主板不是刚刚才换了没多久的吗……他说，又坏了。我竟无言以对。</p>
<p>电脑确实修好了。不过拿回来以后，发现屏幕怎么这么暗，然后我通过桌面设置调节，竟然无法调节，即使调到最大也没变化。我心里一凉，是不是硬件上哪儿又坏了。我切回 Windows 系统，惊喜的发现，亮度是可以调节的，那就好办了，既然是软件的问题，咱就可以自己解决。桌面无法调节，那就直接在命令行手动设置亮度值。</p>
<a id="more"></a>
<p>首先，查看屏幕亮度的最大值：</p>
<figure class="highlight ruby">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">fenglv@segmentfault<span class="symbol">:~</span>$ cat /sys/<span class="class"><span class="keyword">class</span>/<span class="title">backlight</span>/<span class="title">intel_backlight</span>/<span class="title">max_brightness</span> </span></div><div class="line"><span class="number">7500</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>输出结果表明，亮度最大值为 7500 ，因此，可以在 0 ~ 7500 之间。</p>
<p>然后，再查看一下当前的亮度值：</p>
<figure class="highlight ruby">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">fenglv@segmentfault<span class="symbol">:~</span>$ cat /sys/<span class="class"><span class="keyword">class</span>/<span class="title">backlight</span>/<span class="title">intel_backlight</span>/<span class="title">brightness</span> </span></div><div class="line"><span class="number">957</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>当前亮度为 957，这 TM 屏幕能不暗吗？</p>
<p>如果要更改屏幕亮度，那么只需手动更改 <code>/sys/class/backlight/intel_backlight/brightness</code> 文件内容即可。至此，你就应该知道怎么办了。</p>
<h3 id="设置启动时的默认亮度"><a href="#设置启动时的默认亮度" class="headerlink" title="设置启动时的默认亮度"></a>设置启动时的默认亮度</h3>
<p>如果要设置电脑启动时候的默认亮度，那么，只需要在文件 <code>/etc/rc.local</code> <code>exit 0</code> 前面加上如下一行内容：<br>
  <figure class="highlight gradle">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">echo <span class="number">5500</span> &gt; <span class="regexp">/sys/</span><span class="keyword">class</span><span class="regexp">/backlight/i</span>ntel_backlight<span class="regexp">/brightness</span></div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>如上，我把启动时候的亮度值设置为 5500。</p>
<h3 id="自定义亮度"><a href="#自定义亮度" class="headerlink" title="自定义亮度"></a>自定义亮度</h3>
<p>另外，为了每次方便的设置亮度，我写了一个小脚本，并命名为 <code>chbgn</code> ，然后增加执行权限，并放在 <code>$HOME/bin</code> 目录下，这样，每次要设置亮度的时候就可以很方便的进行交互式设置了，体验不比图形界面差。脚本内容如下：<br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"><span class="comment"># 一个用于调节屏幕亮度的脚本</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$USER</span>"</span> != <span class="string">"root"</span> ]]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"The program must be executed under the root user."</span>;</div><div class="line">	<span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span>  -n <span class="string">"Please input the brightness value(0 ~ 7500): "</span>;</div><div class="line"><span class="built_in">read</span> int;</div><div class="line"></div><div class="line">value=`expr <span class="variable">$int</span> + 0`;</div><div class="line">expr <span class="variable">$value</span> &amp;&gt;/dev/null;</div><div class="line"><span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Input must be an integer. Change brightness failed!!!"</span></div><div class="line">	<span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$value</span> -ge 0 ] &amp;&amp; [ <span class="variable">$value</span> -le 7500 ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$value</span> &gt; /sys/class/backlight/intel_backlight/brightness</div><div class="line">	<span class="built_in">echo</span> <span class="string">"The brightness of the Computer has successfully changed ^_^"</span></div><div class="line">	<span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Input must be an integer betwwen 0 and 7500. Change brightness failed!!!"</span>;</div><div class="line"><span class="built_in">exit</span> 0;</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寒假的时候，笔记本又坏了，这次比前面两次还要更严重，直接开不了机。于是好了，一个寒假在家什么也没干。到学校的第一天就把电脑送去维修，今天才拿回来。好吧，这已经是第三次维修了。取电脑的时候，我问维修的工程师，这次是哪儿坏了。他回答，主板坏了。我说，主板不是刚刚才换了没多久的吗……他说，又坏了。我竟无言以对。&lt;/p&gt;
&lt;p&gt;电脑确实修好了。不过拿回来以后，发现屏幕怎么这么暗，然后我通过桌面设置调节，竟然无法调节，即使调到最大也没变化。我心里一凉，是不是硬件上哪儿又坏了。我切回 Windows 系统，惊喜的发现，亮度是可以调节的，那就好办了，既然是软件的问题，咱就可以自己解决。桌面无法调节，那就直接在命令行手动设置亮度值。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Command Linux" scheme="http://ucasfl.me/tags/Command-Linux/"/>
    
  </entry>
  
  <entry>
    <title>再见, 2017</title>
    <link href="http://ucasfl.me/2017/12/31/the-end-of-2017/"/>
    <id>http://ucasfl.me/2017/12/31/the-end-of-2017/</id>
    <published>2017-12-31T13:32:52.000Z</published>
    <updated>2017-12-31T19:11:41.137Z</updated>
    
    <content type="html"><![CDATA[<p>今天，是2017年的最后一天<br>再过不到三个小时，就是2018了<br>过去这一年，说起来，生活好像也没有多大变化</p>
<a id="more"></a>
<p>首先，说说学习<br>马上，大学生涯就只剩下三分之一了<br>原本看样子，大二下学期的时候成绩有些起色<br>但最后发现，一整年下来<br>成绩毫无变化</p>
<p>大三也只剩下一半了<br>有的路不得不走，所以还是要走<br>比如考研也许就是其中之一</p>
<p>生活上，2017年印象最深刻的大概就是感冒必发烧吧<br>其中比较严重的两次还不得不进医院输液<br>一次是四月份，刚过完清明，到医院输了三天液<br>一次就是上周，到医院输了四天液</p>
<p>过去的一年好像也熬过不少夜<br>大概还通过四次宵<br>不过这真的是一个坏习惯</p>
<p>作为一个计系学生<br>过去这一年应该也写了不少代码<br>目前最熟练的语言还是 C 吧<br>虽然不得不写了很多的 Verilog，但真的不感兴趣<br>Python 是一门很强大的语言，于是便成为了我第二喜爱的语言<br>这学期因为数据库实验学了一下世界上最好的语言，也写了一点东西<br>不过目前真的只懂一些基础语法<br>JS/Java/C++/HTML/CSS 大概是可以略过了<br>实践是学习一门语言最快的方式</p>
<p>2017 年最大的一个变化大概就是生命中多了一个人<br>多了一个让我朝思暮想的人<br>嘻嘻，你们懂的</p>
<p>每次写东西前好像都感觉有很多东西要写<br>但真正开始写的时候却发现什么也写不出来<br>最后只能胡说八道一些<br>大概就这些吧</p>
<p>新的一年<br>希望自己还有亲人、爱人都能有一个好身体<br>希望成绩能有所长进<br>希望考研顺利<br>希望和女朋友能少吵几次架<br>舍不得看到她哭<br>还有一个最大的愿望就留在心里当作秘密吧<br>因为我害怕说出来就不能实现了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，是2017年的最后一天&lt;br&gt;再过不到三个小时，就是2018了&lt;br&gt;过去这一年，说起来，生活好像也没有多大变化&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://ucasfl.me/categories/Essay/"/>
    
    
      <category term="Year" scheme="http://ucasfl.me/tags/Year/"/>
    
  </entry>
  
  <entry>
    <title>Python 退出时出现 PermissionError</title>
    <link href="http://ucasfl.me/2017/12/21/python-exit-error/"/>
    <id>http://ucasfl.me/2017/12/21/python-exit-error/</id>
    <published>2017-12-21T14:51:29.000Z</published>
    <updated>2018-03-11T04:04:39.847Z</updated>
    
    <content type="html"><![CDATA[<p>在解决上一个关于<a href="https://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/">OpenCv导入失败</a>的问题的时候，不小心在<code>root</code>权限下运行了Python，导致之后在普通用户下运行Python，退出时出现如下错误：</p>
<figure class="highlight subunit">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">Error </span>in atexit._run_exitfuncs:</div><div class="line">PermissionError: [Errno 13] Permission denied</div></pre>
      </td>
    </tr>
  </table>
</figure>
<a id="more"></a>
<p>上网查了一番没找到好的解决办法，唯一的解决办法就是把它卸载了重装，但是，对于系统自带的Python版本，则不能这样做，因为有很多库依赖。由于我使用的是 anaconda ，因此，干脆直接卸了重新安装～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在解决上一个关于&lt;a href=&quot;https://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/&quot;&gt;OpenCv导入失败&lt;/a&gt;的问题的时候，不小心在&lt;code&gt;root&lt;/code&gt;权限下运行了Python，导致之后在普通用户下运行Python，退出时出现如下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight subunit&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Error &lt;/span&gt;in atexit._run_exitfuncs:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PermissionError: [Errno 13] Permission denied&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
    
    </summary>
    
      <category term="fix-problem" scheme="http://ucasfl.me/categories/fix-problem/"/>
    
    
      <category term="Python ananconda" scheme="http://ucasfl.me/tags/Python-ananconda/"/>
    
  </entry>
  
  <entry>
    <title>解决 /Usr/lib/x86_64-Linux-gnu/libstdc++.so.6 Version GLIBCXX_3.4.22&#39; Not Found 的问题</title>
    <link href="http://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/"/>
    <id>http://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/</id>
    <published>2017-12-21T12:48:42.000Z</published>
    <updated>2018-03-11T03:57:02.385Z</updated>
    
    <content type="html"><![CDATA[<p>今天升级了一下 OpenCv，升级完之后，却出问题了，执行<code>import cv2</code> 报下面的错误：</p>
<figure class="highlight crystal">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, in &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">ImportError:</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libstdc</span>++.<span class="title">so</span>.6: <span class="title">version</span> `<span class="title">GLIBCXX_3</span>.4.22' <span class="title">not</span> <span class="title">found</span> (<span class="title">required</span> <span class="title">by</span> /<span class="title">home</span>/<span class="title">fenglv</span>/<span class="title">FILE</span>/<span class="title">anaconda3</span>/<span class="title">lib</span>/<span class="title">python3</span>.6/<span class="title">site</span>-<span class="title">packages</span>/../../<span class="title">libopencv_objdetect</span>.<span class="title">so</span>.3.3)</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>意思是导入库所需要的 <code>libstdc++.so.6</code> 没有找到，然后，我执行 <code>locate libstdc++.so.6</code> 命令，发现这个库是存在的啊。上网查了一下发现原本是因为升级了 <code>OpenCv</code> 之后需要更高版本的库，而当前的版本过低，所以才出错。</p>
<a id="more"></a>
<p>执行命令 <code>strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</code> ，果然，显示的版本低于<code>3.4.22</code> 。</p>
<p>之后找到解决办法：</p>
<p>下载最新版的<code>libstdc++</code>，<a href="http://ftp.de.debian.org/debian/pool/main/g/gcc-8/libstdc++-8-dev_8-20171213-1_amd64.deb" target="_blank" rel="external">点击下载</a>，然后解压缩：</p>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">ar -x libstdc++<span class="number">6</span>_8-<span class="number">20171213</span>-<span class="number">1</span>_amd64<span class="selector-class">.deb</span> &amp;&amp; tar xvf data<span class="selector-class">.tar</span><span class="selector-class">.xz</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>之后，直接将解压出来的<code>/usr/x86_64-linux-gnu/libstdc++.so.6.25</code> 复制到<code>/usr/lib/x86_64-linux-gnu/</code> 下，当然，为了保险起见，你也可以先备份一下原文件。然后<br>
  <figure class="highlight crystal">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">cd /usr/bin/<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/</span></div><div class="line">sudo rm lidstdc++.so.<span class="number">6</span></div><div class="line">sudo ln libstdc++.so.<span class="number">6.25</span> libstdc++.so.<span class="number">6</span></div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>现在，你再次执行命令<code>strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</code> ，显示的版本号就如下：</p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.4</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.6</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.7</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.8</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.9</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.10</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.11</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.12</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.13</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.14</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.15</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.16</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.17</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.18</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.19</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.20</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.21</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.22</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.23</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.24</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.25</span></div><div class="line"><span class="selector-tag">GLIBCXX_DEBUG_MESSAGE_LENGTH</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>至此，问题解决～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天升级了一下 OpenCv，升级完之后，却出问题了，执行&lt;code&gt;import cv2&lt;/code&gt; 报下面的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, in &amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ImportError:&lt;/span&gt; /usr/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;x86_64&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;linux&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;gnu&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;libstdc&lt;/span&gt;++.&lt;span class=&quot;title&quot;&gt;so&lt;/span&gt;.6: &lt;span class=&quot;title&quot;&gt;version&lt;/span&gt; `&lt;span class=&quot;title&quot;&gt;GLIBCXX_3&lt;/span&gt;.4.22&#39; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;found&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;by&lt;/span&gt; /&lt;span class=&quot;title&quot;&gt;home&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;fenglv&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;FILE&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;anaconda3&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;python3&lt;/span&gt;.6/&lt;span class=&quot;title&quot;&gt;site&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;packages&lt;/span&gt;/../../&lt;span class=&quot;title&quot;&gt;libopencv_objdetect&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;so&lt;/span&gt;.3.3)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;意思是导入库所需要的 &lt;code&gt;libstdc++.so.6&lt;/code&gt; 没有找到，然后，我执行 &lt;code&gt;locate libstdc++.so.6&lt;/code&gt; 命令，发现这个库是存在的啊。上网查了一下发现原本是因为升级了 &lt;code&gt;OpenCv&lt;/code&gt; 之后需要更高版本的库，而当前的版本过低，所以才出错。&lt;/p&gt;
    
    </summary>
    
      <category term="fix-problem" scheme="http://ucasfl.me/categories/fix-problem/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu 中如何阻止一个包升级</title>
    <link href="http://ucasfl.me/2017/12/17/How-to-hold-a-package-in-Ubuntu/"/>
    <id>http://ucasfl.me/2017/12/17/How-to-hold-a-package-in-Ubuntu/</id>
    <published>2017-12-17T07:27:06.000Z</published>
    <updated>2018-03-14T08:15:43.192Z</updated>
    
    <content type="html"><![CDATA[<p>阻止升级：<br>
  <figure class="highlight coq">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">sudo echo <span class="string">"package hold"</span> | <span class="type">sudo</span> dpkg --<span class="built_in">set</span>-selections</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p><code>package</code> 为包的名字。</p>
<a id="more"></a>
<p>如果要取消，则执行命令：<br>
  <figure class="highlight coq">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">sudo echo <span class="string">"package install"</span> | <span class="type">sudo</span> dpkg --<span class="built_in">set</span>-selections</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阻止升级：&lt;br&gt;
  &lt;figure class=&quot;highlight coq&quot;&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td class=&quot;gutter&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo echo &lt;span class=&quot;string&quot;&gt;&quot;package hold&quot;&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;sudo&lt;/span&gt; dpkg --&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;-selections&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package&lt;/code&gt; 为包的名字。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如果眼泪会说话</title>
    <link href="http://ucasfl.me/2017/12/15/If-tears-can-speak/"/>
    <id>http://ucasfl.me/2017/12/15/If-tears-can-speak/</id>
    <published>2017-12-15T10:45:06.000Z</published>
    <updated>2018-03-11T04:00:52.727Z</updated>
    
    <content type="html"><![CDATA[<p>如果眼泪会说话<br>也许，生活就会容易一些</p>
<p>如果眼泪会说话<br>也许，爱情就会轻松一些</p>
<a id="more"></a>
<p>^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果眼泪会说话&lt;br&gt;也许，生活就会容易一些&lt;/p&gt;
&lt;p&gt;如果眼泪会说话&lt;br&gt;也许，爱情就会轻松一些&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://ucasfl.me/categories/Essay/"/>
    
    
      <category term="emotion" scheme="http://ucasfl.me/tags/emotion/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://ucasfl.me/2017/12/14/One-year/"/>
    <id>http://ucasfl.me/2017/12/14/One-year/</id>
    <published>2017-12-14T14:10:33.000Z</published>
    <updated>2018-03-11T04:04:01.199Z</updated>
    
    <content type="html"><![CDATA[<p>再过三天，博客就一周年了<br>这一年以来，好像也没能够写出什么有意义的东西<br>也许当时只是觉得一个独立博客大概是一个程序员的标志吧</p>
<a id="more"></a>
<p>博客正式上线是 2016 年 12 月 17 日<br>也就是去年四六级考试那天</p>
<p>这一年，博客也发生过许多变化<br>主题从最开始的 yilia 换到了 next<br>今天三月份购买了一个域名<br>从此使用上了独立域名<br>评论系统多次变更<br>上月通过 Cloudflare 将域名上 https<br>…</p>
<p>原本打算在 17 日那天好好写一篇文章来记录一下博客这一年以来的变化<br>却突然改在今天<br>一切都是意料之外<br>而对于博客这一年以来的变化也只是只言片语的带过</p>
<p>最近学习上又遇到了瓶颈<br>很多事情要干<br>但什么也感觉不会<br>什么也做不下去</p>
<p>时隔一周<br>又和女朋友吵架了<br>爱情带给人的不仅仅只有甜蜜<br>还有很多很多<br>包括痛苦</p>
<p>梦碎了<br>梦醒了<br>生活还得继续<br>谁不是被生活赶着走</p>
<p>最近越来越宅<br>越来越不喜欢接触外面的热闹<br>也越来越不会说话<br>连胡说八道都不知道该说什么了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再过三天，博客就一周年了&lt;br&gt;这一年以来，好像也没能够写出什么有意义的东西&lt;br&gt;也许当时只是觉得一个独立博客大概是一个程序员的标志吧&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://ucasfl.me/categories/Essay/"/>
    
    
      <category term="Emotion" scheme="http://ucasfl.me/tags/Emotion/"/>
    
  </entry>
  
  <entry>
    <title>Xrandr-一个可以设置屏幕分辨率的 Linux 命令</title>
    <link href="http://ucasfl.me/2017/12/10/Linux-commands-of-xrandr/"/>
    <id>http://ucasfl.me/2017/12/10/Linux-commands-of-xrandr/</id>
    <published>2017-12-09T16:53:10.000Z</published>
    <updated>2018-03-11T04:02:56.527Z</updated>
    
    <content type="html"><![CDATA[<p>一个可以设置屏幕分辨率的 Linux 命令。</p>
<figure class="highlight ada">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">xrandr : 显示系统支持的所有分辨率</div><div class="line">xrandr -s <span class="number">0</span> : 设置为系统默认分辨率</div><div class="line">xrandr -s arg : 设置具体分辨率,如 <span class="type">xrandr</span> -s <span class="number">1024</span>x768</div></pre>
      </td>
    </tr>
  </table>
</figure>
<a id="more"></a>
<p>完^_^</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个可以设置屏幕分辨率的 Linux 命令。&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;xrandr : 显示系统支持的所有分辨率&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xrandr -s &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : 设置为系统默认分辨率&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xrandr -s arg : 设置具体分辨率,如 &lt;span class=&quot;type&quot;&gt;xrandr&lt;/span&gt; -s &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;x768&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用 Tensorflow 实现神经网络</title>
    <link href="http://ucasfl.me/2017/11/12/an-introduction-to-implementing-neural-networks-using-tensorflow/"/>
    <id>http://ucasfl.me/2017/11/12/an-introduction-to-implementing-neural-networks-using-tensorflow/</id>
    <published>2017-11-12T04:09:50.000Z</published>
    <updated>2018-03-11T03:54:40.247Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>
<p>如果你一直关注数据科学/机器学习，那么你肯定知道目前深度学习和神经网络非常流行。许多组织/公司都想要雇佣精通深度学习技能的人。从商业竞争到开源项目和支付高额薪水，人们在尝试一切可能的方法来挖掘这一有限的人才。自我驱动的工程师正被汽车工业中的利器所追逐，因为汽车工业正处于近几十年来最大的破坏边缘！</p>
<a id="more"></a>
<p>如果你对深度学习的前景感到兴奋，但还没有开始你的旅途，那么我将会开启你的旅程。从这篇文章开始，我将会写一系列关于深度学习的文章，包括最受欢迎的深度学习库和它们的实现。</p>
<p>在这篇文章中，我将会向你介绍 Tensorflow。读完这篇文章以后，你将会了解神经网络的应用，并且能够使用 TensorFlow 来解决实际生活中的问题。阅读本文前，你需要了解神经网络的基本知识并且对编程比较熟悉。虽然本文中使用的语言是 Python，但我关注得更多的是概念，并且尽可能保持语言的不可知性。</p>
<p>让我们开始吧！</p>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/maxresdefault-1.jpg" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/maxresdefault-1-1024x576.jpg" alt="TensorFlow"></a></p>
<h2 id="何时使用神经网络？"><a href="#何时使用神经网络？" class="headerlink" title="何时使用神经网络？"></a>何时使用神经网络？</h2>
<p>神经网络成为人们的关注点已经有很长的一段时间了。如果你想了解关于神经网络和深度学习的更详细的解释，请阅读<a href="https://www.analyticsvidhya.com/blog/2016/08/evolution-core-concepts-deep-learning-neural-networks/" target="_blank" rel="external">这篇文章</a>。它的 “depper” 版本在图像识别、语音和自然语言处理等许多领域都取得了巨大的突破。</p>
<p>最主要的问题是什么时候使用神经网络，什么时候不用？这个领域就像现在的金矿一样，每天都会有许多新的发现。为了成为一个“淘金热”分子，你需要记住下面这些事情：</p>
<ul>
  <li><strong>首先，神经网络需要清晰而详实的数据（主要是大数据）来进行训练</strong>。如果把神经网络想象成一个孩子，他首先需要观察他的父母如何走路，然后尝试独立行走，用他的每一步，学会如何来完成一个特定的任务。他可能会跌倒几次，但经过几次失败的尝试，他便学会了如何走路。如果你不让他自己尝试，那么他可能永远也不能学会走路。你给他接触的越多，那么他就会学得越好。</li>
  <li><strong>使用神经网络来处理一些复杂的问题，比如图像处理是明智的。</strong>神经网络属于一类称为表示学习算法的算法类。这些算法将复杂的问题分解成简单的形式，从而使它们能够理解（或“表示“）。就像你在吃东西的时候，需要先把食物嚼碎，然后才咽下。这比传统（非表示学习）算法更加困难。</li>
  <li><strong>什么时候你能够拥有合适的神经网络来解决问题？</strong>每个问题都有它的困难之处。所以，数据决定了解决问题的方式。比如，如果问题是序列生成，那么递归神经网络更加合适。然而，如果是图像相关的问题，那么改用卷积神经网络会更好。</li>
  <li><strong>最后，但不是不重要，硬件需求对于运行一个深度神经网络模型是至关重要的。</strong>神经网络模型在很早之前就有了，但是在近些年才开始活跃起来，主要原因就是计算资源更好，更强大了。如果你想用神经网络来解决现实生活中的问题，请准备购买一些高端的硬件设备。</li>
</ul>
<h2 id="使用神经网络来解决问题的通常手段"><a href="#使用神经网络来解决问题的通常手段" class="headerlink" title="使用神经网络来解决问题的通常手段"></a>使用神经网络来解决问题的通常手段</h2>
<p>神经网络是一种特殊的机器学习（ML）算法。就像每一个机器学习算法一样，你需要按照通常的机器学习工作流程来进行数据预处理，模型建立和模型评估。为了简单起见，我在下面列出了一个处理神经网络问题的清单：</p>
<ul>
  <li>思考一下，使用神经网络算法来处理该问题是否比用传统算法更好（参考上面章节的清单）</li>
  <li>调查一下，待解决的问题使用哪种神经网络更适合</li>
  <li>使用你选择的语言/库来定义神经网络结构</li>
  <li>将数据转化为正确的格式并进行数据划分</li>
  <li>根据你的需要对数据进行预处理</li>
  <li>添加数据来增大数据量从而更好的训练模型</li>
  <li>将数据”喂给”神经网络进行训练</li>
  <li>训练并监测训练过程中的变化和验证数据集的变化</li>
  <li>测试你的模型，并将它保存下来以便将来使用</li>
</ul>
<p>在这篇文章中，我将重点放在图像数据上。所以在开始探讨 TensorFlow 之前，让我们先理解一下图像数据。</p>
<h2 id="图像数据以及常用于解决图像问题的库"><a href="#图像数据以及常用于解决图像问题的库" class="headerlink" title="图像数据以及常用于解决图像问题的库"></a>图像数据以及常用于解决图像问题的库</h2>
<p>图像数据通常以三维数据的形式排序，每一维分别代表高、宽和颜色通道。比如，此时你在你的电脑上截一张图，它将会先转化为一个三维数组，然后再压缩成 <code>.jpeg</code> 或 <code>.png</code> 文件格式。</p>
<p>虽然这些图像对于人类来说很容易理解，但是计算机却很难理解它们。这种现象被称为“语义鸿沟”。我们的大脑能够在几秒钟的时间内看到图像并理解完整的图像，然而，计算机却只是把图像看成一组数字。所以问题是如何向计算机解释图片？</p>
<p>在早期时候，人们试图将图像分解成机器“可理解”的形式，就像一个模板一样。比如，人脸总是有一种特定的结构，这种结构在每个人中都有一定的保留，例如眼睛、鼻子或脸的形状。但是这种方法很乏味，因为当要识别的对象数量增加时，“模板”就不能保存了。</p>
<p>快速前进到 2012 年，一个深度神经网络赢得了 <code>ImageNet</code> 挑战，这是一个根据自然场景来识别对象的著名挑战。在所有随即到来的 <code>ImageNet</code> 挑战中，它持续占领统治地位，从而证明了用它来解决图像问题的有用性。</p>
<p>所以，人们通常使用哪种语言（库）来解决图像识别问题呢？在一个<a href="https://www.analyticsvidhya.com/blog/2016/08/deep-learning-path/" target="_blank" rel="external">最近的调查中</a>，我发现绝大多数受欢迎的深度学习库都有 Python 接口，紧跟着的是 Lua、Java 和 Matlab 。下面是一些最受欢迎的库：</p>
<ul>
  <li><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="external">Caffe</a></li>
  <li><a href="http://deeplearning4j.org/" target="_blank" rel="external">DeepLearning4j</a></li>
  <li><a href="https://www.tensorflow.org/" target="_blank" rel="external">TensorFlow</a></li>
  <li><a href="http://www.deeplearning.net/software/theano" target="_blank" rel="external">Theano</a></li>
  <li><a href="http://torch.ch/" target="_blank" rel="external">Torch</a></li>
</ul>
<p>现在，你已经知道了一张图像是如何存储的，并且知道了常用的库。下面，让我们来看一下 TensorFlow 能够为我们提供什么。 </p>
<h2 id="TensorFlow-是什么？"><a href="#TensorFlow-是什么？" class="headerlink" title="TensorFlow 是什么？"></a>TensorFlow 是什么？</h2>
<p>我们先看一下官方的定义：</p>
<blockquote>
  <p>“TensorFlow 是一个使用数据流图来进行数值计算的开源软件库。图中的节点表示数学运算，而图中的边表示在节点之间进行传递的多维数据数组（又叫做张量）。灵活的架构允许你在桌面、服务器或移动设备上通过一个单一的 API 使用一个或多个 CPU 或 GPU 部署进行计算。”</p>
</blockquote>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing.gif" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing.gif" alt="tensors_flowing"></a><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing-3.gif" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing-3.gif" alt="tensors_flowing"></a></p>
<p>如果这听起来很让人迷糊，别担心，下面是我的简单定义：你可以简单的把 TensorFlow 看成一个扭曲的 <code>numpy</code>。如果你过去接触过 <code>numpy</code>，那么理解 TensorFlow 就非常简单了。numpy 和 TensorFlow 之间最主要的区别就是 TensorFLow 使用一种惰性的编程范式。它首先搭建一个把所有操作都定义好了的图，然后，当一个“会话“被调用时，它就会开始”运行“这个图。这个图是可扩展的，只需要改变内部张量（又叫做多维数组）的数据表示即可。构建计算图可以看作是使用
  TensorFlow 的主要工作。如果想了解更多关于计算图的数学组成，请阅读<a href="http://colah.github.io/posts/2015-08-Backprop/" target="_blank" rel="external">这篇文章</a>。</p>
<p>我们很容易把 TensorFlow 归为一个神经网络库，但它不仅仅是这样。的确，它是一个非常强大的神经网络库。但是，它还能够做更多的事情。你可以使用它来构建其他机器学习算法，比如决策树或 K-近邻算法。你可以用它来完成任何你通常用 numpy 来完成的事情。因此它又被形象地称为 “NumPy 类固醇”。</p>
<p>使用 TensorFlow 的优点有：</p>
<ul>
  <li><strong>它具有一个直观的结构。</strong>顾名思义它具有”张量流“。你可以轻松的可视化图的每一个部分。</li>
  <li><strong>对于分布式计算，很容易在 CPU/GPU 上面进行训练。</strong></li>
  <li><strong>平台灵活性。</strong>你可以在任何地方运行你的模型，移动设备、服务器或 PC 。</li>
</ul>
<h2 id="一个典型的-TensorFlow-”流“"><a href="#一个典型的-TensorFlow-”流“" class="headerlink" title="一个典型的 TensorFlow ”流“"></a>一个典型的 TensorFlow ”流“</h2>
<p>每个库都有自己的”实现细节“，即一种遵循其编码范式的编写方式。例如，在实现 <code>scikit-learn</code> 时，你首先创建一个需要的算法对象，然后构建一个训练模型，进而对测试集进行预测，看起来就像下面这样：</p>
<figure class="highlight nix">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># 定义机器学习算法的 hyperparamters</span></div><div class="line"><span class="attr">clf</span> = svm.SVC(<span class="attr">gamma=0.001,</span> <span class="attr">C=100.)</span></div><div class="line"><span class="comment"># 训练</span></div><div class="line">clf.fit(X, y)</div><div class="line"><span class="comment"># 测试</span></div><div class="line">clf.predict(X_test)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>正如前面说过的，TensorFlow 遵循一种惰性的编程范式。在 TensorFlow 中运行一个程序的通常工作流如下：</p>
<ul>
  <li><strong>构建一个计算图</strong>，它可以是 TensorFlow 支持的任意一种数学操作。</li>
  <li><strong>初始化变量</strong>，编译之前定义的变量</li>
  <li><strong>创建会话</strong>，这是魔法开始的地方</li>
  <li><strong>在会话中运行图</strong>，编译后的图传到会话中，然后会话开始执行</li>
  <li><strong>关闭会话</strong></li>
</ul>
<p>TensorFlow 中使用的几个术语：</p>
<ul>
  <li>
    <figure class="highlight">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div></pre>
          </td>
          <td class="code">
            <pre><div class="line">占位符：一种将数据输入图表的方法</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <figure class="highlight avrasm">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="symbol">feed_dict:</span> 一个将数组传递给计算图的字典</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
</ul>
<p>让我们写一个小程序并添加两个数字！</p>
<figure class="highlight vim">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"># 导入 TensorFlow</div><div class="line">import tensorflow <span class="keyword">as</span> <span class="keyword">tf</span></div><div class="line"></div><div class="line"># 搭建计算图</div><div class="line"><span class="keyword">a</span> = <span class="keyword">tf</span>.placeholder(<span class="keyword">tf</span>.int16)</div><div class="line"><span class="keyword">b</span> = <span class="keyword">tf</span>.placeholder(<span class="keyword">tf</span>.int16)</div><div class="line"></div><div class="line">addition = <span class="keyword">tf</span>.<span class="built_in">add</span>(<span class="keyword">a</span>, <span class="keyword">b</span>)</div><div class="line"></div><div class="line"># 初始化变量</div><div class="line">init = <span class="keyword">tf</span>.initialize_all_variables()</div><div class="line"></div><div class="line"># 创建会话并运行图</div><div class="line">with <span class="keyword">tf</span>.Session() <span class="keyword">as</span> ses<span class="variable">s:</span></div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">print</span> <span class="string">"Addition: %i"</span> % sess.run(addition, feed_dict=&#123;<span class="variable">a:</span> <span class="number">2</span>, <span class="variable">b:</span> <span class="number">3</span>&#125;)</div><div class="line"></div><div class="line"># 关闭会话</div><div class="line">sess.<span class="keyword">close</span>()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="在-TensorFlow-中实现神经网络"><a href="#在-TensorFlow-中实现神经网络" class="headerlink" title="在 TensorFlow 中实现神经网络"></a>在 TensorFlow 中实现神经网络</h2>
<p><em>注意：我们可以使用不同的神经网络结构来解决问题，但为了简单起见，在这儿，我们致力于一个前馈多层感知机的深层实现。</em></p>
<p>让我们首先记住我们学到的关于神经网络的知识。</p>
<p>一个典型的神经网络实现如下：</p>
<ul>
  <li>定义需要编译的神经网络结构</li>
  <li>将数据传输到模型</li>
  <li>在后台，数据首先被分成批，以便进行摄取，首先对批数据进行预处理，扩充，然后送入神经网络进行训练</li>
  <li>神经网络模型进行增量训练</li>
  <li>在特定时间显示准确率</li>
  <li>训练过后，保存模型，以便日后再次使用</li>
  <li>用新数据测试模型并检查它是如何执行的</li>
</ul>
<p>在这儿，我们解决深度学习实践问题 - <a href="https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/" target="_blank" rel="external">识别数字</a>。让我们先看一下问题陈述。</p>
<p>这是一个图像识别问题，从一个给定的 <code>28x28</code> 的图像中识别数字。我们将所有图像的一个子集用于训练，剩余部分用于测试模型。首先，下载训练和测试文件。数据集包含一个所有图像的压缩文件，以及名字和训练/测试图像相对应的 <code>train.csv</code> 和 <code>test.csv</code> 文件。在数据集中没有提供任何额外的特征，只提供了 <code>.png</code> 格式的原始图像。</p>
<p>正如你所知道的，我们将使用 TensorFlow 来搭建一个神经网络模型。所以你首先需要在你的系统上安装 TensorFlow。请参考<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md" target="_blank" rel="external">官方安装指南</a>，根据你的系统进行安装。</p>
<p>我们将按照上面描述的步骤来搭建神经网络。首先，使用 Python 2.7 核来创建一个 Jupyter notebook，后续步骤如下：</p>
<ul>
  <li>首先导入所有需要的模块：</li>
</ul>
<figure class="highlight haskell">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta"># pylab inline</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="title">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="title">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>让我们设置一个种子值，从而我们能够控制模型的随机性</li>
</ul>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># To stop potential randomness</span></div><div class="line"><span class="attr">seed</span> = <span class="number">128</span></div><div class="line"><span class="attr">rng</span> = np.random.RandomState(seed)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>第一步是设置目录路径，以便安全保存！</li>
</ul>
<figure class="highlight lua">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">root_dir = <span class="built_in">os</span>.path.abspath(<span class="string">'../..'</span>)</div><div class="line">data_dir = <span class="built_in">os</span>.path.join(root_dir, <span class="string">'data'</span>)</div><div class="line">sub_dir = <span class="built_in">os</span>.path.join(root_dir, <span class="string">'sub'</span>)</div><div class="line"></div><div class="line"># check <span class="keyword">for</span> existence</div><div class="line"><span class="built_in">os</span>.path.exists(root_dir)</div><div class="line"><span class="built_in">os</span>.path.exists(data_dir)</div><div class="line"><span class="built_in">os</span>.path.exists(sub_dir)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，让我们读入数据集。数据集是 <code>.csv</code> 文件格式的，并且有一个伴有合适标签的名字。</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">train = pd.read_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'train.csv'</span>))</div><div class="line">test = pd.read_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Test.csv'</span>))</div><div class="line"></div><div class="line">sample_submission = pd.read_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Sample_Submission.csv'</span>))</div><div class="line"></div><div class="line">train.head()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<table>
  <thead>
    <tr>
      <th></th>
      <th>文件名</th>
      <th>标签</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.png</td>
      <td>4</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1.png</td>
      <td>9</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2.png</td>
      <td>1</td>
    </tr>
    <tr>
      <td>3</td>
      <td>3.png</td>
      <td>7</td>
    </tr>
    <tr>
      <td>4</td>
      <td>4.png</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
<ul>
  <li>让我们看一下我们的数据长什么样！读取图片并显示：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">img_name = rng.choice(train.filename)</div><div class="line">filepath = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'train'</span>, img_name)</div><div class="line"></div><div class="line"><span class="selector-tag">img</span> = imread(filepath, flatten=True)</div><div class="line"></div><div class="line">pylab.imshow(<span class="selector-tag">img</span>, cmap=<span class="string">'gray'</span>)</div><div class="line">pylab.axis(<span class="string">'off'</span>)</div><div class="line">pylab.show()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/3.png" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/3.png" alt="3"></a></p>
<p>上面的图片表示为 numpy 数组，就是下面这样：</p>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/one.png" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/one-1024x353.png" alt="one"></a></p>
<ul>
  <li>为了使数据操作更简单，我们把所有图像存为 numpy 数组：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">temp = []</div><div class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> train<span class="selector-class">.filename</span>:</div><div class="line">    image_path = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'train'</span>, img_name)</div><div class="line">    <span class="selector-tag">img</span> = imread(image_path, flatten=True)</div><div class="line">    <span class="selector-tag">img</span> = <span class="selector-tag">img</span>.astype(<span class="string">'float32'</span>)</div><div class="line">    temp.append(img)</div><div class="line">    </div><div class="line">train_x = np.stack(temp)</div><div class="line"></div><div class="line">temp = []</div><div class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> test<span class="selector-class">.filename</span>:</div><div class="line">    image_path = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'test'</span>, img_name)</div><div class="line">    <span class="selector-tag">img</span> = imread(image_path, flatten=True)</div><div class="line">    <span class="selector-tag">img</span> = <span class="selector-tag">img</span>.astype(<span class="string">'float32'</span>)</div><div class="line">    temp.append(img)</div><div class="line">    </div><div class="line">test_x = np.stack(temp)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>因为这是一个典型的机器学习问题，为了测试模型的正常功能，我们需要创建一个验证集。我们将数据按 <code>7:3</code> 分为训练集和验证集。</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">split_size = int(train_x<span class="selector-class">.shape</span>[<span class="number">0</span>]*<span class="number">0.7</span>)</div><div class="line"></div><div class="line">train_x, val_x = train_x[:split_size], train_x[split_size:]</div><div class="line">train_y, val_y = train<span class="selector-class">.label</span><span class="selector-class">.values</span>[:split_size], train<span class="selector-class">.label</span><span class="selector-class">.values</span>[split_size:]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，在程序中定义一些我们在后面将会用到的有用函数：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense_to_one_hot</span><span class="params">(labels_dense, num_classes=<span class="number">10</span>)</span>:</span></div><div class="line">    <span class="string">"""Convert class labels from scalars to one-hot vectors"""</span></div><div class="line">    num_labels = labels_dense.shape[<span class="number">0</span>]</div><div class="line">    index_offset = np.arange(num_labels) * num_classes</div><div class="line">    labels_one_hot = np.zeros((num_labels, num_classes))</div><div class="line">    labels_one_hot.flat[index_offset + labels_dense.ravel()] = <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> labels_one_hot</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">preproc</span><span class="params">(unclean_batch_x)</span>:</span></div><div class="line">    <span class="string">"""Convert values to range 0-1"""</span></div><div class="line">    temp_batch = unclean_batch_x / unclean_batch_x.max()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> temp_batch</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_creator</span><span class="params">(batch_size, dataset_length, dataset_name)</span>:</span></div><div class="line">    <span class="string">"""Create batch with random samples and return appropriate format"""</span></div><div class="line">    batch_mask = rng.choice(dataset_length, batch_size)</div><div class="line">    </div><div class="line">    batch_x = eval(dataset_name + <span class="string">'_x'</span>)[[batch_mask]].reshape(<span class="number">-1</span>, input_num_units)</div><div class="line">    batch_x = preproc(batch_x)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> dataset_name == <span class="string">'train'</span>:</div><div class="line">        batch_y = eval(dataset_name).ix[batch_mask, <span class="string">'label'</span>].values</div><div class="line">        batch_y = dense_to_one_hot(batch_y)</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> batch_x, batch_y</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，到了主要部分。让我们首先来定义神经网络的结构。我们定义一个三层神经网络：输入层、隐含层和输出层。输入层和输出层的神经元数目是固定的，因为输入就是一个 <code>28x28</code> 的图像，输出就是一个 <code>10x1</code> 的表示类别的向量。在隐含层中，我们设置 500 个神经元，这个数目可以根据你的需要来设置。同时，我们也需要对其余变量赋值。阅读<a href="https://www.analyticsvidhya.com/blog/2016/03/introduction-deep-learning-fundamentals-neural-networks/" target="_blank" rel="external">神经网络基础</a>这篇文章来深入了解它是如何工作的。</li>
</ul>
<figure class="highlight nix">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">### set all variables</span></div><div class="line"></div><div class="line"><span class="comment"># number of neurons in each layer</span></div><div class="line"><span class="attr">input_num_units</span> = <span class="number">28</span>*<span class="number">28</span></div><div class="line"><span class="attr">hidden_num_units</span> = <span class="number">500</span></div><div class="line"><span class="attr">output_num_units</span> = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment"># define placeholders</span></div><div class="line"><span class="attr">x</span> = tf.placeholder(tf.float32, [None, input_num_units])</div><div class="line"><span class="attr">y</span> = tf.placeholder(tf.float32, [None, output_num_units])</div><div class="line"></div><div class="line"><span class="comment"># set remaining variables</span></div><div class="line"><span class="attr">epochs</span> = <span class="number">5</span></div><div class="line"><span class="attr">batch_size</span> = <span class="number">128</span></div><div class="line"><span class="attr">learning_rate</span> = <span class="number">0.01</span></div><div class="line"></div><div class="line"><span class="comment">### define weights and biases of the neural network (refer this article if you don't understand the terminologies)</span></div><div class="line"></div><div class="line"><span class="attr">weights</span> = &#123;</div><div class="line">    'hidden': tf.Variable(tf.random_normal([input_num_units, hidden_num_units], <span class="attr">seed=seed)),</span></div><div class="line">    'output': tf.Variable(tf.random_normal([hidden_num_units, output_num_units], <span class="attr">seed=seed))</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attr">biases</span> = &#123;</div><div class="line">    'hidden': tf.Variable(tf.random_normal([hidden_num_units], <span class="attr">seed=seed)),</span></div><div class="line">    'output': tf.Variable(tf.random_normal([output_num_units], <span class="attr">seed=seed))</span></div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，开始创建神经网络计算图：</li>
</ul>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="attr">hidden_layer</span> = tf.add(tf.matmul(x, weights[<span class="string">'hidden'</span>]), biases[<span class="string">'hidden'</span>])</div><div class="line"><span class="attr">hidden_layer</span> = tf.nn.relu(hidden_layer)</div><div class="line"></div><div class="line"><span class="attr">output_layer</span> = tf.matmul(hidden_layer, weights[<span class="string">'output'</span>]) + biases[<span class="string">'output'</span>]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>我们也需要定义神经网络的损失（cost）：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">cost =　tf.reduce_mean(tf<span class="selector-class">.nn</span><span class="selector-class">.softmax_cross_entropy_with_logits</span>(output_layer, y))</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>设置优化算法，比如后向传播算法（BP 算法）。在这儿，我们使用 <a href="https://arxiv.org/abs/1412.6980" target="_blank" rel="external">Adam</a>，这是一个高效的梯度下降算法的变种。在 TensorFlow 中还有许多可用的优化算法（参考<a href="https://www.tensorflow.org/versions/r0.11/api_docs/python/train.html#optimizers" target="_blank" rel="external">这儿</a>）</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">optimizer = tf<span class="selector-class">.train</span><span class="selector-class">.AdamOptimizer</span>(learning_rate=learning_rate).minimize(cost)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>定义好神经网络结构之后，初始化所有变量：</li>
</ul>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="attr">init</span> = tf.initialize_all_variables()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，创建一个会话，在会话中运行我们的神经网络。同时，使用我们已经创建好的验证集来验证我们的模型：</li>
</ul>
<figure class="highlight vim">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">with <span class="keyword">tf</span>.Session() <span class="keyword">as</span> ses<span class="variable">s:</span></div><div class="line">    # create initialized variables</div><div class="line">    sess.run(init)</div><div class="line">    </div><div class="line">    ### <span class="keyword">for</span> each epoch, <span class="keyword">do</span>:</div><div class="line">    ###   <span class="keyword">for</span> each batch, <span class="keyword">do</span>:</div><div class="line">    ###     create <span class="keyword">pre</span>-processed batch</div><div class="line">    ###     run optimizer by feeding batch</div><div class="line">    ###     <span class="keyword">find</span> cost <span class="built_in">and</span> reiterate <span class="keyword">to</span> minimize</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> epoch in <span class="built_in">range</span>(epochs):</div><div class="line">        avg_cost = <span class="number">0</span></div><div class="line">        total_batch = <span class="keyword">int</span>(train.shape[<span class="number">0</span>]/batch_size)</div><div class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(total_batch):</div><div class="line">            batch_x, batch_y = batch_creator(batch_size, train_x.shape[<span class="number">0</span>], <span class="string">'train'</span>)</div><div class="line">            _, <span class="keyword">c</span> = sess.run([optimizer, cost], feed_dict = &#123;<span class="keyword">x</span>: batch_x, <span class="keyword">y</span>: batch_y&#125;)</div><div class="line">            </div><div class="line">            avg_cost += <span class="keyword">c</span> / total_batch</div><div class="line">            </div><div class="line">        <span class="keyword">print</span> <span class="string">"Epoch:"</span>, (epoch+<span class="number">1</span>), <span class="string">"cost ="</span>, <span class="string">"&#123;:.5f&#125;"</span>.format(avg_cost)</div><div class="line">    </div><div class="line">    <span class="keyword">print</span> <span class="string">"\nTraining complete!"</span></div><div class="line">    </div><div class="line">    </div><div class="line">    # <span class="keyword">find</span> predictions <span class="keyword">on</span> val <span class="keyword">set</span></div><div class="line">    pred_temp = <span class="keyword">tf</span>.equal(<span class="keyword">tf</span>.argmax(output_layer, <span class="number">1</span>), <span class="keyword">tf</span>.argmax(<span class="keyword">y</span>, <span class="number">1</span>))</div><div class="line">    accuracy = <span class="keyword">tf</span>.reduce_mean(<span class="keyword">tf</span>.cast(pred_temp, <span class="string">"float"</span>))</div><div class="line">    <span class="keyword">print</span> <span class="string">"Validation Accuracy:"</span>, accuracy.<span class="built_in">eval</span>(&#123;<span class="keyword">x</span>: val_x.reshape(-<span class="number">1</span>, input_num_units), <span class="keyword">y</span>: dense_to_one_hot(val_y)&#125;)</div><div class="line">    </div><div class="line">    predict = <span class="keyword">tf</span>.argmax(output_layer, <span class="number">1</span>)</div><div class="line">    pred = predict.<span class="built_in">eval</span>(&#123;<span class="keyword">x</span>: test_x.reshape(-<span class="number">1</span>, input_num_units)&#125;)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>上面代码的输出如下：</p>
<figure class="highlight http">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="attribute">Epoch</span>: 1 cost = 8.93566</div><div class="line"><span class="attribute">Epoch</span>: 2 cost = 1.82103</div><div class="line"><span class="attribute">Epoch</span>: 3 cost = 0.98648</div><div class="line"><span class="attribute">Epoch</span>: 4 cost = 0.57141</div><div class="line"><span class="attribute">Epoch</span>: 5 cost = 0.44550</div><div class="line"></div><div class="line"><span class="css"><span class="selector-tag">Training</span> <span class="selector-tag">complete</span>!</span></div><div class="line"><span class="selector-tag">Validation</span> <span class="selector-tag">Accuracy</span>: 0<span class="selector-class">.952823</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>为了使用我们的眼睛来测试模型，让我们来看一些它的预测结果：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">img_name = rng.choice(test.filename)</div><div class="line">filepath = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'test'</span>, img_name)</div><div class="line"></div><div class="line"><span class="selector-tag">img</span> = imread(filepath, flatten=True)</div><div class="line"></div><div class="line">test_index = int(img_name.split(<span class="string">'.'</span>)[<span class="number">0</span>]) - <span class="number">49000</span></div><div class="line"></div><div class="line">print <span class="string">"Prediction is: "</span>, pred[test_index]</div><div class="line"></div><div class="line">pylab.imshow(<span class="selector-tag">img</span>, cmap=<span class="string">'gray'</span>)</div><div class="line">pylab.axis(<span class="string">'off'</span>)</div><div class="line">pylab.show()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>Prediction is: 8</p>
<p><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/8.png" alt=""></p>
<ul>
  <li>我们看到模型的性能非常好。现在我们来创建一个子会话：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sample_submission<span class="selector-class">.filename</span> = test<span class="selector-class">.filename</span></div><div class="line"></div><div class="line"> sample_submission<span class="selector-class">.label</span> = pred</div><div class="line"></div><div class="line">sample_submission.to_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(sub_dir, <span class="string">'sub01.csv'</span>), index=False)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>到现在，我们就把已经训练好的神经网络保存下来了。</p>
<h2 id="TensorFlow-的局限性"><a href="#TensorFlow-的局限性" class="headerlink" title="TensorFlow 的局限性"></a>TensorFlow 的局限性</h2>
<ul>
  <li>尽管 TensorFlow 很强大，但它依旧是一个低级库，打个比方，你可以把它看出一个机器级语言。但是大多数情况下，你需要模块化和高层次的接口，比如 keras 这样的库便能够提供。</li>
  <li>TensorFlow 目前仍然在开发中，因此未来还会有很多令人激动的东西到来。</li>
  <li>TensorFlow 依赖于你的硬件配置，硬件配置越高越好。</li>
  <li>对于许多语言，TensorFlow 还没有 API.</li>
  <li>TensorFlow 中还有许多东西需要实现，比如 OpenCL 的支持。</li>
</ul>
<p>上面提到的内容大多数是站在 TensorFlow 开发者的角度的。他们已经制定了一个路线图来说明将来这个库应该如何发展。</p>
<h2 id="TensorFlow-vs-其他库"><a href="#TensorFlow-vs-其他库" class="headerlink" title="TensorFlow vs. 其他库"></a>TensorFlow vs. 其他库</h2>
<p>TensorFlow 是以和 Theano 和 Torch 相似的原则构建的，都是使用数学计算图。但是由于具有分布式计算的支持，TensorFlow 对于解决复杂的问题表现得更好。同时，由于已经支持 TensorFlow 模型的部署（即开源免费），这使得在工业上使用更加容易，对 Deeplearning4j、H2O 和 Turi 这些商业库造成了竞争威胁。TensorFlow 有 Python、C++ 和 Matlab 的 API，接下来可能将要有对其他语言的支持，比如 Ruby 和 R。所以，TensorFlow
  正在试图成为具有普遍语言的机器学习库。</p>
<h2 id="接下来往哪走"><a href="#接下来往哪走" class="headerlink" title="接下来往哪走"></a>接下来往哪走</h2>
<p>你已经看到了如何使用 TensorFlow 来建立一个简单的神经网路。这个代码对于来理解如何开始实现 TensorFlow 是有意义的，所以不要小瞧它。但是请记住现实生活需要解决的问题将会更加复杂，你需要稍微修改一下代码。</p>
<p>上面的许多函数能够被抽象出来，以提供无缝的端到端工作流。如果你使用过 scikit-learn，那么你可能知道一个高级库是如何抽象出底层实现，然后给终端用户提供一个更加简单的接口的。虽然 TensorFlow 已经抽象出了大多数的实现，但高级库正在出现，比如 TF-slim 和 TFlearn 。</p>
<h2 id="有用的资源"><a href="#有用的资源" class="headerlink" title="有用的资源"></a>有用的资源</h2>
<ul>
  <li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">TensorFlow 官方仓库</a></li>
  <li>Rajat Monga (TensorFlow 技术引导) <a href="https://youtu.be/wmw8Bbb_eIE" target="_blank" rel="external">“TensorFlow for everyone”</a> 视频</li>
  <li>一个专用资源列表](<a href="https://github.com/jtoy/awesome-tensorflow/#github-projects" target="_blank" rel="external">https://github.com/jtoy/awesome-tensorflow/#github-projects</a>)</li>
</ul>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2>
<p>我希望你觉得这篇文章很有帮助，现在，是时候来进行更多的练习和阅读了。Good luck！如果你使用一个不同的方法/包/库来实现神经网络，那么我很愿意在评论中跟你互动。如果你有什么建议，也请在评论中告知。为了让自己对神经网络的使用更加熟练，请不要忘记尝试解决我们的深度学习练习问题 - <a href="https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/" target="_blank" rel="external">数字识别</a>。</p>
<p>你可以测试你的技能和知识。查看 <a href="http://datahack.analyticsvidhya.com/contest/all" target="_blank" rel="external">Live Competitions</a>，来和世界上最优秀的数据科学家进行比赛。</p>
<blockquote>
  <p>原文链接：<a href="https://www.analyticsvidhya.com/blog/2016/10/an-introduction-to-implementing-neural-networks-using-tensorflow/" target="_blank" rel="external">https://www.analyticsvidhya.com/blog/2016/10/an-introduction-to-implementing-neural-networks-using-tensorflow/</a></p>
  <p>翻译：<a href="https://fenglv.ac.cn" target="_blank" rel="external">Flynn</a></p>
</blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;
&lt;p&gt;如果你一直关注数据科学/机器学习，那么你肯定知道目前深度学习和神经网络非常流行。许多组织/公司都想要雇佣精通深度学习技能的人。从商业竞争到开源项目和支付高额薪水，人们在尝试一切可能的方法来挖掘这一有限的人才。自我驱动的工程师正被汽车工业中的利器所追逐，因为汽车工业正处于近几十年来最大的破坏边缘！&lt;/p&gt;
    
    </summary>
    
      <category term="Machine-Learning" scheme="http://ucasfl.me/categories/Machine-Learning/"/>
    
    
      <category term="Tensorflow translation" scheme="http://ucasfl.me/tags/Tensorflow-translation/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 中如何通过命令行开启或禁用触摸板</title>
    <link href="http://ucasfl.me/2017/11/02/How-to-enable-or-disable-touchpad-in-Linux-with-command-line/"/>
    <id>http://ucasfl.me/2017/11/02/How-to-enable-or-disable-touchpad-in-Linux-with-command-line/</id>
    <published>2017-11-02T15:45:10.000Z</published>
    <updated>2018-03-23T03:35:48.264Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在 Linux 中如何使用命令行命令来打开和关闭触摸板。</p>
<a id="more"></a>
<h3 id="xinput"><a href="#xinput" class="headerlink" title="xinput"></a>xinput</h3>
<p>首先，需要了解一个工具：<code>xinput</code></p>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">xinput is <span class="selector-tag">a</span> utility to list available <span class="selector-tag">input</span> devices, query information</div><div class="line">about <span class="selector-tag">a</span> device and change <span class="selector-tag">input</span> device settings.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>上面是 <code>man</code> 手册对它的描述。</p>
<p>要通过触摸板开启或关闭触摸板，首先要要获取触摸板的设备 ID 和属性。</p>
<p>我们可以可以先通过 <code>xinput --list</code> 命令查看有哪些输入设备。下面的结果是在我的笔记本上的输出：</p>
<figure class="highlight crmsh">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">⎡ Virtual core pointer                          <span class="attr">id=</span><span class="number">2</span>    [<span class="keyword">master</span> <span class="title">pointer</span>  (<span class="number">3</span>)]</div><div class="line">⎜   ↳ Virtual core XTEST pointer                <span class="attr">id=</span><span class="number">4</span>    [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎜   ↳ PixArt USB Optical Mouse                  <span class="attr">id=</span><span class="number">10</span>   [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎜   ↳ DELL0767:<span class="number">00</span> <span class="number">06</span>CB:<span class="number">7</span>E92 Touchpad            <span class="attr">id=</span><span class="number">12</span>   [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎜   ↳ SynPS/<span class="number">2</span> Synaptics TouchPad                <span class="attr">id=</span><span class="number">14</span>   [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎣ Virtual core keyboard                         <span class="attr">id=</span><span class="number">3</span>    [<span class="keyword">master</span> <span class="title">keyboard</span> (<span class="number">2</span>)]</div><div class="line">    ↳ Virtual core XTEST keyboard               <span class="attr">id=</span><span class="number">5</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Power Button                              <span class="attr">id=</span><span class="number">6</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Video Bus                                 <span class="attr">id=</span><span class="number">7</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Power Button                              <span class="attr">id=</span><span class="number">8</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Sleep Button                              <span class="attr">id=</span><span class="number">9</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Integrated Webcam                         <span class="attr">id=</span><span class="number">11</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ AT Translated Set <span class="number">2</span> keyboard              <span class="attr">id=</span><span class="number">13</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Dell WMI hotkeys                          <span class="attr">id=</span><span class="number">15</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ DELL Wireless hotkeys                     <span class="attr">id=</span><span class="number">16</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>可以看到，第 4 行输出即为触摸板，后面的 <code>id</code> 即为设备号。</p>
<p>下面，查看触摸板的属性：</p>
<figure class="highlight ada">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">xinput <span class="comment">--list-props 12 </span></div><div class="line">＃或</div><div class="line">xinput <span class="comment">--list-props ‘DELL0767:00 06CB:7E92 Touchpad’</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>即使用设备 <code>id</code> 或设备名作为后面的参数均可以。</p>
<p>下面是在我的笔记本上的输出：</p>
<figure class="highlight aspectj">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Device <span class="string">'DELL0767:00 06CB:7E92 Touchpad'</span>:</div><div class="line">	Device Enabled (140):	0</div><div class="line">	Coordinate Transformation Matrix (142):	1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000</div><div class="line">	Device Accel Profile (263):	1</div><div class="line">	Device Accel Constant Deceleration (264):	2.500000</div><div class="line">	Device Accel Adaptive Deceleration (265):	1.000000</div><div class="line">	Device Accel Velocity Scaling (266):	12.500000</div><div class="line">	Synaptics Edges (288):	49, 1180, 50, 879</div><div class="line">	Synaptics Finger (289):	25, 30, 0</div><div class="line">	Synaptics Tap Time (290):	180</div><div class="line">	Synaptics Tap Move (291):	67</div><div class="line">	Synaptics Tap Durations (292):	180, 180, 100</div><div class="line">	Synaptics ClickPad (293):	1</div><div class="line">	Synaptics Middle Button Timeout (294):	0</div><div class="line">	Synaptics Two-Finger Pressure (295):	282</div><div class="line">	Synaptics Two-Finger Width (296):	7</div><div class="line">	Synaptics Scrolling Distance (297):	30, 30</div><div class="line">	Synaptics Edge Scrolling (298):	0, 0, 0</div><div class="line">	Synaptics Two-Finger Scrolling (299):	1, 1</div><div class="line">	Synaptics Move Speed (300):	1.000000, 1.750000, 0.129870, 0.000000</div><div class="line">	Synaptics Off (301):	0</div><div class="line">	Synaptics Locked Drags (302):	0</div><div class="line">	Synaptics Locked Drags Timeout (303):	5000</div><div class="line">	Synaptics Tap Action (304):	2, 3, 0, 0, 1, 3, 2</div><div class="line">	Synaptics Click Action (305):	1, 3, 0</div><div class="line">	Synaptics Circular Scrolling (306):	0</div><div class="line">	Synaptics Circular Scrolling Distance (307):	0.100000</div><div class="line">	Synaptics Circular Scrolling Trigger (308):	0</div><div class="line">	Synaptics Circular Pad (309):	0</div><div class="line">	Synaptics Palm Detection (310):	0</div><div class="line">	Synaptics Palm Dimensions (311):	10, 200</div><div class="line">	Synaptics Coasting Speed (312):	20.000000, 50.000000</div><div class="line">	Synaptics Pressure Motion (313):	30, 160</div><div class="line">	Synaptics Pressure Motion Factor (314):	1.000000, 1.000000</div><div class="line">	Synaptics Resolution Detect (315):	1</div><div class="line">	Synaptics Grab Event Device (316):	0</div><div class="line">	Synaptics Gestures (317):	1</div><div class="line">	Synaptics Capabilities (318):	1, 0, 0, 1, 1, 0, 0</div><div class="line">	Synaptics Pad Resolution (319):	12, 12</div><div class="line">	Synaptics Area (320):	0, 0, 0, 0</div><div class="line">	Synaptics Soft Button Areas (321):	614, 0, 761, 0, 0, 0, 0, 0</div><div class="line">	Synaptics Noise Cancellation (322):	7, 7</div><div class="line">	Device Product ID (258):	1739, 32402</div><div class="line">	Device Node (259):	<span class="string">"/dev/input/event15"</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>可以看到，第一个属性即为触摸板状态：1 表示开启，0 表示关闭，属性编号为 140。</p>
<p>之后，我们可以使用下面的命令来开启或关闭触摸板：</p>
<figure class="highlight dsconfig">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># 开启触摸板</span></div><div class="line"><span class="string">xinput </span><span class="built_in">set-prop</span> <span class="string">12 </span><span class="string">140 </span>1</div><div class="line"><span class="comment"># 关闭触摸板</span></div><div class="line"><span class="string">xinput </span><span class="built_in">set-prop</span> <span class="string">12 </span><span class="string">140 </span>0</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>其中，设备 ID 和属性编号也可替换为名字。</p>
<p>但是，每次都使用这个命令会比较麻烦，因此，可以通过一个简单的脚本来实现：</p>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"on"</span> ]; <span class="keyword">then</span></div><div class="line">	xinput <span class="built_in">set</span>-prop 12 140 1;</div><div class="line">	<span class="built_in">echo</span> <span class="string">"Touchpad successfully enabled!"</span>;</div><div class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"off"</span> ]; <span class="keyword">then</span></div><div class="line">	xinput <span class="built_in">set</span>-prop 12 140 0;</div><div class="line">	<span class="built_in">echo</span> <span class="string">"Touchpad successfully disabled!"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Please use the program with one of the following arguments:"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"   (1) on  : enable the touchpad!"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"   (2) off : disable the touchpad!"</span></div><div class="line"><span class="keyword">fi</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>将该脚本命名为 <code>touchpad</code> ，然后放到 <code>/home/user/bin</code> 目录下。然后，开启或关闭触摸板就很方便了：</p>
<figure class="highlight nginx">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># 开启触摸板</span></div><div class="line"><span class="attribute">touchpad</span> <span class="literal">on</span></div><div class="line"><span class="comment"># 关闭触摸板</span></div><div class="line">touchpad <span class="literal">off</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>注意，脚本中的设备 ID 和属性编号应和你的笔记本一致，<code>user</code> 为你的用户名。</p>
<h3 id="gsettings"><a href="#gsettings" class="headerlink" title="gsettings"></a>gsettings</h3>
<p>另外，如果上面的命令不起用了，那么可以试试(Gnome)：</p>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">开启触摸板:</div><div class="line">sudo gsettings set org<span class="selector-class">.gnome</span><span class="selector-class">.desktop</span><span class="selector-class">.peripherals</span><span class="selector-class">.touchpad</span> send-events true</div><div class="line">输入时禁用：</div><div class="line">sudo gsettings set org<span class="selector-class">.gnome</span><span class="selector-class">.desktop</span><span class="selector-class">.peripherals</span><span class="selector-class">.touchpad</span> disable-while-typing true</div><div class="line">双指滚动</div><div class="line">sudo gsettings set org<span class="selector-class">.gnome</span><span class="selector-class">.desktop</span><span class="selector-class">.peripherals</span><span class="selector-class">.touchpad</span> disable-while-typing true</div><div class="line">tap to click:</div><div class="line">sudo gsettings set org<span class="selector-class">.gnome</span><span class="selector-class">.desktop</span><span class="selector-class">.peripherals</span><span class="selector-class">.touchpad</span> tap-to-click true</div></pre>
      </td>
    </tr>
  </table>
</figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍如何在 Linux 中如何使用命令行命令来打开和关闭触摸板。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux touchpad" scheme="http://ucasfl.me/tags/Linux-touchpad/"/>
    
  </entry>
  
  <entry>
    <title>记一下那些年使用 Linux 踩过的坑</title>
    <link href="http://ucasfl.me/2017/10/30/What-the-fuck-problem-with-Linux/"/>
    <id>http://ucasfl.me/2017/10/30/What-the-fuck-problem-with-Linux/</id>
    <published>2017-10-30T11:54:31.000Z</published>
    <updated>2018-03-11T04:10:10.966Z</updated>
    
    <content type="html"><![CDATA[<p>笔记本上装了双系统：Windows 10 + Ubuntu，刚装好 Ubuntu 不久就重新从 Windows 下分了一个盘挂载到 Ubuntu 下。如今，由于基本不再使用 Windows 系统，准确的说就只在虚拟机上使用一下 QQ、微信。于是，我又从 Windows 下分出一个盘，准备挂载到 Ubuntu 下。然而，却突然启动不进去了，直接进入了 <code>emergency mode</code>，尝试重新启动到默认模式，然后出现下面的错误信息：</p>
<a id="more"></a>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">[   84.260812] EXT4-fs (sda7): VFS: can&apos;t find ext4 filesystem.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>错误信息很直接，说<code>sda7</code>不是<code>ext4</code>文件系统格式。</p>
<p>然后查看分区：<code>fdisk -l</code>，输出如下：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Disk /dev/sda: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors</div><div class="line">Units: sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</div><div class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</div><div class="line">Disklabel type: gpt</div><div class="line">Disk identifier: A3FE2E3C-3EBC-401D-8BB3-987D9B33F0EC</div><div class="line"></div><div class="line">Device          Start        End   Sectors   Size Type</div><div class="line">/dev/sda1        2048    1026047   1024000   500M EFI System</div><div class="line">/dev/sda2     1026048    1288191    262144   128M Microsoft reserved</div><div class="line">/dev/sda3     1288192  284209819 282921628 134.9G Microsoft basic data</div><div class="line">/dev/sda4   284211200  508033023 223821824 106.7G Microsoft basic data</div><div class="line">/dev/sda5   508035072  949225471 441190400 210.4G Linux filesystem</div><div class="line">/dev/sda6   949225472  965793791  16568320   7.9G Linux swap</div><div class="line">/dev/sda7   965793792 1298845695 333051904 158.8G Microsoft basic data</div><div class="line">/dev/sda8  1298845696 1718274047 419428352   200G Linux filesystem</div><div class="line">/dev/sda9  1718276096 1927991295 209715200   100G Microsoft basic datamount -o remount,rw /</div><div class="line">mount --all</div><div class="line">chown root:root /usr/bin/sudo</div><div class="line">chmod 4755 /usr/bin/sudo</div><div class="line">/dev/sda10 1927993344 1928998911   1005568   491M Windows recovery environment</div><div class="line">/dev/sda11 1928998912 1951117311  22118400  10.6G Windows recovery environment</div><div class="line">/dev/sda12 1951119360 1953523711   2404352   1.2G Windows recovery environment</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>What ? <code>/dev/sd7</code> 是 Windows 系统的 C 盘，怎么它会在启动的时候挂载呢，而且还是以 <code>ext4</code> 的文件系统格式挂载。想了半天，没发现问题。还好，机智的我赶紧看了一下 <code>/etc/fstab</code> 文件内容：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"># /etc/fstab: static file system information.</div><div class="line">#</div><div class="line"># Use &apos;blkid&apos; to print the universally unique identifier for a</div><div class="line"># device; this may be used with UUID= as a more robust way to name devices</div><div class="line"># that works even if disks are added and removed. See fstab(5).</div><div class="line">#</div><div class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</div><div class="line"># / was on /dev/sda9 during installation</div><div class="line">UUID=e3a38d48-680a-49e5-a98f-ae8bb6a37293 /               ext4    errors=remount-ro 0       1</div><div class="line"># /boot/efi was on /dev/sda1 during installation</div><div class="line">UUID=FE51-6D32  /boot/efi       vfat    umask=0077      0       1</div><div class="line"># swap was on /dev/sda10 during installation</div><div class="line">UUID=c6a51fbb-d72a-4d93-9305-b75aaf6ab1fa none            swap    sw              0       0</div><div class="line">dev/sda7 home/fenglv/FILE ext4 defaults 0 1</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>？？？原来之前挂载到 Ubuntu 上的盘设备名就是 <code>/dev/sda7</code> ，添加一个新的分区后设备名变为了 <code>/dev/sda8</code>，现在的 <code>/dev/sda7</code> 对应的就是 Windows 系统的 C 盘。而我没有修改 <code>/etc/fstab</code> ，所以才导致 Linux 系统启动的时候无法将该设备挂载上。</p>
<p>修改之后终于正常启动了。</p>
<p>然而事情并没有结束。之后，<code>sudo</code> 不能使用了，错误信息如下：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sudo: error in /etc/sudo.conf, line 0 while loading plugin `sudoers_policy&apos;</div><div class="line">sudo: /usr/lib/sudo/sudoers.so must be only be writable by owner</div><div class="line">sudo: fatal error, unable to load plugins</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>好吧，直接上网查。最后在 <a href="https://askubuntu.com/questions/637432/sudo-comes-up-with-an-error-cannot-run-anything-as-root" target="_blank" rel="external">askubunntu</a> 上找到了解决办法：启动到 <code>recovery mode</code> ，然后执行下面的命令：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">mount -o remount,rw /</div><div class="line">chmod 644 /usr/lib/sudo/sudoers.so</div><div class="line">chown -R root /usr/lib/sudo</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>至此，全部问题解决。</p>
<p>问题并没有真的结束（文章更新），之后，virtualbox 不能启动了：</p>
<figure class="highlight vim">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">VBoxHeadles<span class="variable">s:</span> Effective UID <span class="keyword">is</span> not root (euid=<span class="number">1000</span> egid=<span class="number">1000</span> uid=<span class="number">1000</span> gid=<span class="number">1000</span>)</div><div class="line">VBoxHeadles<span class="variable">s:</span> Tip! It may <span class="keyword">help</span> <span class="keyword">to</span> reinstall VirtualBox.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>正确的做法就是按照它的提示把 virtualbox 卸了重新安装。然而，我却去修改<code>/usr/bin</code>的所有者：<code>chown -R root /usr/bin</code> 。这样以后，不但 <code>virtual box</code> 无法启动，<code>sudo</code> 又不能用了，这次的错误信息如下：</p>
<figure class="highlight armasm">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="symbol">sudo</span>: /usr/<span class="keyword">bin/sudo </span>must <span class="keyword">be </span>owned <span class="keyword">by </span>uid <span class="number">0</span> <span class="keyword">and </span>have the setuid <span class="keyword">bit </span>set</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>最后找到解决办法：再次进入 <code>recovery mode</code>，执行下面命令：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">mount -o remount,rw /</div><div class="line">mount --all</div><div class="line">chown root:root /usr/bin/sudo</div><div class="line">chmod 4755 /usr/bin/sudo</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>问题解决。</p>
<p>Linux 的权限问题真让人头疼。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记本上装了双系统：Windows 10 + Ubuntu，刚装好 Ubuntu 不久就重新从 Windows 下分了一个盘挂载到 Ubuntu 下。如今，由于基本不再使用 Windows 系统，准确的说就只在虚拟机上使用一下 QQ、微信。于是，我又从 Windows 下分出一个盘，准备挂载到 Ubuntu 下。然而，却突然启动不进去了，直接进入了 &lt;code&gt;emergency mode&lt;/code&gt;，尝试重新启动到默认模式，然后出现下面的错误信息：&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
</feed>
