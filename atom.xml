<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>春暖花开</title>
  <subtitle>love, life, thinking, coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ucasfl.me/"/>
  <updated>2018-03-08T15:50:08.744Z</updated>
  <id>http://ucasfl.me/</id>
  
  <author>
    <name>Flynn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如果在 Linux 命令行中更改屏幕亮度</title>
    <link href="http://ucasfl.me/2018/03/08/How-to-Change-Brightness-in-Linux-Command-Line/"/>
    <id>http://ucasfl.me/2018/03/08/How-to-Change-Brightness-in-Linux-Command-Line/</id>
    <published>2018-03-08T15:28:59.000Z</published>
    <updated>2018-03-08T15:50:08.744Z</updated>
    
    <content type="html"><![CDATA[<p>寒假的时候，笔记本又坏了，这次比前面两次还要更严重，直接开不了机。于是好了，一个寒假在家什么也没干。到学校的第一天就把电脑送去维修，今天才拿回来。好吧，这已经是第三次维修了。取电脑的时候，我问维修的工程师，这次是哪儿坏了。他回答，主板坏了。我说，主板不是刚刚才换了没多久的吗……他说，又坏了。我竟无言以对。</p>
<p>电脑确实修好了。不过拿回来以后，发现屏幕怎么这么暗，然后我通过桌面设置调节，竟然无法调节，即使调到最大也没变化。我心里一凉，是不是硬件上哪儿又坏了。我切回 Windows 系统，惊喜的发现，亮度是可以调节的，那就好办了，既然是软件的问题，咱就可以自己解决。桌面无法调节，那就直接在命令行手动设置亮度值。</p>
<a id="more"></a>
<p>首先，查看屏幕亮度的最大值：</p>
<figure class="highlight ruby">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">fenglv@segmentfault<span class="symbol">:~</span>$ cat /sys/<span class="class"><span class="keyword">class</span>/<span class="title">backlight</span>/<span class="title">intel_backlight</span>/<span class="title">max_brightness</span> </span></div><div class="line"><span class="number">7500</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>输出结果表明，亮度最大值为 7500 ，因此，可以在 0 ~ 7500 之间。</p>
<p>然后，再查看一下当前的亮度值：</p>
<figure class="highlight ruby">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">fenglv@segmentfault<span class="symbol">:~</span>$ cat /sys/<span class="class"><span class="keyword">class</span>/<span class="title">backlight</span>/<span class="title">intel_backlight</span>/<span class="title">brightness</span> </span></div><div class="line"><span class="number">957</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>当前亮度为 957，这 TM 屏幕能不暗吗？</p>
<p>如果要更改屏幕亮度，那么只需手动更改 <code>/sys/class/backlight/intel_backlight/brightness</code> 文件内容即可。至此，你就应该知道怎么办了。</p>
<h3 id="设置启动时的默认亮度"><a href="#设置启动时的默认亮度" class="headerlink" title="设置启动时的默认亮度"></a>设置启动时的默认亮度</h3>
<p>如果要设置电脑启动时候的默认亮度，那么，只需要在文件 <code>/etc/rc.local</code> <code>exit 0</code> 前面加上如下一行内容：<br>
  <figure class="highlight gradle">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">echo <span class="number">5500</span> &gt; <span class="regexp">/sys/</span><span class="keyword">class</span><span class="regexp">/backlight/i</span>ntel_backlight<span class="regexp">/brightness</span></div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>如上，我把启动时候的亮度值设置为 5500。</p>
<h3 id="自定义亮度"><a href="#自定义亮度" class="headerlink" title="自定义亮度"></a>自定义亮度</h3>
<p>另外，为了每次方便的设置亮度，我写了一个小脚本，并命名为 <code>chbgn</code> ，然后增加执行权限，并放在 <code>$HOME/bin</code> 目录下，这样，每次要设置亮度的时候就可以很方便的进行交互式设置了，体验不比图形界面差。脚本内容如下：<br>
  <figure class="highlight bash">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre>
        </td>
        <td class="code">
          <pre><div class="line"><span class="meta">#!/usr/bin/env bash</span></div><div class="line"><span class="comment"># 一个用于调节屏幕亮度的脚本</span></div><div class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$USER</span>"</span> != <span class="string">"root"</span> ]]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"The program must be executed under the root user."</span>;</div><div class="line">	<span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span>  -n <span class="string">"Please input the brightness value(0 ~ 7500): "</span>;</div><div class="line"><span class="built_in">read</span> int;</div><div class="line"></div><div class="line">value=`expr <span class="variable">$int</span> + 0`;</div><div class="line">expr <span class="variable">$value</span> &amp;&gt;/dev/null;</div><div class="line"><span class="keyword">if</span> [ $? <span class="_">-ne</span> 0 ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Input must be an integer. Change brightness failed!!!"</span></div><div class="line">	<span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$value</span> -ge 0 ] &amp;&amp; [ <span class="variable">$value</span> -le 7500 ]; <span class="keyword">then</span></div><div class="line">	<span class="built_in">echo</span> <span class="variable">$value</span> &gt; /sys/class/backlight/intel_backlight/brightness</div><div class="line">	<span class="built_in">echo</span> <span class="string">"The brightness of the Computer has successfully changed ^_^"</span></div><div class="line">	<span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Input must be an integer betwwen 0 and 7500. Change brightness failed!!!"</span>;</div><div class="line"><span class="built_in">exit</span> 0;</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寒假的时候，笔记本又坏了，这次比前面两次还要更严重，直接开不了机。于是好了，一个寒假在家什么也没干。到学校的第一天就把电脑送去维修，今天才拿回来。好吧，这已经是第三次维修了。取电脑的时候，我问维修的工程师，这次是哪儿坏了。他回答，主板坏了。我说，主板不是刚刚才换了没多久的吗……他说，又坏了。我竟无言以对。&lt;/p&gt;
&lt;p&gt;电脑确实修好了。不过拿回来以后，发现屏幕怎么这么暗，然后我通过桌面设置调节，竟然无法调节，即使调到最大也没变化。我心里一凉，是不是硬件上哪儿又坏了。我切回 Windows 系统，惊喜的发现，亮度是可以调节的，那就好办了，既然是软件的问题，咱就可以自己解决。桌面无法调节，那就直接在命令行手动设置亮度值。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Command Linux" scheme="http://ucasfl.me/tags/Command-Linux/"/>
    
  </entry>
  
  <entry>
    <title>再见, 2017</title>
    <link href="http://ucasfl.me/2017/12/31/the-end-of-2017/"/>
    <id>http://ucasfl.me/2017/12/31/the-end-of-2017/</id>
    <published>2017-12-31T13:32:52.000Z</published>
    <updated>2017-12-31T19:11:41.137Z</updated>
    
    <content type="html"><![CDATA[<p>今天，是2017年的最后一天<br>再过不到三个小时，就是2018了<br>过去这一年，说起来，生活好像也没有多大变化</p>
<a id="more"></a>
<p>首先，说说学习<br>马上，大学生涯就只剩下三分之一了<br>原本看样子，大二下学期的时候成绩有些起色<br>但最后发现，一整年下来<br>成绩毫无变化</p>
<p>大三也只剩下一半了<br>有的路不得不走，所以还是要走<br>比如考研也许就是其中之一</p>
<p>生活上，2017年印象最深刻的大概就是感冒必发烧吧<br>其中比较严重的两次还不得不进医院输液<br>一次是四月份，刚过完清明，到医院输了三天液<br>一次就是上周，到医院输了四天液</p>
<p>过去的一年好像也熬过不少夜<br>大概还通过四次宵<br>不过这真的是一个坏习惯</p>
<p>作为一个计系学生<br>过去这一年应该也写了不少代码<br>目前最熟练的语言还是 C 吧<br>虽然不得不写了很多的 Verilog，但真的不感兴趣<br>Python 是一门很强大的语言，于是便成为了我第二喜爱的语言<br>这学期因为数据库实验学了一下世界上最好的语言，也写了一点东西<br>不过目前真的只懂一些基础语法<br>JS/Java/C++/HTML/CSS 大概是可以略过了<br>实践是学习一门语言最快的方式</p>
<p>2017 年最大的一个变化大概就是生命中多了一个人<br>多了一个让我朝思暮想的人<br>嘻嘻，你们懂的</p>
<p>每次写东西前好像都感觉有很多东西要写<br>但真正开始写的时候却发现什么也写不出来<br>最后只能胡说八道一些<br>大概就这些吧</p>
<p>新的一年<br>希望自己还有亲人、爱人都能有一个好身体<br>希望成绩能有所长进<br>希望考研顺利<br>希望和女朋友能少吵几次架<br>舍不得看到她哭<br>还有一个最大的愿望就留在心里当作秘密吧<br>因为我害怕说出来就不能实现了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，是2017年的最后一天&lt;br&gt;再过不到三个小时，就是2018了&lt;br&gt;过去这一年，说起来，生活好像也没有多大变化&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://ucasfl.me/categories/Essay/"/>
    
    
      <category term="Year" scheme="http://ucasfl.me/tags/Year/"/>
    
  </entry>
  
  <entry>
    <title>Python 退出时出现 PermissionError</title>
    <link href="http://ucasfl.me/2017/12/21/python-exit-error/"/>
    <id>http://ucasfl.me/2017/12/21/python-exit-error/</id>
    <published>2017-12-21T14:51:29.000Z</published>
    <updated>2017-12-21T15:07:52.574Z</updated>
    
    <content type="html"><![CDATA[<p>在解决上一个关于<a href="https://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/">OpenCv导入失败</a>的问题的时候，不小心在<code>root</code>权限下运行了Python，导致之后在普通用户下运行Python，退出时出现如下错误：</p>
<figure class="highlight subunit">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">Error </span>in atexit._run_exitfuncs:</div><div class="line">PermissionError: [Errno 13] Permission denied</div></pre>
      </td>
    </tr>
  </table>
</figure>
<a id="more"></a>
<p>上网查了一番没找到好的解决办法，唯一的解决办法就是把它卸载了重装，但是，对于系统自带的Python版本，则不能这样做，因为有很多库依赖。由于我使用的是 anaconda ，因此，干脆直接卸了重新安装～</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {

      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在解决上一个关于&lt;a href=&quot;https://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/&quot;&gt;OpenCv导入失败&lt;/a&gt;的问题的时候，不小心在&lt;code&gt;root&lt;/code&gt;权限下运行了Python，导致之后在普通用户下运行Python，退出时出现如下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight subunit&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Error &lt;/span&gt;in atexit._run_exitfuncs:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;PermissionError: [Errno 13] Permission denied&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
    
    </summary>
    
      <category term="fix-problem" scheme="http://ucasfl.me/categories/fix-problem/"/>
    
    
      <category term="Python ananconda" scheme="http://ucasfl.me/tags/Python-ananconda/"/>
    
  </entry>
  
  <entry>
    <title>解决 /Usr/lib/x86_64-Linux-gnu/libstdc++.so.6 Version GLIBCXX_3.4.22&#39; Not Found 的问题</title>
    <link href="http://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/"/>
    <id>http://ucasfl.me/2017/12/21/fix-the-problem-of-that-usr-lib-x86-64-linux-gnu-libstdc-so-6-version-GLIBCXX-3-4-22-not-found/</id>
    <published>2017-12-21T12:48:42.000Z</published>
    <updated>2017-12-22T16:13:55.384Z</updated>
    
    <content type="html"><![CDATA[<p>今天升级了一下 OpenCv，升级完之后，却出问题了，执行<code>import cv2</code> 报下面的错误：</p>
<figure class="highlight crystal">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, in &lt;<span class="class"><span class="keyword">module</span>&gt;</span></div><div class="line"><span class="symbol">ImportError:</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/<span class="title">libstdc</span>++.<span class="title">so</span>.6: <span class="title">version</span> `<span class="title">GLIBCXX_3</span>.4.22' <span class="title">not</span> <span class="title">found</span> (<span class="title">required</span> <span class="title">by</span> /<span class="title">home</span>/<span class="title">fenglv</span>/<span class="title">FILE</span>/<span class="title">anaconda3</span>/<span class="title">lib</span>/<span class="title">python3</span>.6/<span class="title">site</span>-<span class="title">packages</span>/../../<span class="title">libopencv_objdetect</span>.<span class="title">so</span>.3.3)</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>意思是导入库所需要的 <code>libstdc++.so.6</code> 没有找到，然后，我执行 <code>locate libstdc++.so.6</code> 命令，发现这个库是存在的啊。上网查了一下发现原本是因为升级了 <code>OpenCv</code> 之后需要更高版本的库，而当前的版本过低，所以才出错。</p>
<a id="more"></a>
<p>执行命令 <code>strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</code> ，果然，显示的版本低于<code>3.4.22</code> 。</p>
<p>之后找到解决办法：</p>
<p>下载最新版的<code>libstdc++</code>，<a href="http://ftp.de.debian.org/debian/pool/main/g/gcc-8/libstdc++-8-dev_8-20171213-1_amd64.deb" target="_blank" rel="external">点击下载</a>，然后解压缩：</p>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">ar -x libstdc++<span class="number">6</span>_8-<span class="number">20171213</span>-<span class="number">1</span>_amd64<span class="selector-class">.deb</span> &amp;&amp; tar xvf data<span class="selector-class">.tar</span><span class="selector-class">.xz</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>之后，直接将解压出来的<code>/usr/x86_64-linux-gnu/libstdc++.so.6.25</code> 复制到<code>/usr/lib/x86_64-linux-gnu/</code> 下，当然，为了保险起见，你也可以先备份一下原文件。然后<br>
  <figure class="highlight crystal">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">cd /usr/bin/<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">linux</span>-<span class="title">gnu</span>/</span></div><div class="line">sudo rm lidstdc++.so.<span class="number">6</span></div><div class="line">sudo ln libstdc++.so.<span class="number">6.25</span> libstdc++.so.<span class="number">6</span></div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p>现在，你再次执行命令<code>strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep GLIBCXX</code> ，显示的版本号就如下：</p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.1</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.2</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.3</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.4</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.5</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.6</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.7</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.8</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.9</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.10</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.11</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.12</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.13</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.14</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.15</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.16</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.17</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.18</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.19</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.20</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.21</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.22</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.23</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.24</span></div><div class="line"><span class="selector-tag">GLIBCXX_3</span><span class="selector-class">.4</span><span class="selector-class">.25</span></div><div class="line"><span class="selector-tag">GLIBCXX_DEBUG_MESSAGE_LENGTH</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>至此，问题解决～</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {

      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天升级了一下 OpenCv，升级完之后，却出问题了，执行&lt;code&gt;import cv2&lt;/code&gt; 报下面的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Traceback (most recent call last):&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;, line &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, in &amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;module&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;ImportError:&lt;/span&gt; /usr/&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;x86_64&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;linux&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;gnu&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;libstdc&lt;/span&gt;++.&lt;span class=&quot;title&quot;&gt;so&lt;/span&gt;.6: &lt;span class=&quot;title&quot;&gt;version&lt;/span&gt; `&lt;span class=&quot;title&quot;&gt;GLIBCXX_3&lt;/span&gt;.4.22&#39; &lt;span class=&quot;title&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;found&lt;/span&gt; (&lt;span class=&quot;title&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;by&lt;/span&gt; /&lt;span class=&quot;title&quot;&gt;home&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;fenglv&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;FILE&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;anaconda3&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;lib&lt;/span&gt;/&lt;span class=&quot;title&quot;&gt;python3&lt;/span&gt;.6/&lt;span class=&quot;title&quot;&gt;site&lt;/span&gt;-&lt;span class=&quot;title&quot;&gt;packages&lt;/span&gt;/../../&lt;span class=&quot;title&quot;&gt;libopencv_objdetect&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;so&lt;/span&gt;.3.3)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;意思是导入库所需要的 &lt;code&gt;libstdc++.so.6&lt;/code&gt; 没有找到，然后，我执行 &lt;code&gt;locate libstdc++.so.6&lt;/code&gt; 命令，发现这个库是存在的啊。上网查了一下发现原本是因为升级了 &lt;code&gt;OpenCv&lt;/code&gt; 之后需要更高版本的库，而当前的版本过低，所以才出错。&lt;/p&gt;
    
    </summary>
    
      <category term="fix-problem" scheme="http://ucasfl.me/categories/fix-problem/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>在 Ubuntu 中如何阻止一个包升级</title>
    <link href="http://ucasfl.me/2017/12/17/How-to-hold-a-package-in-Ubuntu/"/>
    <id>http://ucasfl.me/2017/12/17/How-to-hold-a-package-in-Ubuntu/</id>
    <published>2017-12-17T07:27:06.000Z</published>
    <updated>2017-12-17T07:42:08.923Z</updated>
    
    <content type="html"><![CDATA[<p>阻止升级：<br>
  <figure class="highlight coq">
    <table>
      <tr>
        <td class="gutter">
          <pre><div class="line">1</div></pre>
        </td>
        <td class="code">
          <pre><div class="line">sudo echo <span class="string">"package hold"</span> | <span class="type">sudo</span> dpkg --<span class="built_in">set</span>-selections</div></pre>
        </td>
      </tr>
    </table>
  </figure>
</p>
<p><code>package</code> 为包的名字。</p>
<a id="more"></a>
<p>如果要取消，则再次执行上面的命令即可。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;阻止升级：&lt;br&gt;
  &lt;figure class=&quot;highlight coq&quot;&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;td class=&quot;gutter&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
        &lt;td class=&quot;code&quot;&gt;
          &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo echo &lt;span class=&quot;string&quot;&gt;&quot;package hold&quot;&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;sudo&lt;/span&gt; dpkg --&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;-selections&lt;/div&gt;&lt;/pre&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;package&lt;/code&gt; 为包的名字。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如果眼泪会说话</title>
    <link href="http://ucasfl.me/2017/12/15/If-tears-can-speak/"/>
    <id>http://ucasfl.me/2017/12/15/If-tears-can-speak/</id>
    <published>2017-12-15T10:45:06.000Z</published>
    <updated>2017-12-15T10:48:50.645Z</updated>
    
    <content type="html"><![CDATA[<p>如果眼泪会说话<br>也许，生活就会容易一些</p>
<p>如果眼泪会说话<br>也许，爱情就会轻松一些</p>
<a id="more"></a>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果眼泪会说话&lt;br&gt;也许，生活就会容易一些&lt;/p&gt;
&lt;p&gt;如果眼泪会说话&lt;br&gt;也许，爱情就会轻松一些&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://ucasfl.me/categories/Essay/"/>
    
    
      <category term="emotion" scheme="http://ucasfl.me/tags/emotion/"/>
    
  </entry>
  
  <entry>
    <title>无题</title>
    <link href="http://ucasfl.me/2017/12/14/One-year/"/>
    <id>http://ucasfl.me/2017/12/14/One-year/</id>
    <published>2017-12-14T14:10:33.000Z</published>
    <updated>2017-12-14T14:29:17.047Z</updated>
    
    <content type="html"><![CDATA[<p>再过三天，博客就一周年了<br>这一年以来，好像也没能够写出什么有意义的东西<br>也许当时只是觉得一个独立博客大概是一个程序员的标志吧</p>
<a id="more"></a>
<p>博客正式上线是 2016 年 12 月 17 日<br>也就是去年四六级考试那天</p>
<p>这一年，博客也发生过许多变化<br>主题从最开始的 yilia 换到了 next<br>今天三月份购买了一个域名<br>从此使用上了独立域名<br>评论系统多次变更<br>上月通过 Cloudflare 将域名上 https<br>…</p>
<p>原本打算在 17 日那天好好写一篇文章来记录一下博客这一年以来的变化<br>却突然改在今天<br>一切都是意料之外<br>而对于博客这一年以来的变化也只是只言片语的带过</p>
<p>最近学习上又遇到了瓶颈<br>很多事情要干<br>但什么也感觉不会<br>什么也做不下去</p>
<p>时隔一周<br>又和女朋友吵架了<br>爱情带给人的不仅仅只有甜蜜<br>还有很多很多<br>包括痛苦</p>
<p>梦碎了<br>梦醒了<br>生活还得继续<br>谁不是被生活赶着走</p>
<p>最近越来越宅<br>越来越不喜欢接触外面的热闹<br>也越来越不会说话<br>连胡说八道都不知道该说什么了</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再过三天，博客就一周年了&lt;br&gt;这一年以来，好像也没能够写出什么有意义的东西&lt;br&gt;也许当时只是觉得一个独立博客大概是一个程序员的标志吧&lt;/p&gt;
    
    </summary>
    
      <category term="Essay" scheme="http://ucasfl.me/categories/Essay/"/>
    
    
      <category term="Emotion" scheme="http://ucasfl.me/tags/Emotion/"/>
    
  </entry>
  
  <entry>
    <title>Xrandr-一个可以设置屏幕分辨率的 Linux 命令</title>
    <link href="http://ucasfl.me/2017/12/10/Linux-commands-of-xrandr/"/>
    <id>http://ucasfl.me/2017/12/10/Linux-commands-of-xrandr/</id>
    <published>2017-12-09T16:53:10.000Z</published>
    <updated>2017-12-17T07:44:32.184Z</updated>
    
    <content type="html"><![CDATA[<p>一个可以设置屏幕分辨率的 Linux 命令。</p>
<figure class="highlight ada">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">xrandr : 显示系统支持的所有分辨率</div><div class="line">xrandr -s <span class="number">0</span> : 设置为系统默认分辨率</div><div class="line">xrandr -s arg : 设置具体分辨率,如 <span class="type">xrandr</span> -s <span class="number">1024</span>x768</div></pre>
      </td>
    </tr>
  </table>
</figure>
<a id="more"></a>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {

      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个可以设置屏幕分辨率的 Linux 命令。&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;xrandr : 显示系统支持的所有分辨率&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xrandr -s &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : 设置为系统默认分辨率&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;xrandr -s arg : 设置具体分辨率,如 &lt;span class=&quot;type&quot;&gt;xrandr&lt;/span&gt; -s &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;x768&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>使用 Tensorflow 实现神经网络</title>
    <link href="http://ucasfl.me/2017/11/12/an-introduction-to-implementing-neural-networks-using-tensorflow/"/>
    <id>http://ucasfl.me/2017/11/12/an-introduction-to-implementing-neural-networks-using-tensorflow/</id>
    <published>2017-11-12T04:09:50.000Z</published>
    <updated>2017-11-16T03:08:53.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2>
<p>如果你一直关注数据科学/机器学习，那么你肯定知道目前深度学习和神经网络非常流行。许多组织/公司都想要雇佣精通深度学习技能的人。从商业竞争到开源项目和支付高额薪水，人们在尝试一切可能的方法来挖掘这一有限的人才。自我驱动的工程师正被汽车工业中的利器所追逐，因为汽车工业正处于近几十年来最大的破坏边缘！</p>
<a id="more"></a>
<p>如果你对深度学习的前景感到兴奋，但还没有开始你的旅途，那么我将会开启你的旅程。从这篇文章开始，我将会写一系列关于深度学习的文章，包括最受欢迎的深度学习库和它们的实现。</p>
<p>在这篇文章中，我将会向你介绍 Tensorflow。读完这篇文章以后，你将会了解神经网络的应用，并且能够使用 TensorFlow 来解决实际生活中的问题。阅读本文前，你需要了解神经网络的基本知识并且对编程比较熟悉。虽然本文中使用的语言是 Python，但我关注得更多的是概念，并且尽可能保持语言的不可知性。</p>
<p>让我们开始吧！</p>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/maxresdefault-1.jpg" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/maxresdefault-1-1024x576.jpg" alt="TensorFlow"></a></p>
<h2 id="何时使用神经网络？"><a href="#何时使用神经网络？" class="headerlink" title="何时使用神经网络？"></a>何时使用神经网络？</h2>
<p>神经网络成为人们的关注点已经有很长的一段时间了。如果你想了解关于神经网络和深度学习的更详细的解释，请阅读<a href="https://www.analyticsvidhya.com/blog/2016/08/evolution-core-concepts-deep-learning-neural-networks/" target="_blank" rel="external">这篇文章</a>。它的 “depper” 版本在图像识别、语音和自然语言处理等许多领域都取得了巨大的突破。</p>
<p>最主要的问题是什么时候使用神经网络，什么时候不用？这个领域就像现在的金矿一样，每天都会有许多新的发现。为了成为一个“淘金热”分子，你需要记住下面这些事情：</p>
<ul>
  <li><strong>首先，神经网络需要清晰而详实的数据（主要是大数据）来进行训练</strong>。如果把神经网络想象成一个孩子，他首先需要观察他的父母如何走路，然后尝试独立行走，用他的每一步，学会如何来完成一个特定的任务。他可能会跌倒几次，但经过几次失败的尝试，他便学会了如何走路。如果你不让他自己尝试，那么他可能永远也不能学会走路。你给他接触的越多，那么他就会学得越好。</li>
  <li><strong>使用神经网络来处理一些复杂的问题，比如图像处理是明智的。</strong>神经网络属于一类称为表示学习算法的算法类。这些算法将复杂的问题分解成简单的形式，从而使它们能够理解（或“表示“）。就像你在吃东西的时候，需要先把食物嚼碎，然后才咽下。这比传统（非表示学习）算法更加困难。</li>
  <li><strong>什么时候你能够拥有合适的神经网络来解决问题？</strong>每个问题都有它的困难之处。所以，数据决定了解决问题的方式。比如，如果问题是序列生成，那么递归神经网络更加合适。然而，如果是图像相关的问题，那么改用卷积神经网络会更好。</li>
  <li><strong>最后，但不是不重要，硬件需求对于运行一个深度神经网络模型是至关重要的。</strong>神经网络模型在很早之前就有了，但是在近些年才开始活跃起来，主要原因就是计算资源更好，更强大了。如果你想用神经网络来解决现实生活中的问题，请准备购买一些高端的硬件设备。</li>
</ul>
<h2 id="使用神经网络来解决问题的通常手段"><a href="#使用神经网络来解决问题的通常手段" class="headerlink" title="使用神经网络来解决问题的通常手段"></a>使用神经网络来解决问题的通常手段</h2>
<p>神经网络是一种特殊的机器学习（ML）算法。就像每一个机器学习算法一样，你需要按照通常的机器学习工作流程来进行数据预处理，模型建立和模型评估。为了简单起见，我在下面列出了一个处理神经网络问题的清单：</p>
<ul>
  <li>思考一下，使用神经网络算法来处理该问题是否比用传统算法更好（参考上面章节的清单）</li>
  <li>调查一下，待解决的问题使用哪种神经网络更适合</li>
  <li>使用你选择的语言/库来定义神经网络结构</li>
  <li>将数据转化为正确的格式并进行数据划分</li>
  <li>根据你的需要对数据进行预处理</li>
  <li>添加数据来增大数据量从而更好的训练模型</li>
  <li>将数据”喂给”神经网络进行训练</li>
  <li>训练并监测训练过程中的变化和验证数据集的变化</li>
  <li>测试你的模型，并将它保存下来以便将来使用</li>
</ul>
<p>在这篇文章中，我将重点放在图像数据上。所以在开始探讨 TensorFlow 之前，让我们先理解一下图像数据。</p>
<h2 id="图像数据以及常用于解决图像问题的库"><a href="#图像数据以及常用于解决图像问题的库" class="headerlink" title="图像数据以及常用于解决图像问题的库"></a>图像数据以及常用于解决图像问题的库</h2>
<p>图像数据通常以三维数据的形式排序，每一维分别代表高、宽和颜色通道。比如，此时你在你的电脑上截一张图，它将会先转化为一个三维数组，然后再压缩成 <code>.jpeg</code> 或 <code>.png</code> 文件格式。</p>
<p>虽然这些图像对于人类来说很容易理解，但是计算机却很难理解它们。这种现象被称为“语义鸿沟”。我们的大脑能够在几秒钟的时间内看到图像并理解完整的图像，然而，计算机却只是把图像看成一组数字。所以问题是如何向计算机解释图片？</p>
<p>在早期时候，人们试图将图像分解成机器“可理解”的形式，就像一个模板一样。比如，人脸总是有一种特定的结构，这种结构在每个人中都有一定的保留，例如眼睛、鼻子或脸的形状。但是这种方法很乏味，因为当要识别的对象数量增加时，“模板”就不能保存了。</p>
<p>快速前进到 2012 年，一个深度神经网络赢得了 <code>ImageNet</code> 挑战，这是一个根据自然场景来识别对象的著名挑战。在所有随即到来的 <code>ImageNet</code> 挑战中，它持续占领统治地位，从而证明了用它来解决图像问题的有用性。</p>
<p>所以，人们通常使用哪种语言（库）来解决图像识别问题呢？在一个<a href="https://www.analyticsvidhya.com/blog/2016/08/deep-learning-path/" target="_blank" rel="external">最近的调查中</a>，我发现绝大多数受欢迎的深度学习库都有 Python 接口，紧跟着的是 Lua、Java 和 Matlab 。下面是一些最受欢迎的库：</p>
<ul>
  <li><a href="http://caffe.berkeleyvision.org/" target="_blank" rel="external">Caffe</a></li>
  <li><a href="http://deeplearning4j.org/" target="_blank" rel="external">DeepLearning4j</a></li>
  <li><a href="https://www.tensorflow.org/" target="_blank" rel="external">TensorFlow</a></li>
  <li><a href="http://www.deeplearning.net/software/theano" target="_blank" rel="external">Theano</a></li>
  <li><a href="http://torch.ch/" target="_blank" rel="external">Torch</a></li>
</ul>
<p>现在，你已经知道了一张图像是如何存储的，并且知道了常用的库。下面，让我们来看一下 TensorFlow 能够为我们提供什么。 </p>
<h2 id="TensorFlow-是什么？"><a href="#TensorFlow-是什么？" class="headerlink" title="TensorFlow 是什么？"></a>TensorFlow 是什么？</h2>
<p>我们先看一下官方的定义：</p>
<blockquote>
  <p>“TensorFlow 是一个使用数据流图来进行数值计算的开源软件库。图中的节点表示数学运算，而图中的边表示在节点之间进行传递的多维数据数组（又叫做张量）。灵活的架构允许你在桌面、服务器或移动设备上通过一个单一的 API 使用一个或多个 CPU 或 GPU 部署进行计算。”</p>
</blockquote>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing.gif" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing.gif" alt="tensors_flowing"></a><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing-3.gif" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/tensors_flowing-3.gif" alt="tensors_flowing"></a></p>
<p>如果这听起来很让人迷糊，别担心，下面是我的简单定义：你可以简单的把 TensorFlow 看成一个扭曲的 <code>numpy</code>。如果你过去接触过 <code>numpy</code>，那么理解 TensorFlow 就非常简单了。numpy 和 TensorFlow 之间最主要的区别就是 TensorFLow 使用一种惰性的编程范式。它首先搭建一个把所有操作都定义好了的图，然后，当一个“会话“被调用时，它就会开始”运行“这个图。这个图是可扩展的，只需要改变内部张量（又叫做多维数组）的数据表示即可。构建计算图可以看作是使用
  TensorFlow 的主要工作。如果想了解更多关于计算图的数学组成，请阅读<a href="http://colah.github.io/posts/2015-08-Backprop/" target="_blank" rel="external">这篇文章</a>。</p>
<p>我们很容易把 TensorFlow 归为一个神经网络库，但它不仅仅是这样。的确，它是一个非常强大的神经网络库。但是，它还能够做更多的事情。你可以使用它来构建其他机器学习算法，比如决策树或 K-近邻算法。你可以用它来完成任何你通常用 numpy 来完成的事情。因此它又被形象地称为 “NumPy 类固醇”。</p>
<p>使用 TensorFlow 的优点有：</p>
<ul>
  <li><strong>它具有一个直观的结构。</strong>顾名思义它具有”张量流“。你可以轻松的可视化图的每一个部分。</li>
  <li><strong>对于分布式计算，很容易在 CPU/GPU 上面进行训练。</strong></li>
  <li><strong>平台灵活性。</strong>你可以在任何地方运行你的模型，移动设备、服务器或 PC 。</li>
</ul>
<h2 id="一个典型的-TensorFlow-”流“"><a href="#一个典型的-TensorFlow-”流“" class="headerlink" title="一个典型的 TensorFlow ”流“"></a>一个典型的 TensorFlow ”流“</h2>
<p>每个库都有自己的”实现细节“，即一种遵循其编码范式的编写方式。例如，在实现 <code>scikit-learn</code> 时，你首先创建一个需要的算法对象，然后构建一个训练模型，进而对测试集进行预测，看起来就像下面这样：</p>
<figure class="highlight nix">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># 定义机器学习算法的 hyperparamters</span></div><div class="line"><span class="attr">clf</span> = svm.SVC(<span class="attr">gamma=0.001,</span> <span class="attr">C=100.)</span></div><div class="line"><span class="comment"># 训练</span></div><div class="line">clf.fit(X, y)</div><div class="line"><span class="comment"># 测试</span></div><div class="line">clf.predict(X_test)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>正如前面说过的，TensorFlow 遵循一种惰性的编程范式。在 TensorFlow 中运行一个程序的通常工作流如下：</p>
<ul>
  <li><strong>构建一个计算图</strong>，它可以是 TensorFlow 支持的任意一种数学操作。</li>
  <li><strong>初始化变量</strong>，编译之前定义的变量</li>
  <li><strong>创建会话</strong>，这是魔法开始的地方</li>
  <li><strong>在会话中运行图</strong>，编译后的图传到会话中，然后会话开始执行</li>
  <li><strong>关闭会话</strong></li>
</ul>
<p>TensorFlow 中使用的几个术语：</p>
<ul>
  <li>
    <figure class="highlight">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div></pre>
          </td>
          <td class="code">
            <pre><div class="line">占位符：一种将数据输入图表的方法</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <figure class="highlight avrasm">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="symbol">feed_dict:</span> 一个将数组传递给计算图的字典</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
</ul>
<p>让我们写一个小程序并添加两个数字！</p>
<figure class="highlight vim">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"># 导入 TensorFlow</div><div class="line">import tensorflow <span class="keyword">as</span> <span class="keyword">tf</span></div><div class="line"></div><div class="line"># 搭建计算图</div><div class="line"><span class="keyword">a</span> = <span class="keyword">tf</span>.placeholder(<span class="keyword">tf</span>.int16)</div><div class="line"><span class="keyword">b</span> = <span class="keyword">tf</span>.placeholder(<span class="keyword">tf</span>.int16)</div><div class="line"></div><div class="line">addition = <span class="keyword">tf</span>.<span class="built_in">add</span>(<span class="keyword">a</span>, <span class="keyword">b</span>)</div><div class="line"></div><div class="line"># 初始化变量</div><div class="line">init = <span class="keyword">tf</span>.initialize_all_variables()</div><div class="line"></div><div class="line"># 创建会话并运行图</div><div class="line">with <span class="keyword">tf</span>.Session() <span class="keyword">as</span> ses<span class="variable">s:</span></div><div class="line">    sess.run(init)</div><div class="line">    <span class="keyword">print</span> <span class="string">"Addition: %i"</span> % sess.run(addition, feed_dict=&#123;<span class="variable">a:</span> <span class="number">2</span>, <span class="variable">b:</span> <span class="number">3</span>&#125;)</div><div class="line"></div><div class="line"># 关闭会话</div><div class="line">sess.<span class="keyword">close</span>()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="在-TensorFlow-中实现神经网络"><a href="#在-TensorFlow-中实现神经网络" class="headerlink" title="在 TensorFlow 中实现神经网络"></a>在 TensorFlow 中实现神经网络</h2>
<p><em>注意：我们可以使用不同的神经网络结构来解决问题，但为了简单起见，在这儿，我们致力于一个前馈多层感知机的深层实现。</em></p>
<p>让我们首先记住我们学到的关于神经网络的知识。</p>
<p>一个典型的神经网络实现如下：</p>
<ul>
  <li>定义需要编译的神经网络结构</li>
  <li>将数据传输到模型</li>
  <li>在后台，数据首先被分成批，以便进行摄取，首先对批数据进行预处理，扩充，然后送入神经网络进行训练</li>
  <li>神经网络模型进行增量训练</li>
  <li>在特定时间显示准确率</li>
  <li>训练过后，保存模型，以便日后再次使用</li>
  <li>用新数据测试模型并检查它是如何执行的</li>
</ul>
<p>在这儿，我们解决深度学习实践问题 - <a href="https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/" target="_blank" rel="external">识别数字</a>。让我们先看一下问题陈述。</p>
<p>这是一个图像识别问题，从一个给定的 <code>28x28</code> 的图像中识别数字。我们将所有图像的一个子集用于训练，剩余部分用于测试模型。首先，下载训练和测试文件。数据集包含一个所有图像的压缩文件，以及名字和训练/测试图像相对应的 <code>train.csv</code> 和 <code>test.csv</code> 文件。在数据集中没有提供任何额外的特征，只提供了 <code>.png</code> 格式的原始图像。</p>
<p>正如你所知道的，我们将使用 TensorFlow 来搭建一个神经网络模型。所以你首先需要在你的系统上安装 TensorFlow。请参考<a href="https://github.com/tensorflow/tensorflow/blob/master/tensorflow/g3doc/get_started/os_setup.md" target="_blank" rel="external">官方安装指南</a>，根据你的系统进行安装。</p>
<p>我们将按照上面描述的步骤来搭建神经网络。首先，使用 Python 2.7 核来创建一个 Jupyter notebook，后续步骤如下：</p>
<ul>
  <li>首先导入所有需要的模块：</li>
</ul>
<figure class="highlight haskell">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta"># pylab inline</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="title">from</span> scipy.misc <span class="keyword">import</span> imread</div><div class="line"><span class="title">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>让我们设置一个种子值，从而我们能够控制模型的随机性</li>
</ul>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># To stop potential randomness</span></div><div class="line"><span class="attr">seed</span> = <span class="number">128</span></div><div class="line"><span class="attr">rng</span> = np.random.RandomState(seed)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>第一步是设置目录路径，以便安全保存！</li>
</ul>
<figure class="highlight lua">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">root_dir = <span class="built_in">os</span>.path.abspath(<span class="string">'../..'</span>)</div><div class="line">data_dir = <span class="built_in">os</span>.path.join(root_dir, <span class="string">'data'</span>)</div><div class="line">sub_dir = <span class="built_in">os</span>.path.join(root_dir, <span class="string">'sub'</span>)</div><div class="line"></div><div class="line"># check <span class="keyword">for</span> existence</div><div class="line"><span class="built_in">os</span>.path.exists(root_dir)</div><div class="line"><span class="built_in">os</span>.path.exists(data_dir)</div><div class="line"><span class="built_in">os</span>.path.exists(sub_dir)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，让我们读入数据集。数据集是 <code>.csv</code> 文件格式的，并且有一个伴有合适标签的名字。</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">train = pd.read_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'train.csv'</span>))</div><div class="line">test = pd.read_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Test.csv'</span>))</div><div class="line"></div><div class="line">sample_submission = pd.read_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Sample_Submission.csv'</span>))</div><div class="line"></div><div class="line">train.head()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<table>
  <thead>
    <tr>
      <th></th>
      <th>文件名</th>
      <th>标签</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0.png</td>
      <td>4</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1.png</td>
      <td>9</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2.png</td>
      <td>1</td>
    </tr>
    <tr>
      <td>3</td>
      <td>3.png</td>
      <td>7</td>
    </tr>
    <tr>
      <td>4</td>
      <td>4.png</td>
      <td>3</td>
    </tr>
  </tbody>
</table>
<ul>
  <li>让我们看一下我们的数据长什么样！读取图片并显示：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">img_name = rng.choice(train.filename)</div><div class="line">filepath = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'train'</span>, img_name)</div><div class="line"></div><div class="line"><span class="selector-tag">img</span> = imread(filepath, flatten=True)</div><div class="line"></div><div class="line">pylab.imshow(<span class="selector-tag">img</span>, cmap=<span class="string">'gray'</span>)</div><div class="line">pylab.axis(<span class="string">'off'</span>)</div><div class="line">pylab.show()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/3.png" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/3.png" alt="3"></a></p>
<p>上面的图片表示为 numpy 数组，就是下面这样：</p>
<p><a href="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/one.png" target="_blank" rel="external"><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/one-1024x353.png" alt="one"></a></p>
<ul>
  <li>为了使数据操作更简单，我们把所有图像存为 numpy 数组：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">temp = []</div><div class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> train<span class="selector-class">.filename</span>:</div><div class="line">    image_path = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'train'</span>, img_name)</div><div class="line">    <span class="selector-tag">img</span> = imread(image_path, flatten=True)</div><div class="line">    <span class="selector-tag">img</span> = <span class="selector-tag">img</span>.astype(<span class="string">'float32'</span>)</div><div class="line">    temp.append(img)</div><div class="line">    </div><div class="line">train_x = np.stack(temp)</div><div class="line"></div><div class="line">temp = []</div><div class="line"><span class="keyword">for</span> img_name <span class="keyword">in</span> test<span class="selector-class">.filename</span>:</div><div class="line">    image_path = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'test'</span>, img_name)</div><div class="line">    <span class="selector-tag">img</span> = imread(image_path, flatten=True)</div><div class="line">    <span class="selector-tag">img</span> = <span class="selector-tag">img</span>.astype(<span class="string">'float32'</span>)</div><div class="line">    temp.append(img)</div><div class="line">    </div><div class="line">test_x = np.stack(temp)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>因为这是一个典型的机器学习问题，为了测试模型的正常功能，我们需要创建一个验证集。我们将数据按 <code>7:3</code> 分为训练集和验证集。</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">split_size = int(train_x<span class="selector-class">.shape</span>[<span class="number">0</span>]*<span class="number">0.7</span>)</div><div class="line"></div><div class="line">train_x, val_x = train_x[:split_size], train_x[split_size:]</div><div class="line">train_y, val_y = train<span class="selector-class">.label</span><span class="selector-class">.values</span>[:split_size], train<span class="selector-class">.label</span><span class="selector-class">.values</span>[split_size:]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，在程序中定义一些我们在后面将会用到的有用函数：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dense_to_one_hot</span><span class="params">(labels_dense, num_classes=<span class="number">10</span>)</span>:</span></div><div class="line">    <span class="string">"""Convert class labels from scalars to one-hot vectors"""</span></div><div class="line">    num_labels = labels_dense.shape[<span class="number">0</span>]</div><div class="line">    index_offset = np.arange(num_labels) * num_classes</div><div class="line">    labels_one_hot = np.zeros((num_labels, num_classes))</div><div class="line">    labels_one_hot.flat[index_offset + labels_dense.ravel()] = <span class="number">1</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> labels_one_hot</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">preproc</span><span class="params">(unclean_batch_x)</span>:</span></div><div class="line">    <span class="string">"""Convert values to range 0-1"""</span></div><div class="line">    temp_batch = unclean_batch_x / unclean_batch_x.max()</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> temp_batch</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_creator</span><span class="params">(batch_size, dataset_length, dataset_name)</span>:</span></div><div class="line">    <span class="string">"""Create batch with random samples and return appropriate format"""</span></div><div class="line">    batch_mask = rng.choice(dataset_length, batch_size)</div><div class="line">    </div><div class="line">    batch_x = eval(dataset_name + <span class="string">'_x'</span>)[[batch_mask]].reshape(<span class="number">-1</span>, input_num_units)</div><div class="line">    batch_x = preproc(batch_x)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> dataset_name == <span class="string">'train'</span>:</div><div class="line">        batch_y = eval(dataset_name).ix[batch_mask, <span class="string">'label'</span>].values</div><div class="line">        batch_y = dense_to_one_hot(batch_y)</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> batch_x, batch_y</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，到了主要部分。让我们首先来定义神经网络的结构。我们定义一个三层神经网络：输入层、隐含层和输出层。输入层和输出层的神经元数目是固定的，因为输入就是一个 <code>28x28</code> 的图像，输出就是一个 <code>10x1</code> 的表示类别的向量。在隐含层中，我们设置 500 个神经元，这个数目可以根据你的需要来设置。同时，我们也需要对其余变量赋值。阅读<a href="https://www.analyticsvidhya.com/blog/2016/03/introduction-deep-learning-fundamentals-neural-networks/" target="_blank" rel="external">神经网络基础</a>这篇文章来深入了解它是如何工作的。</li>
</ul>
<figure class="highlight nix">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">### set all variables</span></div><div class="line"></div><div class="line"><span class="comment"># number of neurons in each layer</span></div><div class="line"><span class="attr">input_num_units</span> = <span class="number">28</span>*<span class="number">28</span></div><div class="line"><span class="attr">hidden_num_units</span> = <span class="number">500</span></div><div class="line"><span class="attr">output_num_units</span> = <span class="number">10</span></div><div class="line"></div><div class="line"><span class="comment"># define placeholders</span></div><div class="line"><span class="attr">x</span> = tf.placeholder(tf.float32, [None, input_num_units])</div><div class="line"><span class="attr">y</span> = tf.placeholder(tf.float32, [None, output_num_units])</div><div class="line"></div><div class="line"><span class="comment"># set remaining variables</span></div><div class="line"><span class="attr">epochs</span> = <span class="number">5</span></div><div class="line"><span class="attr">batch_size</span> = <span class="number">128</span></div><div class="line"><span class="attr">learning_rate</span> = <span class="number">0.01</span></div><div class="line"></div><div class="line"><span class="comment">### define weights and biases of the neural network (refer this article if you don't understand the terminologies)</span></div><div class="line"></div><div class="line"><span class="attr">weights</span> = &#123;</div><div class="line">    'hidden': tf.Variable(tf.random_normal([input_num_units, hidden_num_units], <span class="attr">seed=seed)),</span></div><div class="line">    'output': tf.Variable(tf.random_normal([hidden_num_units, output_num_units], <span class="attr">seed=seed))</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="attr">biases</span> = &#123;</div><div class="line">    'hidden': tf.Variable(tf.random_normal([hidden_num_units], <span class="attr">seed=seed)),</span></div><div class="line">    'output': tf.Variable(tf.random_normal([output_num_units], <span class="attr">seed=seed))</span></div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，开始创建神经网络计算图：</li>
</ul>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="attr">hidden_layer</span> = tf.add(tf.matmul(x, weights[<span class="string">'hidden'</span>]), biases[<span class="string">'hidden'</span>])</div><div class="line"><span class="attr">hidden_layer</span> = tf.nn.relu(hidden_layer)</div><div class="line"></div><div class="line"><span class="attr">output_layer</span> = tf.matmul(hidden_layer, weights[<span class="string">'output'</span>]) + biases[<span class="string">'output'</span>]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>我们也需要定义神经网络的损失（cost）：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">cost =　tf.reduce_mean(tf<span class="selector-class">.nn</span><span class="selector-class">.softmax_cross_entropy_with_logits</span>(output_layer, y))</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>设置优化算法，比如后向传播算法（BP 算法）。在这儿，我们使用 <a href="https://arxiv.org/abs/1412.6980" target="_blank" rel="external">Adam</a>，这是一个高效的梯度下降算法的变种。在 TensorFlow 中还有许多可用的优化算法（参考<a href="https://www.tensorflow.org/versions/r0.11/api_docs/python/train.html#optimizers" target="_blank" rel="external">这儿</a>）</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">optimizer = tf<span class="selector-class">.train</span><span class="selector-class">.AdamOptimizer</span>(learning_rate=learning_rate).minimize(cost)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>定义好神经网络结构之后，初始化所有变量：</li>
</ul>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="attr">init</span> = tf.initialize_all_variables()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>现在，创建一个会话，在会话中运行我们的神经网络。同时，使用我们已经创建好的验证集来验证我们的模型：</li>
</ul>
<figure class="highlight vim">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">with <span class="keyword">tf</span>.Session() <span class="keyword">as</span> ses<span class="variable">s:</span></div><div class="line">    # create initialized variables</div><div class="line">    sess.run(init)</div><div class="line">    </div><div class="line">    ### <span class="keyword">for</span> each epoch, <span class="keyword">do</span>:</div><div class="line">    ###   <span class="keyword">for</span> each batch, <span class="keyword">do</span>:</div><div class="line">    ###     create <span class="keyword">pre</span>-processed batch</div><div class="line">    ###     run optimizer by feeding batch</div><div class="line">    ###     <span class="keyword">find</span> cost <span class="built_in">and</span> reiterate <span class="keyword">to</span> minimize</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> epoch in <span class="built_in">range</span>(epochs):</div><div class="line">        avg_cost = <span class="number">0</span></div><div class="line">        total_batch = <span class="keyword">int</span>(train.shape[<span class="number">0</span>]/batch_size)</div><div class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(total_batch):</div><div class="line">            batch_x, batch_y = batch_creator(batch_size, train_x.shape[<span class="number">0</span>], <span class="string">'train'</span>)</div><div class="line">            _, <span class="keyword">c</span> = sess.run([optimizer, cost], feed_dict = &#123;<span class="keyword">x</span>: batch_x, <span class="keyword">y</span>: batch_y&#125;)</div><div class="line">            </div><div class="line">            avg_cost += <span class="keyword">c</span> / total_batch</div><div class="line">            </div><div class="line">        <span class="keyword">print</span> <span class="string">"Epoch:"</span>, (epoch+<span class="number">1</span>), <span class="string">"cost ="</span>, <span class="string">"&#123;:.5f&#125;"</span>.format(avg_cost)</div><div class="line">    </div><div class="line">    <span class="keyword">print</span> <span class="string">"\nTraining complete!"</span></div><div class="line">    </div><div class="line">    </div><div class="line">    # <span class="keyword">find</span> predictions <span class="keyword">on</span> val <span class="keyword">set</span></div><div class="line">    pred_temp = <span class="keyword">tf</span>.equal(<span class="keyword">tf</span>.argmax(output_layer, <span class="number">1</span>), <span class="keyword">tf</span>.argmax(<span class="keyword">y</span>, <span class="number">1</span>))</div><div class="line">    accuracy = <span class="keyword">tf</span>.reduce_mean(<span class="keyword">tf</span>.cast(pred_temp, <span class="string">"float"</span>))</div><div class="line">    <span class="keyword">print</span> <span class="string">"Validation Accuracy:"</span>, accuracy.<span class="built_in">eval</span>(&#123;<span class="keyword">x</span>: val_x.reshape(-<span class="number">1</span>, input_num_units), <span class="keyword">y</span>: dense_to_one_hot(val_y)&#125;)</div><div class="line">    </div><div class="line">    predict = <span class="keyword">tf</span>.argmax(output_layer, <span class="number">1</span>)</div><div class="line">    pred = predict.<span class="built_in">eval</span>(&#123;<span class="keyword">x</span>: test_x.reshape(-<span class="number">1</span>, input_num_units)&#125;)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>上面代码的输出如下：</p>
<figure class="highlight http">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="attribute">Epoch</span>: 1 cost = 8.93566</div><div class="line"><span class="attribute">Epoch</span>: 2 cost = 1.82103</div><div class="line"><span class="attribute">Epoch</span>: 3 cost = 0.98648</div><div class="line"><span class="attribute">Epoch</span>: 4 cost = 0.57141</div><div class="line"><span class="attribute">Epoch</span>: 5 cost = 0.44550</div><div class="line"></div><div class="line"><span class="css"><span class="selector-tag">Training</span> <span class="selector-tag">complete</span>!</span></div><div class="line"><span class="selector-tag">Validation</span> <span class="selector-tag">Accuracy</span>: 0<span class="selector-class">.952823</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>为了使用我们的眼睛来测试模型，让我们来看一些它的预测结果：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">img_name = rng.choice(test.filename)</div><div class="line">filepath = os<span class="selector-class">.path</span><span class="selector-class">.join</span>(data_dir, <span class="string">'Train'</span>, <span class="string">'Images'</span>, <span class="string">'test'</span>, img_name)</div><div class="line"></div><div class="line"><span class="selector-tag">img</span> = imread(filepath, flatten=True)</div><div class="line"></div><div class="line">test_index = int(img_name.split(<span class="string">'.'</span>)[<span class="number">0</span>]) - <span class="number">49000</span></div><div class="line"></div><div class="line">print <span class="string">"Prediction is: "</span>, pred[test_index]</div><div class="line"></div><div class="line">pylab.imshow(<span class="selector-tag">img</span>, cmap=<span class="string">'gray'</span>)</div><div class="line">pylab.axis(<span class="string">'off'</span>)</div><div class="line">pylab.show()</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>Prediction is: 8</p>
<p><img src="https://www.analyticsvidhya.com/wp-content/uploads/2016/10/8.png" alt=""></p>
<ul>
  <li>我们看到模型的性能非常好。现在我们来创建一个子会话：</li>
</ul>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sample_submission<span class="selector-class">.filename</span> = test<span class="selector-class">.filename</span></div><div class="line"></div><div class="line"> sample_submission<span class="selector-class">.label</span> = pred</div><div class="line"></div><div class="line">sample_submission.to_csv(os<span class="selector-class">.path</span><span class="selector-class">.join</span>(sub_dir, <span class="string">'sub01.csv'</span>), index=False)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>到现在，我们就把已经训练好的神经网络保存下来了。</p>
<h2 id="TensorFlow-的局限性"><a href="#TensorFlow-的局限性" class="headerlink" title="TensorFlow 的局限性"></a>TensorFlow 的局限性</h2>
<ul>
  <li>尽管 TensorFlow 很强大，但它依旧是一个低级库，打个比方，你可以把它看出一个机器级语言。但是大多数情况下，你需要模块化和高层次的接口，比如 keras 这样的库便能够提供。</li>
  <li>TensorFlow 目前仍然在开发中，因此未来还会有很多令人激动的东西到来。</li>
  <li>TensorFlow 依赖于你的硬件配置，硬件配置越高越好。</li>
  <li>对于许多语言，TensorFlow 还没有 API.</li>
  <li>TensorFlow 中还有许多东西需要实现，比如 OpenCL 的支持。</li>
</ul>
<p>上面提到的内容大多数是站在 TensorFlow 开发者的角度的。他们已经制定了一个路线图来说明将来这个库应该如何发展。</p>
<h2 id="TensorFlow-vs-其他库"><a href="#TensorFlow-vs-其他库" class="headerlink" title="TensorFlow vs. 其他库"></a>TensorFlow vs. 其他库</h2>
<p>TensorFlow 是以和 Theano 和 Torch 相似的原则构建的，都是使用数学计算图。但是由于具有分布式计算的支持，TensorFlow 对于解决复杂的问题表现得更好。同时，由于已经支持 TensorFlow 模型的部署（即开源免费），这使得在工业上使用更加容易，对 Deeplearning4j、H2O 和 Turi 这些商业库造成了竞争威胁。TensorFlow 有 Python、C++ 和 Matlab 的 API，接下来可能将要有对其他语言的支持，比如 Ruby 和 R。所以，TensorFlow
  正在试图成为具有普遍语言的机器学习库。</p>
<h2 id="接下来往哪走"><a href="#接下来往哪走" class="headerlink" title="接下来往哪走"></a>接下来往哪走</h2>
<p>你已经看到了如何使用 TensorFlow 来建立一个简单的神经网路。这个代码对于来理解如何开始实现 TensorFlow 是有意义的，所以不要小瞧它。但是请记住现实生活需要解决的问题将会更加复杂，你需要稍微修改一下代码。</p>
<p>上面的许多函数能够被抽象出来，以提供无缝的端到端工作流。如果你使用过 scikit-learn，那么你可能知道一个高级库是如何抽象出底层实现，然后给终端用户提供一个更加简单的接口的。虽然 TensorFlow 已经抽象出了大多数的实现，但高级库正在出现，比如 TF-slim 和 TFlearn 。</p>
<h2 id="有用的资源"><a href="#有用的资源" class="headerlink" title="有用的资源"></a>有用的资源</h2>
<ul>
  <li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="external">TensorFlow 官方仓库</a></li>
  <li>Rajat Monga (TensorFlow 技术引导) <a href="https://youtu.be/wmw8Bbb_eIE" target="_blank" rel="external">“TensorFlow for everyone”</a> 视频</li>
  <li>一个专用资源列表](<a href="https://github.com/jtoy/awesome-tensorflow/#github-projects" target="_blank" rel="external">https://github.com/jtoy/awesome-tensorflow/#github-projects</a>)</li>
</ul>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2>
<p>我希望你觉得这篇文章很有帮助，现在，是时候来进行更多的练习和阅读了。Good luck！如果你使用一个不同的方法/包/库来实现神经网络，那么我很愿意在评论中跟你互动。如果你有什么建议，也请在评论中告知。为了让自己对神经网络的使用更加熟练，请不要忘记尝试解决我们的深度学习练习问题 - <a href="https://datahack.analyticsvidhya.com/contest/practice-problem-identify-the-digits/" target="_blank" rel="external">数字识别</a>。</p>
<p>你可以测试你的技能和知识。查看 <a href="http://datahack.analyticsvidhya.com/contest/all" target="_blank" rel="external">Live Competitions</a>，来和世界上最优秀的数据科学家进行比赛。</p>
<blockquote>
  <p>原文链接：<a href="https://www.analyticsvidhya.com/blog/2016/10/an-introduction-to-implementing-neural-networks-using-tensorflow/" target="_blank" rel="external">https://www.analyticsvidhya.com/blog/2016/10/an-introduction-to-implementing-neural-networks-using-tensorflow/</a></p>
  <p>翻译：<a href="https://fenglv.ac.cn" target="_blank" rel="external">Flynn</a></p>
</blockquote>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {

      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;
&lt;p&gt;如果你一直关注数据科学/机器学习，那么你肯定知道目前深度学习和神经网络非常流行。许多组织/公司都想要雇佣精通深度学习技能的人。从商业竞争到开源项目和支付高额薪水，人们在尝试一切可能的方法来挖掘这一有限的人才。自我驱动的工程师正被汽车工业中的利器所追逐，因为汽车工业正处于近几十年来最大的破坏边缘！&lt;/p&gt;
    
    </summary>
    
      <category term="Machine-Learning" scheme="http://ucasfl.me/categories/Machine-Learning/"/>
    
    
      <category term="Tensorflow translation" scheme="http://ucasfl.me/tags/Tensorflow-translation/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 中如何通过命令行开启或禁用触摸板</title>
    <link href="http://ucasfl.me/2017/11/02/How-to-enable-or-disable-touchpad-in-Linux-with-command-line/"/>
    <id>http://ucasfl.me/2017/11/02/How-to-enable-or-disable-touchpad-in-Linux-with-command-line/</id>
    <published>2017-11-02T15:45:10.000Z</published>
    <updated>2017-11-06T08:40:04.108Z</updated>
    
    <content type="html"><![CDATA[<p>本文将介绍如何在 Linux 中如何使用命令行命令来打开和关闭触摸板。</p>
<a id="more"></a>
<p>首先，需要了解一个工具：<code>xinput</code></p>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">xinput is <span class="selector-tag">a</span> utility to list available <span class="selector-tag">input</span> devices, query information</div><div class="line">about <span class="selector-tag">a</span> device and change <span class="selector-tag">input</span> device settings.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>上面是 <code>man</code> 手册对它的描述。</p>
<p>要通过触摸板开启或关闭触摸板，首先要要获取触摸板的设备 ID 和属性。</p>
<p>我们可以可以先通过 <code>xinput --list</code> 命令查看有哪些输入设备。下面的结果是在我的笔记本上的输出：</p>
<figure class="highlight crmsh">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">⎡ Virtual core pointer                          <span class="attr">id=</span><span class="number">2</span>    [<span class="keyword">master</span> <span class="title">pointer</span>  (<span class="number">3</span>)]</div><div class="line">⎜   ↳ Virtual core XTEST pointer                <span class="attr">id=</span><span class="number">4</span>    [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎜   ↳ PixArt USB Optical Mouse                  <span class="attr">id=</span><span class="number">10</span>   [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎜   ↳ DELL0767:<span class="number">00</span> <span class="number">06</span>CB:<span class="number">7</span>E92 Touchpad            <span class="attr">id=</span><span class="number">12</span>   [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎜   ↳ SynPS/<span class="number">2</span> Synaptics TouchPad                <span class="attr">id=</span><span class="number">14</span>   [<span class="literal">slave</span>  pointer  (<span class="number">2</span>)]</div><div class="line">⎣ Virtual core keyboard                         <span class="attr">id=</span><span class="number">3</span>    [<span class="keyword">master</span> <span class="title">keyboard</span> (<span class="number">2</span>)]</div><div class="line">    ↳ Virtual core XTEST keyboard               <span class="attr">id=</span><span class="number">5</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Power Button                              <span class="attr">id=</span><span class="number">6</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Video Bus                                 <span class="attr">id=</span><span class="number">7</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Power Button                              <span class="attr">id=</span><span class="number">8</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Sleep Button                              <span class="attr">id=</span><span class="number">9</span>    [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Integrated Webcam                         <span class="attr">id=</span><span class="number">11</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ AT Translated Set <span class="number">2</span> keyboard              <span class="attr">id=</span><span class="number">13</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ Dell WMI hotkeys                          <span class="attr">id=</span><span class="number">15</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div><div class="line">    ↳ DELL Wireless hotkeys                     <span class="attr">id=</span><span class="number">16</span>   [<span class="literal">slave</span>  keyboard (<span class="number">3</span>)]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>可以看到，第 4 行输出即为触摸板，后面的 <code>id</code> 即为设备号。</p>
<p>下面，查看触摸板的属性：</p>
<figure class="highlight ada">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">xinput <span class="comment">--list-props 12 </span></div><div class="line">＃或</div><div class="line">xinput <span class="comment">--list-props ‘DELL0767:00 06CB:7E92 Touchpad’</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>即使用设备 <code>id</code> 或设备名作为后面的参数均可以。</p>
<p>下面是在我的笔记本上的输出：</p>
<figure class="highlight aspectj">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Device <span class="string">'DELL0767:00 06CB:7E92 Touchpad'</span>:</div><div class="line">	Device Enabled (140):	0</div><div class="line">	Coordinate Transformation Matrix (142):	1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 1.000000</div><div class="line">	Device Accel Profile (263):	1</div><div class="line">	Device Accel Constant Deceleration (264):	2.500000</div><div class="line">	Device Accel Adaptive Deceleration (265):	1.000000</div><div class="line">	Device Accel Velocity Scaling (266):	12.500000</div><div class="line">	Synaptics Edges (288):	49, 1180, 50, 879</div><div class="line">	Synaptics Finger (289):	25, 30, 0</div><div class="line">	Synaptics Tap Time (290):	180</div><div class="line">	Synaptics Tap Move (291):	67</div><div class="line">	Synaptics Tap Durations (292):	180, 180, 100</div><div class="line">	Synaptics ClickPad (293):	1</div><div class="line">	Synaptics Middle Button Timeout (294):	0</div><div class="line">	Synaptics Two-Finger Pressure (295):	282</div><div class="line">	Synaptics Two-Finger Width (296):	7</div><div class="line">	Synaptics Scrolling Distance (297):	30, 30</div><div class="line">	Synaptics Edge Scrolling (298):	0, 0, 0</div><div class="line">	Synaptics Two-Finger Scrolling (299):	1, 1</div><div class="line">	Synaptics Move Speed (300):	1.000000, 1.750000, 0.129870, 0.000000</div><div class="line">	Synaptics Off (301):	0</div><div class="line">	Synaptics Locked Drags (302):	0</div><div class="line">	Synaptics Locked Drags Timeout (303):	5000</div><div class="line">	Synaptics Tap Action (304):	2, 3, 0, 0, 1, 3, 2</div><div class="line">	Synaptics Click Action (305):	1, 3, 0</div><div class="line">	Synaptics Circular Scrolling (306):	0</div><div class="line">	Synaptics Circular Scrolling Distance (307):	0.100000</div><div class="line">	Synaptics Circular Scrolling Trigger (308):	0</div><div class="line">	Synaptics Circular Pad (309):	0</div><div class="line">	Synaptics Palm Detection (310):	0</div><div class="line">	Synaptics Palm Dimensions (311):	10, 200</div><div class="line">	Synaptics Coasting Speed (312):	20.000000, 50.000000</div><div class="line">	Synaptics Pressure Motion (313):	30, 160</div><div class="line">	Synaptics Pressure Motion Factor (314):	1.000000, 1.000000</div><div class="line">	Synaptics Resolution Detect (315):	1</div><div class="line">	Synaptics Grab Event Device (316):	0</div><div class="line">	Synaptics Gestures (317):	1</div><div class="line">	Synaptics Capabilities (318):	1, 0, 0, 1, 1, 0, 0</div><div class="line">	Synaptics Pad Resolution (319):	12, 12</div><div class="line">	Synaptics Area (320):	0, 0, 0, 0</div><div class="line">	Synaptics Soft Button Areas (321):	614, 0, 761, 0, 0, 0, 0, 0</div><div class="line">	Synaptics Noise Cancellation (322):	7, 7</div><div class="line">	Device Product ID (258):	1739, 32402</div><div class="line">	Device Node (259):	<span class="string">"/dev/input/event15"</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>可以看到，第一个属性即为触摸板状态：1 表示开启，0 表示关闭，属性编号为 140。</p>
<p>之后，我们可以使用下面的命令来开启或关闭触摸板：</p>
<figure class="highlight dsconfig">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># 开启触摸板</span></div><div class="line"><span class="string">xinput </span><span class="built_in">set-prop</span> <span class="string">12 </span><span class="string">140 </span>1</div><div class="line"><span class="comment"># 关闭触摸板</span></div><div class="line"><span class="string">xinput </span><span class="built_in">set-prop</span> <span class="string">12 </span><span class="string">140 </span>0</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>其中，设备 ID 和属性编号也可替换为名字。</p>
<p>但是，每次都使用这个命令会比较麻烦，因此，可以通过一个简单的脚本来实现：</p>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"on"</span> ]; <span class="keyword">then</span></div><div class="line">	xinput <span class="built_in">set</span>-prop 12 140 1;</div><div class="line">	<span class="built_in">echo</span> <span class="string">"Touchpad successfully enabled!"</span>;</div><div class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"off"</span> ]; <span class="keyword">then</span></div><div class="line">	xinput <span class="built_in">set</span>-prop 12 140 0;</div><div class="line">	<span class="built_in">echo</span> <span class="string">"Touchpad successfully disabled!"</span></div><div class="line"><span class="keyword">else</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"Please use the program with one of the following arguments:"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"   (1) on  : enable the touchpad!"</span></div><div class="line">	<span class="built_in">echo</span> <span class="string">"   (2) off : disable the touchpad!"</span></div><div class="line"><span class="keyword">fi</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>将该脚本命名为 <code>touchpad</code> ，然后放到 <code>/home/user/bin</code> 目录下。然后，开启或关闭触摸板就很方便了：</p>
<figure class="highlight nginx">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment"># 开启触摸板</span></div><div class="line"><span class="attribute">touchpad</span> <span class="literal">on</span></div><div class="line"><span class="comment"># 关闭触摸板</span></div><div class="line">touchpad <span class="literal">off</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>注意，脚本中的设备 ID 和属性编号应和你的笔记本一致，<code>user</code> 为你的用户名。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将介绍如何在 Linux 中如何使用命令行命令来打开和关闭触摸板。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux touchpad" scheme="http://ucasfl.me/tags/Linux-touchpad/"/>
    
  </entry>
  
  <entry>
    <title>记一下那些年使用 Linux 踩过的坑</title>
    <link href="http://ucasfl.me/2017/10/30/What-the-fuck-problem-with-Linux/"/>
    <id>http://ucasfl.me/2017/10/30/What-the-fuck-problem-with-Linux/</id>
    <published>2017-10-30T11:54:31.000Z</published>
    <updated>2017-11-05T11:37:52.078Z</updated>
    
    <content type="html"><![CDATA[<p>笔记本上装了双系统：Windows 10 + Ubuntu，刚装好 Ubuntu 不久就重新从 Windows 下分了一个盘挂载到 Ubuntu 下。如今，由于基本不再使用 Windows 系统，准确的说就只在虚拟机上使用一下 QQ、微信。于是，我又从 Windows 下分出一个盘，准备挂载到 Ubuntu 下。然而，却突然启动不进去了，直接进入了 <code>emergency mode</code>，尝试重新启动到默认模式，然后出现下面的错误信息：</p>
<a id="more"></a>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">[   84.260812] EXT4-fs (sda7): VFS: can&apos;t find ext4 filesystem.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>错误信息很直接，说<code>sda7</code>不是<code>ext4</code>文件系统格式。</p>
<p>然后查看分区：<code>fdisk -l</code>，输出如下：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Disk /dev/sda: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors</div><div class="line">Units: sectors of 1 * 512 = 512 bytes</div><div class="line">Sector size (logical/physical): 512 bytes / 4096 bytes</div><div class="line">I/O size (minimum/optimal): 4096 bytes / 4096 bytes</div><div class="line">Disklabel type: gpt</div><div class="line">Disk identifier: A3FE2E3C-3EBC-401D-8BB3-987D9B33F0EC</div><div class="line"></div><div class="line">Device          Start        End   Sectors   Size Type</div><div class="line">/dev/sda1        2048    1026047   1024000   500M EFI System</div><div class="line">/dev/sda2     1026048    1288191    262144   128M Microsoft reserved</div><div class="line">/dev/sda3     1288192  284209819 282921628 134.9G Microsoft basic data</div><div class="line">/dev/sda4   284211200  508033023 223821824 106.7G Microsoft basic data</div><div class="line">/dev/sda5   508035072  949225471 441190400 210.4G Linux filesystem</div><div class="line">/dev/sda6   949225472  965793791  16568320   7.9G Linux swap</div><div class="line">/dev/sda7   965793792 1298845695 333051904 158.8G Microsoft basic data</div><div class="line">/dev/sda8  1298845696 1718274047 419428352   200G Linux filesystem</div><div class="line">/dev/sda9  1718276096 1927991295 209715200   100G Microsoft basic datamount -o remount,rw /</div><div class="line">mount --all</div><div class="line">chown root:root /usr/bin/sudo</div><div class="line">chmod 4755 /usr/bin/sudo</div><div class="line">/dev/sda10 1927993344 1928998911   1005568   491M Windows recovery environment</div><div class="line">/dev/sda11 1928998912 1951117311  22118400  10.6G Windows recovery environment</div><div class="line">/dev/sda12 1951119360 1953523711   2404352   1.2G Windows recovery environment</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>What ? <code>/dev/sd7</code> 是 Windows 系统的 C 盘，怎么它会在启动的时候挂载呢，而且还是以 <code>ext4</code> 的文件系统格式挂载。想了半天，没发现问题。还好，机智的我赶紧看了一下 <code>/etc/fstab</code> 文件内容：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"># /etc/fstab: static file system information.</div><div class="line">#</div><div class="line"># Use &apos;blkid&apos; to print the universally unique identifier for a</div><div class="line"># device; this may be used with UUID= as a more robust way to name devices</div><div class="line"># that works even if disks are added and removed. See fstab(5).</div><div class="line">#</div><div class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</div><div class="line"># / was on /dev/sda9 during installation</div><div class="line">UUID=e3a38d48-680a-49e5-a98f-ae8bb6a37293 /               ext4    errors=remount-ro 0       1</div><div class="line"># /boot/efi was on /dev/sda1 during installation</div><div class="line">UUID=FE51-6D32  /boot/efi       vfat    umask=0077      0       1</div><div class="line"># swap was on /dev/sda10 during installation</div><div class="line">UUID=c6a51fbb-d72a-4d93-9305-b75aaf6ab1fa none            swap    sw              0       0</div><div class="line">dev/sda7 home/fenglv/FILE ext4 defaults 0 1</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>？？？原来之前挂载到 Ubuntu 上的盘设备名就是 <code>/dev/sda7</code> ，添加一个新的分区后设备名变为了 <code>/dev/sda8</code>，现在的 <code>/dev/sda7</code> 对应的就是 Windows 系统的 C 盘。而我没有修改 <code>/etc/fstab</code> ，所以才导致 Linux 系统启动的时候无法将该设备挂载上。</p>
<p>修改之后终于正常启动了。</p>
<p>然而事情并没有结束。之后，<code>sudo</code> 不能使用了，错误信息如下：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sudo: error in /etc/sudo.conf, line 0 while loading plugin `sudoers_policy&apos;</div><div class="line">sudo: /usr/lib/sudo/sudoers.so must be only be writable by owner</div><div class="line">sudo: fatal error, unable to load plugins</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>好吧，直接上网查。最后在 <a href="https://askubuntu.com/questions/637432/sudo-comes-up-with-an-error-cannot-run-anything-as-root" target="_blank" rel="external">askubunntu</a> 上找到了解决办法：启动到 <code>recovery mode</code> ，然后执行下面的命令：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">mount -o remount,rw /</div><div class="line">chmod 644 /usr/lib/sudo/sudoers.so</div><div class="line">chown -R root /usr/lib/sudo</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>至此，全部问题解决。</p>
<p>问题并没有真的结束（文章更新），之后，virtualbox 不能启动了：</p>
<figure class="highlight vim">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">VBoxHeadles<span class="variable">s:</span> Effective UID <span class="keyword">is</span> not root (euid=<span class="number">1000</span> egid=<span class="number">1000</span> uid=<span class="number">1000</span> gid=<span class="number">1000</span>)</div><div class="line">VBoxHeadles<span class="variable">s:</span> Tip! It may <span class="keyword">help</span> <span class="keyword">to</span> reinstall VirtualBox.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>正确的做法就是按照它的提示把 virtualbox 卸了重新安装。然而，我却去修改<code>/usr/bin</code>的所有者：<code>chown -R root /usr/bin</code> 。这样以后，不但 <code>virtual box</code> 无法启动，<code>sudo</code> 又不能用了，这次的错误信息如下：</p>
<figure class="highlight armasm">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="symbol">sudo</span>: /usr/<span class="keyword">bin/sudo </span>must <span class="keyword">be </span>owned <span class="keyword">by </span>uid <span class="number">0</span> <span class="keyword">and </span>have the setuid <span class="keyword">bit </span>set</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>最后找到解决办法：再次进入 <code>recovery mode</code>，执行下面命令：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">mount -o remount,rw /</div><div class="line">mount --all</div><div class="line">chown root:root /usr/bin/sudo</div><div class="line">chmod 4755 /usr/bin/sudo</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>问题解决。</p>
<p>Linux 的权限问题真让人头疼。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔记本上装了双系统：Windows 10 + Ubuntu，刚装好 Ubuntu 不久就重新从 Windows 下分了一个盘挂载到 Ubuntu 下。如今，由于基本不再使用 Windows 系统，准确的说就只在虚拟机上使用一下 QQ、微信。于是，我又从 Windows 下分出一个盘，准备挂载到 Ubuntu 下。然而，却突然启动不进去了，直接进入了 &lt;code&gt;emergency mode&lt;/code&gt;，尝试重新启动到默认模式，然后出现下面的错误信息：&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 主机和 Vbox 下的 Windows 虚拟机创建共享文件夹</title>
    <link href="http://ucasfl.me/2017/10/28/Linux-host-create-share-folder-with-windows-vbox/"/>
    <id>http://ucasfl.me/2017/10/28/Linux-host-create-share-folder-with-windows-vbox/</id>
    <published>2017-10-28T06:42:12.000Z</published>
    <updated>2017-11-05T11:30:04.231Z</updated>
    
    <content type="html"><![CDATA[<p>在 Linux 下，难免会使用一些 Windows 的软件，此时其中一个选择就是安装虚拟机。下面将阐述如何在 Linux 主机下创建一个和 VirtualBox 下的 Windows 虚拟机的共享文件夹。</p>
<a id="more"></a>
<p>首先确保安装好虚拟机。</p>
<p>第一步，启动虚拟机，点击左上方工具栏 -&gt; 安装增加功能 -&gt; 按照提示安装成功即可。</p>
<p>第一步，打开虚拟机设置 -&gt; 共享文件夹 -&gt; 添加路径 -&gt; 设置共享文件夹名字（假设名字为 Win7，后面会用到。）</p>
<p>第三步，重启虚拟机 -&gt; 打开 cmd -&gt; 输入命令 <code>net use x: \\vboxsvr\Win7</code> 即可。其中 <code>x</code> 为盘符，任意一个未使用的字母均可以，<code>Win7</code> 即为上面设置的共享文件夹名字。</p>
<p>这样，在主机和虚拟机之间就创建了一个共享文件夹。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Linux 下，难免会使用一些 Windows 的软件，此时其中一个选择就是安装虚拟机。下面将阐述如何在 Linux 主机下创建一个和 VirtualBox 下的 Windows 虚拟机的共享文件夹。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python 编程风格</title>
    <link href="http://ucasfl.me/2017/10/26/Pythonic-programming-tips/"/>
    <id>http://ucasfl.me/2017/10/26/Pythonic-programming-tips/</id>
    <published>2017-10-26T04:10:08.000Z</published>
    <updated>2017-11-05T11:31:51.171Z</updated>
    
    <content type="html"><![CDATA[<p>本文将记录在学习过程掌握/学习到的一些 Python 编程的奇技淫巧，即如何写 Pythonic 的 Python 代码。因此，文章将会持续更新，更新时间不限。由于本人知识有限，文中难免会出现不足或错误的地方。</p>
<a id="more"></a>
<h3 id="多变量赋值"><a href="#多变量赋值" class="headerlink" title="多变量赋值"></a>多变量赋值</h3>
<p>变量赋值是编程语言里面最简单的语句之一，通常情况下，我们会这样做：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line">c = <span class="number">3</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>这样便完成了对三个变量的赋值，但你可以用更简单的方式：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="元素值交换"><a href="#元素值交换" class="headerlink" title="元素值交换"></a>元素值交换</h3>
<p>在编程过程中，交换两个变量的值是非常常见的。一般情况下，我们会用下面这种方式来交换两个变量的值（尤其是对于第一门语言是C/C++的人来说）：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">t = a</div><div class="line">a = b</div><div class="line">b = t</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>这种方式是正确的，没有人敢说它不对，但事实上，在 Python 里，你可以有更简单的方式来完成这件事：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">a, b = b, a</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>没错，一行语句就够了。</p>
<p>对上面两个技巧的解释：在 Python 中，任何以逗号分隔的对象均被当作元组处理，因此<code>1, 2, 3</code>　实际上就是一个元组<code>(1, 2, 3)</code>，赋值过程可以看成是元组的解包 。交换值也是同样的，它相当于把等号右边的元组解包后赋值给了左边的变量。为了提高代码的可读性，上面的例子可以加上括号：</p>
<figure class="highlight stylus">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">a</span>, <span class="selector-tag">b</span>, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="selector-tag">a</span>, <span class="selector-tag">b</span> = (<span class="selector-tag">b</span>, a)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="列表解析"><a href="#列表解析" class="headerlink" title="列表解析"></a>列表解析</h3>
<p>假设 <code>list1</code> 是一个字符串组成的列表，现在，需要把 <code>list1</code> 中的每一个字符串的每一个小写字母找出来，形成一个新的元组。一般情况下，我们可以这样做：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">list1 = [<span class="string">'adg'</span>, <span class="string">'Adf'</span>, <span class="string">'124'</span>]</div><div class="line">list2 = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</div><div class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> i:</div><div class="line">    <span class="keyword">if</span> j &gt;= <span class="string">'a'</span> <span class="keyword">and</span> j &lt;= <span class="string">'z'</span>:</div><div class="line">      list2.append(j)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>但实际上，你只需要用一个语句就可以完成这件事：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">list2 = [j <span class="keyword">for</span> i <span class="keyword">in</span> list1 <span class="keyword">for</span> j <span class="keyword">in</span> i <span class="keyword">if</span> j &gt;= <span class="string">'a'</span> <span class="keyword">and</span> j &lt;= <span class="string">'z'</span>]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>没错，Python 就是这么简洁。如果把上面的方括号换成圆括号，那么结果返回的就是一个迭代器，可以使用 <code>next()</code> 方法获取元素：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">list2 = (j <span class="keyword">for</span> i <span class="keyword">in</span> list1 <span class="keyword">for</span> j <span class="keyword">in</span> i <span class="keyword">if</span> j &gt;= <span class="string">'a'</span> <span class="keyword">and</span> j &lt;= <span class="string">'z'</span>)</div><div class="line">list2.next() <span class="comment"># 返回'a'</span></div><div class="line">list2.next() <span class="comment"># 返回'd'</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h3>
<p>函数的多个参数可通过一个元组传递，假设有如下函数：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(x, y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x + y</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>可重新定义为：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(*params)</span>:</span></div><div class="line">  <span class="keyword">return</span> params[<span class="number">0</span>] + params[<span class="number">1</span>]</div><div class="line"><span class="comment">#传递参数</span></div><div class="line">add2(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"><span class="comment">#或</span></div><div class="line">tuple1 = (<span class="number">1</span>, <span class="number">2</span>)</div><div class="line">add2(*tuple1)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>使用双星号则可以传递一个字典：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">with_star</span><span class="params">(**kwds)</span>:</span></div><div class="line">  print(kwds[<span class="string">'name'</span>], <span class="string">' is '</span>, kwds[<span class="string">'age'</span>] ,<span class="string">' years old.'</span>)</div><div class="line">args = &#123;<span class="string">'name'</span> : <span class="string">'Mrs. GUmby'</span>, <span class="string">'age'</span> : <span class="number">42</span>&#125;</div><div class="line">with_star(**args)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="使用两个列表创建字典"><a href="#使用两个列表创建字典" class="headerlink" title="使用两个列表创建字典"></a>使用两个列表创建字典</h3>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">list2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div><div class="line">d = dict(zip(list1, list2))</div><div class="line">list1 == list(d.keys())</div><div class="line">list2 == list(d.values())</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3>
<p>多态意味着就算不知道变量所引用的对象类型是什么，也可以对它进行操作，看下面的函数：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span> <span class="params">(a, b)</span>:</span></div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 返回３</span></div><div class="line">add(<span class="string">'ab'</span>, <span class="string">'cd'</span>) <span class="comment"># 返回'abcd'</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>很多函数和运算符都是多态的，因此写程序时也应该尽量避免破坏多态，尽量不使用 <code>type, isinstance, issubclass</code> 之类会破坏多态的函数。</p>
<p>多态是 Python 式编程的核心，也被称为 “duck typing”。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文将记录在学习过程掌握/学习到的一些 Python 编程的奇技淫巧，即如何写 Pythonic 的 Python 代码。因此，文章将会持续更新，更新时间不限。由于本人知识有限，文中难免会出现不足或错误的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://ucasfl.me/categories/Python/"/>
    
    
      <category term="Python" scheme="http://ucasfl.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 速查表</title>
    <link href="http://ucasfl.me/2017/10/07/Python-cheat-sheet/"/>
    <id>http://ucasfl.me/2017/10/07/Python-cheat-sheet/</id>
    <published>2017-10-07T11:20:55.000Z</published>
    <updated>2017-11-05T11:31:44.295Z</updated>
    
    <content type="html"><![CDATA[<p>本手册是 <a href="http://datasciencefree.com/python.pdf" target="_blank" rel="external">Python cheat sheet</a> 的中文翻译版。原作者：Arianne Colton and Sean Chen(data.scientist.info@gmail.com)。</p>
<p>该手册同时位于 <a href="https://github.com/ucasFL/python-cheat-sheet-Chinese-edition" target="_blank" rel="external">GitHub</a> 上，可下载 <a href="https://github.com/ucasFL/python-cheat-sheet-Chinese-edition/blob/master/python-cheat-sheet-zh-cn.pdf" target="_blank" rel="external">PDF 版</a>。</p>
<a id="more"></a>
<h2 id="惯例"><a href="#惯例" class="headerlink" title="惯例"></a>惯例</h2>
<ul>
  <li>Python 对大小写敏感；</li>
  <li>Python 的索引从 0 开始（所有编程语言均如此）；</li>
  <li>Python 使用空白符（制表符或空格）来缩进代码，而不是使用花括号。</li>
</ul>
<h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2>
<ul>
  <li>获取主页帮助： <code>help()</code></li>
  <li>获取函数帮助： <code>help(str.replace)</code></li>
  <li>获取模块帮助： <code>help(re)</code></li>
</ul>
<h2 id="模块（亦称库）"><a href="#模块（亦称库）" class="headerlink" title="模块（亦称库）"></a>模块（亦称库）</h2>
<p>模块只是一个简单地以 <code>.py</code> 为后缀的文件。</p>
<ul>
  <li>列出模块内容：<code>dir(module1)</code></li>
  <li>导入模块：<code>import module</code></li>
  <li>调用模块中的函数：<code>module1.func1()</code></li>
</ul>
<p><strong>注：<code>import</code> 语句会创建一个新的名字空间，并且在该名字空间内执行 <code>.py</code> 文件中的所有语句。如果你想把模块内容导入到当前名字空间，请使用 <code>from module1 import *</code> 语句。</strong></p>
<h2 id="数值类类型"><a href="#数值类类型" class="headerlink" title="数值类类型"></a>数值类类型</h2>
<p>查看变量的数据类型：<code>type(variable)</code></p>
<h3 id="六种经常使用的数据类型"><a href="#六种经常使用的数据类型" class="headerlink" title="六种经常使用的数据类型"></a>六种经常使用的数据类型</h3>
<ol>
  <li>
    <p><strong>int/long</strong>：过大的 <code>int</code> 类型会被自动转化为 <code>long</code> 类型。</p>
  </li>
  <li>
    <p><strong>float</strong>：64 位，Python 中没有 <code>double</code> 类型。</p>
  </li>
  <li>
    <p><strong>bool</strong>：真或假。</p>
  </li>
  <li>
    <p><strong>str</strong>：在 Python 2 中默认以 ASCII 编码，而在 Python 3 中默认以 Unicode 编码；</p>
    <ul>
      <li>字符串可置于单/双/三引号中；</li>
      <li>字符串是字符的序列，因此可以像处理其他序列一样处理字符串；</li>
      <li>特殊字符可通过 <code>\</code> 或者前缀 <code>r</code> 实现：</li>
    </ul>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div></pre>
          </td>
          <td class="code">
            <pre><div class="line">str1 = <span class="string">r'this\f?ff'</span></div></pre>
          </td>
        </tr>
      </table>
    </figure>
    <ul>
      <li>字符串可通过多种方式格式化：</li>
    </ul>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div><div class="line">2</div></pre>
          </td>
          <td class="code">
            <pre><div class="line">template = <span class="string">'%.2f %s haha $%d'</span>;</div><div class="line">str1 = template % (<span class="number">4.88</span>, <span class="string">'hola'</span>, <span class="number">2</span>)</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>NoneType(None)</strong>：Python <code>null</code> 值（只有 None 对象的一个实例中存在）。</p>
    <ul>
      <li><code>None</code> 不是一个保留关键字，而是 <strong>NoneType</strong> 的一个唯一实例。</li>
      <li><code>None</code> 通常是可选函数参数的默认值：</li>
    </ul>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(a, b, c = None)</span></span></div></pre>
          </td>
        </tr>
      </table>
    </figure>
    <ul>
      <li><code>None</code> 的常见用法：</li>
    </ul>
    <figure class="highlight python">
      <table>
        <tr>
          <td class="gutter">
            <pre><div class="line">1</div></pre>
          </td>
          <td class="code">
            <pre><div class="line"><span class="keyword">if</span> variable <span class="keyword">is</span> <span class="keyword">None</span> :</div></pre>
          </td>
        </tr>
      </table>
    </figure>
  </li>
  <li>
    <p><strong>datatime</strong>：Python 内建的 datetime 模块提供了 <code>datetime</code>、<code>data</code> 以及 <code>time</code> 类型。</p>
    <ul>
      <li><code>datetime</code> 组合了存储于 <code>date</code> 和 <code>time</code> 中的信息。</li>
    </ul>
  </li>
</ol>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#从字符串中创建 datetime</span></div><div class="line">dt1 = datetime.strptime(<span class="string">'20091031'</span>, <span class="string">'%Y%m%d'</span>)</div><div class="line"><span class="comment">#获取 date 对象</span></div><div class="line">dt1.date()</div><div class="line"><span class="comment">#获取 time 对象</span></div><div class="line">dt1.time()</div><div class="line"><span class="comment">#将 datetime 格式化为字符串</span></div><div class="line">dt1.strftime(<span class="string">'%m/%d/%Y%H:%M'</span>)</div><div class="line"><span class="comment">#更改字段值</span></div><div class="line">dt2 = dt1.replace(minute = <span class="number">0</span>, second = <span class="number">30</span>)</div><div class="line"><span class="comment">#做差, diff 是一个 datetime.timedelta 对象</span></div><div class="line">diff = dt1 - dt2</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>注：Python 中的绝大多数对象都是可变的，只有字符串和元组例外。</strong></p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2>
<p><strong>注：所有的 non-Get 函数调用，比如下面例子中的 <code>list1.sort()</code> 都是原地操作，即不会创建新的对象，除非特别声明。</strong></p>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3>
<p>元组是 Python 中任何类型的对象的一个一维、固定长度、不可变的序列。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#创建元组</span></div><div class="line">tup1 = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span> </div><div class="line"><span class="comment"># or</span></div><div class="line">tup1 = (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</div><div class="line"><span class="comment">#创建嵌套元组</span></div><div class="line">tup1 = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>)</div><div class="line"><span class="comment">#将序列或迭代器转化为元组</span></div><div class="line">tuple([<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>])</div><div class="line"><span class="comment">#连接元组</span></div><div class="line">tup1 + tup2</div><div class="line"><span class="comment">#解包元组</span></div><div class="line">a, b, c = tup1</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>元组应用：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#交换两个变量的值</span></div><div class="line">a, b = b, a</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3>
<p>列表是 Python 中任何类型的对象的一个一维、非固定长度、可变（比如内容可以被修改）的序列。</p>
<figure class="highlight">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">#创建列表</div><div class="line">list1 = [1, 'a', 3]</div><div class="line">#or</div><div class="line">list1 = list(tup1)</div><div class="line">#连接列表</div><div class="line">list1 + list2 </div><div class="line">#or</div><div class="line">list1.extend(list2)</div><div class="line">#追加到列表的末尾</div><div class="line">list1.append('b')</div><div class="line">#插入指定位置</div><div class="line">list1.insert(PosIndex, 'a')</div><div class="line">#反向插入，即弹出给定位置的值/删除</div><div class="line">ValueAtIdx = list1.pop(PosIndex)</div><div class="line">#移除列表中的第一个值, a 必须是列表中第一个值</div><div class="line">list1.remove('a')</div><div class="line">#检查成员资格</div><div class="line">3 in list1 =&gt; True or False</div><div class="line">#对列表进行排序</div><div class="line">list1.sort()</div><div class="line">#按特定方式排序</div><div class="line">list1.sort(key = len) # 按长度排序</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>使用 + 连接列表会有比较大的开支，因为这个过程中会创建一个新的列表，然后复制对象。因此，使用 <code>extend()</code> 是更明智的选择；</li>
  <li><code>insert</code> 和 <code>append</code> 相比会有更大的开支（时间/空间）；</li>
  <li>在列表中检查是否包含一个值会比在字典和集合中慢很多，因为前者需要进行线性扫描，而后者是基于哈希表的，所以只需要花费常数时间。</li>
</ul>
<h4 id="内建的-bisect-模块"><a href="#内建的-bisect-模块" class="headerlink" title="内建的 bisect 模块"></a>内建的 <code>bisect</code> 模块</h4>
<ul>
  <li>对一个排序好的列表进行二分查找或插入；</li>
  <li><code>bisect.bisect</code>找到元素在列表中的位置，<code>bisect.insort</code>将元素插入到相应位置。用法：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">import</span> bisect</div><div class="line">list1 = list(range(<span class="number">10</span>))</div><div class="line"><span class="comment">#找到 5 在 list1 中的位置，从 1 开始，因此 position = index + 1</span></div><div class="line">bisect.bisect(list1, <span class="number">5</span>)</div><div class="line"><span class="comment">#将 3.5 插入 list1 中合适位置</span></div><div class="line">bisect.insort(list1, <span class="number">3.5</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>注：<code>bisect</code> 模块中的函数并不会去检查列表是否排序好，因为这会花费很多时间。所以，对未排序好的列表使用这些函数也不会报错，但可能会返回不正确的结果。</strong></p>
<h3 id="针对序列类型的切片"><a href="#针对序列类型的切片" class="headerlink" title="针对序列类型的切片"></a>针对序列类型的切片</h3>
<p>序列类型包括 <code>str</code>、<code>array</code>、<code>tuple</code>、<code>list</code> 等。</p>
<p>用法：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">list1[start:stop]</div><div class="line"><span class="comment">#如果使用 step</span></div><div class="line">list1(start:stop:step)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>注：切片结果包含 <code>start</code> 索引，但不包含 <code>stop</code> 索引；<code>start/stop</code> 索引可以省略，如果省略，则默认为序列从开始到结束，如 <code>list1 == list1[:]</code> 。</strong></p>
<p><code>step</code> 的应用：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#取出奇数位置的元素</span></div><div class="line">list1[::<span class="number">2</span>]</div><div class="line"><span class="comment">#反转字符串</span></div><div class="line">str1[::<span class="number">-1</span>]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="字典（哈希映射）"><a href="#字典（哈希映射）" class="headerlink" title="字典（哈希映射）"></a>字典（哈希映射）</h3>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#创建字典</span></div><div class="line">dict1 = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>, <span class="number">2</span>: [<span class="number">3</span>,<span class="number">2</span>]&#125;</div><div class="line"><span class="comment">#从序列创建字典</span></div><div class="line">dict(zip(KeyList, ValueList))</div><div class="line"><span class="comment">#获取/设置/插入元素</span></div><div class="line">dict1[<span class="string">'key1'</span>]</div><div class="line">dict1[<span class="string">'key1'</span>] = <span class="string">'NewValue'</span></div><div class="line"><span class="comment">#get 提供默认值</span></div><div class="line">dict1.get(<span class="string">'key1'</span>, DefaultValue)</div><div class="line"><span class="comment">#检查键是否存在</span></div><div class="line"><span class="string">'key1'</span> <span class="keyword">in</span> dict1</div><div class="line"><span class="comment">#获取键列表</span></div><div class="line">dict1.keys()</div><div class="line"><span class="comment">#获取值列表</span></div><div class="line">dict1.values()</div><div class="line"><span class="comment">#更新值</span></div><div class="line">dict1.update(dict2)<span class="comment">#dict1 的值被 dict2 替换</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>如果键不存在，则会出现 <code>KeyError Exception</code> 。</li>
  <li>当键不存在时，如果 <code>get()</code>不提供默认值则会返回 <code>None</code> 。</li>
  <li>以相同的顺序返回键列表和值列表，但顺序不是特定的，又称极大可能非排序。</li>
</ul>
<h4 id="有效字典键类型"><a href="#有效字典键类型" class="headerlink" title="有效字典键类型"></a>有效字典键类型</h4>
<ul>
  <li>键必须是不可变的，比如标量类型(<code>int</code>、<code>float</code>、<code>string</code>)或者元组（元组中的所有对象也必须是不可变的）。</li>
  <li>这儿涉及的技术术语是 <code>hashability</code>。可以用函数 <code>hash()</code>来检查一个对象是否是可哈希的，比如 <code>hash(&#39;This is a string&#39;)</code> 会返回一个哈希值，而 <code>hash([1,2])</code> 则会报错（不可哈希）。</li>
</ul>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3>
<ul>
  <li>一个集合是一些无序且唯一的元素的聚集；</li>
  <li>你可以把它看成只有键的字典；</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#创建集合</span></div><div class="line">set([<span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>])</div><div class="line"><span class="comment">#or</span></div><div class="line">&#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">3</span>&#125;</div><div class="line"><span class="comment">#子集测试</span></div><div class="line">set1.issubset(set2)</div><div class="line"><span class="comment">#超集测试</span></div><div class="line">set1.issuperset(set2)</div><div class="line"><span class="comment">#测试两个集合中的元素是否完全相同</span></div><div class="line">set1 == set2</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4>
<ul>
  <li>并（又称或）：<code>set1 | set2</code></li>
  <li>交（又称与）：<code>set1 &amp; set2</code></li>
  <li>差：<code>set1 - set2</code></li>
  <li>对称差（又称异或）：<code>set1 ^ set2</code></li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2>
<p>Python 的函数参数传递是通过<strong>引用传递</strong>。</p>
<ul>
  <li>基本形式</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(posArg1, keywordArg1 = <span class="number">1</span>, ..)</span></span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>注</strong></p>
<ul>
  <li>关键字参数必须跟在位置参数的后面；</li>
  <li>默认情况下，Python 不会“延迟求值”，表达式的值会立刻求出来。</li>
</ul>
<h3 id="函数调用机制"><a href="#函数调用机制" class="headerlink" title="函数调用机制"></a>函数调用机制</h3>
<ul>
  <li>所有函数均位于模块内部作用域。见“模块”部分。</li>
  <li>在调用函数时，参数被打包成一个元组和一个字典，函数接收一个元组 <code>args</code> 和一个字典 <code>kwargs</code>，然后在函数内部解包。</li>
</ul>
<p>“函数是对象”的常见用法：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(ops = [str.strip, user_define_func, ..], ..)</span>:</span></div><div class="line">  <span class="keyword">for</span> function <span class="keyword">in</span> ops:</div><div class="line">    value = function(value)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3>
<ul>
  <li>如果函数末尾没有 <code>return</code> 语句，则不会返回任何东西。</li>
  <li>如果有多个返回值则通过一个元组来实现。</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">return</span> (value1, value2)</div><div class="line">value1, value2 = func1(..)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="匿名函数（又称-LAMBDA-函数）"><a href="#匿名函数（又称-LAMBDA-函数）" class="headerlink" title="匿名函数（又称 LAMBDA 函数）"></a>匿名函数（又称 LAMBDA 函数）</h3>
<ul>
  <li>什么是匿名函数？</li>
</ul>
<p>匿名函数是一个只包含一条语句的简单函数。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">lambda</span> x : x * <span class="number">2</span></div><div class="line"><span class="comment">#def func1(x) : return x * 2</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>匿名函数的应用：’curring’，又称利用已存在函数的部分参数来派生新的函数。</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">ma60 = <span class="keyword">lambda</span> x : pd.rolling_mean(x, <span class="number">60</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="一些有用的函数（针对数据结构）"><a href="#一些有用的函数（针对数据结构）" class="headerlink" title="一些有用的函数（针对数据结构）"></a>一些有用的函数（针对数据结构）</h3>
<ul>
  <li><code>enumerate()</code> 返回一个序列<code>(i, value)</code>元组，<code>i</code> 是当前 <code>item</code> 的索引。</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> enumerate(collection):</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>应用：创建一个序列中值与其在序列中的位置的字典映射（假设每一个值都是唯一的）。</p>
<ul>
  <li><code>sort()</code>可以从任意序列中返回一个排序好的序列。</li>
</ul>
<figure class="highlight">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sorted([2, 1, 3]) =&gt; [1, 2, 3]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>应用：</p>
<figure class="highlight">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sorted(set('abc bcd')) =&gt; [' ',</div><div class="line">'a', 'b', 'c', 'd']</div><div class="line"># 返回一个字符串排序后无重复的字母序列</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li><code>zip()</code>函数可以把许多列表、元组或其他序列的元素配对起来创建一系列的元组。</li>
</ul>
<figure class="highlight">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">zip(seq1, seq2) =&gt; [('seq1_1', 'seq2_1'), (..), ..]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ol>
  <li><code>zip()</code>可以接收任意数量的序列作为参数，但是产生的元素的数目取决于最短的序列。</li>
</ol>
<p>应用：多个序列同时迭代：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">for</span> i, (a, b) <span class="keyword">in</span> enumerate(zip(seq1, seq2)):</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ol>
  <li><code>unzip</code>：另一种思考方式是把一些行转化为一些列：</li>
</ol>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">seq1, seq2 = zip(zipOutput)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li><code>reversed()</code> 将一个序列的元素以逆序迭代。</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">list(reversed(range(<span class="number">10</span>)))</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong><code>reversed()</code> 会返回一个迭代器，<code>list()</code> 使之成为一个列表。</strong></p>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2>
<ul>
  <li>用于 <code>if-else</code> 条件中的操作符：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#检查两个变量是否是相同的对象</span></div><div class="line">var1 <span class="keyword">is</span> var2</div><div class="line"><span class="comment">#检查两个变量是否是不同的对象</span></div><div class="line">var1 <span class="keyword">is</span> <span class="keyword">not</span> var2</div><div class="line"><span class="comment">#检查两个变量的值是否相等</span></div><div class="line">var1 == var2</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>注：Python 中使用 <code>and</code>、<code>or</code>、<code>not</code> 来组合条件，而不是使用 <code>&amp;&amp;</code>、<code>||</code>、<code>!</code> 。</strong></p>
<ul>
  <li><code>for</code>循环的常见用法：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#可迭代对象（list、tuple）或迭代器</span></div><div class="line"><span class="keyword">for</span> element <span class="keyword">in</span> iterator:</div><div class="line"><span class="comment">#如果元素是可以解包的序列</span></div><div class="line"><span class="keyword">for</span> a, b, c <span class="keyword">in</span> iterator:</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li><code>pass</code>：无操作语句，在不需要进行任何操作的块中使用。</li>
  <li>三元表达式，又称简洁的 <code>if-else</code>，基本形式：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">value = true-expr <span class="keyword">if</span> condition <span class="keyword">else</span> false-expr</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>Python 中没有 <code>switch/case</code> 语句，请使用 <code>if/elif</code>。</li>
</ul>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2>
<ul>
  <li><strong>对象（object）</strong>是 Python 中所有类型的根。</li>
  <li>万物（数字、字符串、函数、类、模块等）皆为对象，每个对象均有一个类型（type）。对象变量是一个指向变量在内存中位置的指针。</li>
  <li>所有对象均为<strong>引用计数</strong>。</li>
</ul>
<figure class="highlight">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sys.getrefcount(5) =&gt; x</div><div class="line">a = 5, b = a</div><div class="line">#上式会在等号的右边创建一个对象的引用，因此 a 和 b 均指向 5</div><div class="line">sys.getrefcount(5)</div><div class="line">=&gt; x + 2</div><div class="line">del(a); sys.getrefcount(5) =&gt; x + 1</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>类的基本形式：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="comment"># 'self' 等价于 Java/C++ 中的 'this'</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></div><div class="line">    self.name = name</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">memberFunc1</span><span class="params">(self, arg1)</span>:</span></div><div class="line">      ..</div><div class="line"><span class="meta">  @staticmethod</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">classFunc2</span><span class="params">(arg1)</span>:</span></div><div class="line">    ..</div><div class="line">obj1 = MyObject(<span class="string">'name1'</span>)</div><div class="line">obj1.memberFunc1(<span class="string">'a'</span>)</div><div class="line">MyObject.classFunc2(<span class="string">'b'</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>有用的交互式工具：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">dir(variable1) <span class="comment">#列出对象的所有可用方法</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="常见字符串操作"><a href="#常见字符串操作" class="headerlink" title="常见字符串操作"></a>常见字符串操作</h2>
<figure class="highlight">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">#通过分隔符连接列表/元组</div><div class="line">', '.join([ 'v1', 'v2', 'v3']) =&gt; 'v1, v2, v3'</div><div class="line"></div><div class="line">#格式化字符串</div><div class="line">string1 = 'My name is &#123;0&#125;　&#123;name&#125;'</div><div class="line">newString1 = string1.format('Sean', name =　'Chen')</div><div class="line"></div><div class="line">#分裂字符串</div><div class="line">sep = '-';</div><div class="line">stringList1 =　string1.split(sep)</div><div class="line"></div><div class="line">#获取子串</div><div class="line">start = 1;</div><div class="line">string1[start:8]</div><div class="line"></div><div class="line">#补 '0' 向右对齐字符串</div><div class="line">month = '5';</div><div class="line">month.zfill(2) =&gt; '05'</div><div class="line">month = '12';</div><div class="line">month.zfill(2) =&gt; '12'</div><div class="line">month.zfill(3) =&gt; '012'</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2>
<ul>
  <li>基本形式：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">try</span>:</div><div class="line">  ..</div><div class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</div><div class="line">  <span class="keyword">print</span> e</div><div class="line"><span class="keyword">except</span> (TypeError, AnotherError):</div><div class="line">  ..</div><div class="line"><span class="keyword">except</span>:</div><div class="line">  ..</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">  .. <span class="comment"># 清理，比如 close db;</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>手动引发异常：</li>
</ul>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">raise</span> AssertionError <span class="comment"># 断言失败</span></div><div class="line"><span class="keyword">raise</span> SystemExit</div><div class="line"><span class="comment"># 请求程序退出</span></div><div class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">'错误信息 :..'</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h2 id="对列表、字典和元组的深入理解"><a href="#对列表、字典和元组的深入理解" class="headerlink" title="对列表、字典和元组的深入理解"></a>对列表、字典和元组的深入理解</h2>
<p>语法糖（syntactic sugar）会使代码变得更加易读易写。</p>
<h3 id="对列表的理解"><a href="#对列表的理解" class="headerlink" title="对列表的理解"></a>对列表的理解</h3>
<p>将一些元素通过一个简短的语句传入一个过滤器进行过滤和转化，然后可以组成一个新的列表。</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">#基本形式</span></div><div class="line">[expr <span class="keyword">for</span> val <span class="keyword">in</span> collection <span class="keyword">if</span> condition]</div><div class="line"><span class="comment">#ShortCut</span></div><div class="line">result = []</div><div class="line"><span class="keyword">for</span> val <span class="keyword">in</span> collection:</div><div class="line">  <span class="keyword">if</span> condition:</div><div class="line">    result.append(expr)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>可以省略过滤条件，只留下表达式。</p>
<h3 id="对字典的理解"><a href="#对字典的理解" class="headerlink" title="对字典的理解"></a>对字典的理解</h3>
<p>基本形式：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">&#123;key-expr : value-expr <span class="keyword">for</span> value <span class="keyword">in</span> collection <span class="keyword">if</span> condition&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h3 id="对集合的理解"><a href="#对集合的理解" class="headerlink" title="对集合的理解"></a>对集合的理解</h3>
<p>基本形式：和列表一样，只是应该使用 <code>()</code> 而不是 <code>[]</code> 。</p>
<h3 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h3>
<p>基本形式：</p>
<figure class="highlight python">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">[expr <span class="keyword">for</span> val <span class="keyword">in</span> collection <span class="keyword">for</span> innerVal <span class="keyword">in</span> val <span class="keyword">if</span> condition]</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本手册是 &lt;a href=&quot;http://datasciencefree.com/python.pdf&quot;&gt;Python cheat sheet&lt;/a&gt; 的中文翻译版。原作者：Arianne Colton and Sean Chen(data.scientist.info@gmail.com)。&lt;/p&gt;
&lt;p&gt;该手册同时位于 &lt;a href=&quot;https://github.com/ucasFL/python-cheat-sheet-Chinese-edition&quot;&gt;GitHub&lt;/a&gt; 上，可下载 &lt;a href=&quot;https://github.com/ucasFL/python-cheat-sheet-Chinese-edition/blob/master/python-cheat-sheet-zh-cn.pdf&quot;&gt;PDF 版&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://ucasfl.me/categories/Python/"/>
    
    
      <category term="Python cheat-sheet" scheme="http://ucasfl.me/tags/Python-cheat-sheet/"/>
    
  </entry>
  
  <entry>
    <title>关于 Linux 你可能不是非常了解的七件事</title>
    <link href="http://ucasfl.me/2017/10/06/Seven-things-you-may-not-know-so-far-about-Linux/"/>
    <id>http://ucasfl.me/2017/10/06/Seven-things-you-may-not-know-so-far-about-Linux/</id>
    <published>2017-10-06T04:51:31.000Z</published>
    <updated>2017-11-05T11:33:33.463Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i0.wp.com/opensourceforu.com/wp-content/uploads/2015/12/Linux-Kernel-sys-visual5.jpg?resize=750%2C563" alt="Hidden features of Linux"></p>
<p>使用 Linux 最酷的事情之一就是随着时间的推移，你可以不断获得新的知识。每天，你都可能会遇到一个新的实用工具，或者只是一个不太熟悉的奇技淫巧，但是却非常有用。这些零碎的东西并不总是能够改变生活，但是却是专业知识的基础。</p>
<p>即使是专家，也不可能事事皆知。无论你有多少经验，可能总会有更多的东西需要你去学习。所以，在这儿我列出了七件关于 Linux 你可能不知道的事情。</p>
<a id="more"></a>
<h3 id="一个查找命令历史的交互模式"><a href="#一个查找命令历史的交互模式" class="headerlink" title="一个查找命令历史的交互模式"></a>一个查找命令历史的交互模式</h3>
<p>你可能对 <code>history</code> 命令非常熟悉，它会读取 bash 历史，然后以编号列表的方式输出到标准输出（<code>stdout</code>）。然而，如果你在 <code>curl</code> 命令的海洋里寻找一个特定的链接（URL），那么这个列表并不总是那么容易阅读的。</p>
<p>你还可以有另一个选择，Linux 有一个交互式的反向搜索可以帮助你解决这个问题。你可以通过快捷键 <code>ctrl+r</code>启动交互模式，然后进入一个交互提示中，它将会根据你提供的字符串来向后搜索 bash 历史，你可以通过再次按下 <code>ctrl+r</code> 向后搜索更老的命令，或者按下 <code>ctrl+s</code> 向前搜索。</p>
<p>注意，<code>ctrl+s</code> 有时会与 XON/XOFF 流控制冲突，即 XON/XOFF 流控制也会使用该快捷键。你可以通过运行 <code>stty -ixon</code> 命令来禁用该快捷键。在你的个人电脑上，这通常是有用的，但是在禁用前，确保你不需要 XON/XOFF 。</p>
<h3 id="Cron-不是安排任务的唯一方式"><a href="#Cron-不是安排任务的唯一方式" class="headerlink" title="Cron 不是安排任务的唯一方式"></a>Cron 不是安排任务的唯一方式</h3>
<p>Cron 任务对于任何水平的系统管理员，无论是毫无经验的初学者，还是经验丰富的专家来说，都是非常有用的。但是，如果你需要安排一个一次性的任务，那么 <code>at</code> 命令为你提供了一个快捷的方式来创建任务，从而你不需要接触 crontab 。</p>
<p><code>at</code> 命令的运行方式是在后面紧跟着你想要运行任务的运行时间。时间是灵活的，因为它支持许多时间格式。包括下面这些例子：</p>
<figure class="highlight ada">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">at</span> <span class="number">12</span>:<span class="number">00</span> PM September <span class="number">30</span> <span class="number">2017</span></div><div class="line"><span class="keyword">at</span> now + <span class="number">1</span> hour</div><div class="line"><span class="keyword">at</span> <span class="number">9</span>:<span class="number">00</span> AM tomorrow</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>当你以带参数的方式输入 <code>at</code> 命令以后，将会提示你该命令将在你的 Linux 系统上运行。这可能是一个备份脚本，一套维护任务，或者甚至是一个普通的 bash 命令。如果要结束任务，可以按 <code>ctrl+d</code> 。</p>
<p>另外，你可以使用 <code>atq</code> 命令查看当前用户的所有任务，或者使用 <code>sudo atq</code> 查看所有用户的任务。它将会展示出所有排定好的任务，并且每个任务都伴有一个 ID 。如果你想取消一个排定好的任务，可以使用 <code>atrm</code> 命令，并且以任务 ID 作为参数。</p>
<h3 id="你可以按照功能搜索命令，而不仅仅是通过名字"><a href="#你可以按照功能搜索命令，而不仅仅是通过名字" class="headerlink" title="你可以按照功能搜索命令，而不仅仅是通过名字"></a>你可以按照功能搜索命令，而不仅仅是通过名字</h3>
<p>记住命令的名字非常困难，特别是对于初学者来说。幸运的是，Linux 附带了一个通过名字和描述来搜索 man 页面的工具。</p>
<p>下次，如果你没有记住你想要使用的工具的名称，你可以尝试使用 <code>apropos</code> 命令加上你想要干的事情的描述。比如，<code>apropos build filesystem</code> 将会返回一系列名字和描述包括了 “build” 和 “filesystem” 单词的工具。</p>
<p><code>apropos</code> 命令接受一个或多个字符串作为参数，但同时它也有其他参数，比如你可以使用 <code>-r</code> 参数，从而通过正则表达式来搜索。</p>
<h3 id="一个允许你来管理系统版本的替代系统"><a href="#一个允许你来管理系统版本的替代系统" class="headerlink" title="一个允许你来管理系统版本的替代系统"></a>一个允许你来管理系统版本的替代系统</h3>
<p>如果你曾进行过软件开发，你就会明白跨项目管理不同版本的语言的支持的重要性。许多 Linux 发行版都有工具可以来处理不同的内建版本。</p>
<p>可执行文件比如 <code>java</code> 往往符号链接到目录 <code>/etc/alternatives</code> 下。反过来，该目录会将符号链接存储为二进制文件并提供一个管理这些链接的接口。Java 可能是替代系统最常管理的语言，但是，经过一些配置，它也可以作为其他应用程序替代品，比如 NVM 和 RVM （NVM 和 RVM 分别是 NodeJS 和 Ruby 的版本管理器）。</p>
<p>在基于 Debian 的系统中，你可以使用 <code>update-alternatives</code> 命令创建和管理这些链接。在 CentOS 中，这个工具就叫做 <code>alternatives</code> 。通过更改你的 alternatives 文件中的链接，你便可以安装一个语言的多个版本，并且在不同的情况下使用不同的二进制。这个替代系统也提供了对任何你可能在命令行运行的程序的支持。</p>
<h3 id="shred-命令是更加安全的删除文件方式"><a href="#shred-命令是更加安全的删除文件方式" class="headerlink" title="shred 命令是更加安全的删除文件方式"></a><code>shred</code> 命令是更加安全的删除文件方式</h3>
<p>我们大多数时候总是使用 <code>rm</code> 命令来删除文件。但是文件去哪儿了呢？真相是 <code>rm</code> 命令所做的事情并不是像你所想像的那样，它仅仅删除了文件系统和硬盘上的数据的硬链接。硬盘上的数据依旧存在，直到被另一个应用重写覆盖。对于非常敏感的数据来说，这会带来一个很大的安全隐患。</p>
<p><code>shred</code> 命令是 <code>rm</code> 命令的升级版。当你使用 <code>shred</code> 命令删除一个文件之后，文件中的数据会被多次随机覆写。甚至有一个选项可以在随机覆写之后对所有的数据进行清零。</p>
<p>如果你想安全的删除一个文件并且以零覆盖，那么可以使用下面的命令：</p>
<p><code>shred -u -z [file name]</code></p>
<p>同时，你也可以使用 <code>-n</code> 选项和一个数字作为参数，从而指定在随机覆盖数据的时候迭代多少次。</p>
<h3 id="通过自动更正来避免输入很长的无效文件路径"><a href="#通过自动更正来避免输入很长的无效文件路径" class="headerlink" title="通过自动更正来避免输入很长的无效文件路径"></a>通过自动更正来避免输入很长的无效文件路径</h3>
<p>有多少次，你输入一个文件的绝对路径，然而却看到“没有该文件或目录”的消息。任何人都会明白输入一个很长的字符串的痛苦。幸运的是，有一个很简单的解决办法。</p>
<p>内建的 <code>shopt</code> 命令允许你设置不同的选项来改变 shell 的行为。设置 <code>cdspell</code> 选项是避免输入文件路径时一个字母出错的头痛的一个简单方式。你可以通过运行 <code>shopt -s cdspell</code> 命令来启用该选项。启用该选项后，当你想要切换目录时，会自动更正为最匹配的目录。</p>
<p>Shell 选项是节省时间的一个好方法（更不用说减少麻烦），此外还有许许多多的其他选项。如果想查看你的系统中所有选项的完整列表，可以运行不带参数的 <code>shopt</code> 命令。需要注意的是，这是 bash 的特性，如果你运行 zsh 或者其他可供选择的 shell，可能无法使用。</p>
<h3 id="通过子-shell-返回到当前目录"><a href="#通过子-shell-返回到当前目录" class="headerlink" title="通过子 shell 返回到当前目录"></a>通过子 shell 返回到当前目录</h3>
<p>如果你曾经配置过一个比较复杂的系统，那么你可能会发现你需要频繁的更换目录，从而很难跟踪你所在的位置。如果在运行完一个命令后自动返回到当前位置，不是很好吗？</p>
<p>Linux 系统实际上提供了一个解决该问题的方法，并且非常简单。如果你想通过 <code>cd</code> 命令进入另一个目录完成一些任务，然后再返回当前工作目录，那么你可以将命令置于括号中。你可以在你的 Linux 系统上尝试下面这个命令。记住你当前的工作目录，然后运行：</p>
<figure class="highlight lisp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">(<span class="name">cd</span> /etc <span class="symbol">&amp;&amp;</span> ls -a)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>该命令会输出 <code>/etc</code> 目录的内容。现在，检查你的当前工作目录。它和执行该命令前的目录一样，而不是 <code>/etc</code> 目录。</p>
<p>它是如何工作的呢？运行一个括号中的命令会创建一个子 shell 或一个当前 shell 进程的复刻副本。该子 shell 可以访问所有的父变量，反之则不行。所以请记住，你是在运行一个非常复杂的单行命令。</p>
<p>在并行处理中经常使用子 shell ，但是在命令行中，它也能为你带来同样的力量，从而使你在浏览文件系统时更加容易。</p>
<hr>
<p>via: <a href="http://opensourceforu.com/2017/09/top-7-things-linux-may-not-known-far/" target="_blank" rel="external">http://opensourceforu.com/2017/09/top-7-things-linux-may-not-known-far/</a></p>
<p>作者：<a href="http://opensourceforu.com/author/phil-zona/" target="_blank" rel="external">PHIL ZONA</a><br>译者：<a href="https://github.com/ucasFL" target="_blank" rel="external">ucasFL</a><br>校对：<a href="https://github.com/wxy" target="_blank" rel="external">wxy</a></p>
<p>本文由 <a href="https://github.com/LCTT/TranslateProject" target="_blank" rel="external">LCTT</a> 原创编译，<a href="https://linux.cn/" target="_blank" rel="external">Linux中国</a> 荣誉推出</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i0.wp.com/opensourceforu.com/wp-content/uploads/2015/12/Linux-Kernel-sys-visual5.jpg?resize=750%2C563&quot; alt=&quot;Hidden features of Linux&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用 Linux 最酷的事情之一就是随着时间的推移，你可以不断获得新的知识。每天，你都可能会遇到一个新的实用工具，或者只是一个不太熟悉的奇技淫巧，但是却非常有用。这些零碎的东西并不总是能够改变生活，但是却是专业知识的基础。&lt;/p&gt;
&lt;p&gt;即使是专家，也不可能事事皆知。无论你有多少经验，可能总会有更多的东西需要你去学习。所以，在这儿我列出了七件关于 Linux 你可能不知道的事情。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://ucasfl.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下代理服务器失败无法上网的解决办法</title>
    <link href="http://ucasfl.me/2017/09/25/Setting-Proxy-For-google-chrome-in-Ubuntu/"/>
    <id>http://ucasfl.me/2017/09/25/Setting-Proxy-For-google-chrome-in-Ubuntu/</id>
    <published>2017-09-25T00:56:12.000Z</published>
    <updated>2017-11-05T11:33:26.827Z</updated>
    
    <content type="html"><![CDATA[<p>在 Ubuntu 上装了一个 Xfce 桌面，前段时间一直在使用 Xfce 桌面，今天切换回 GNOME 桌面以后，发现 google-chrome 无法上网了，说是代理服务器有问题，按照它的提示在设置中进行设置，结果打开代理服务器设置时，又出现下面的信息：</p>
<figure class="highlight livecodeserver">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">When running Google Chrome under <span class="keyword">a</span> supported desktop environment, <span class="keyword">the</span> <span class="keyword">system</span> proxy settings will be used. However, either your <span class="keyword">system</span> is <span class="keyword">not</span> supported <span class="keyword">or</span> there was <span class="keyword">a</span> problem launching your <span class="keyword">system</span> configuration.</div><div class="line"></div><div class="line">But you can still configure via <span class="keyword">the</span> <span class="keyword">command</span> <span class="title">line</span>. <span class="title">Please</span> <span class="title">see</span> <span class="title">man</span> <span class="title">google-chrome-stable</span> <span class="title">for</span> <span class="title">more</span> <span class="title">information</span> <span class="title">on</span> <span class="title">flags</span> <span class="title">and</span> <span class="title">environment</span> <span class="title">variables</span>.</div></pre>
      </td>
    </tr>
  </table>
</figure>
<a id="more"></a>
<p>因此，无法在浏览器中进行设置。</p>
<p>后来找到了解决办法：直接对桌面图标进行设置。</p>
<p>首先，在 root 下用 vim 编辑器打开 <code>/usr/share/applications/google-chrome.destop</code>，或者直接<code>sudo vim /usr/share/applications/google-chrome.destop</code></p>
<p>打开后显示下面的内容：</p>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="section">[Desktop Entry]</span></div><div class="line"><span class="attr">Version</span>=<span class="number">1.0</span></div><div class="line"><span class="attr">Name</span>=Google Chrome</div><div class="line"><span class="attr">GenericName</span>=Web Browser</div><div class="line"><span class="attr">Comment</span>=Access the Internet</div><div class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable %U</div><div class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></div><div class="line"><span class="attr">Icon</span>=google-chrome</div><div class="line"><span class="attr">Type</span>=Application</div><div class="line"><span class="attr">Categories</span>=Network;WebBrowser;</div><div class="line"><span class="attr">MimeType</span>=text/html;text/xml;application/xhtml_xml;image/webp;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;</div><div class="line"><span class="attr">Actions</span>=NewWindow;NewPrivateWindow;</div><div class="line"><span class="section"></span></div><div class="line">[Desktop Action NewWindow]</div><div class="line"><span class="attr">Name</span>=New Window</div><div class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable </div><div class="line"><span class="section"></span></div><div class="line">[Desktop Action NewPrivateWindow]</div><div class="line"><span class="attr">Name</span>=New Incognito Window</div><div class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable --incognito</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>在第六行的后面加上<code>--proxy-auto-detect</code>，变为如下：</p>
<figure class="highlight ini">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="section">[Desktop Entry]</span></div><div class="line"><span class="attr">Version</span>=<span class="number">1.0</span></div><div class="line"><span class="attr">Name</span>=Google Chrome</div><div class="line"><span class="attr">GenericName</span>=Web Browser</div><div class="line"><span class="attr">Comment</span>=Access the Internet</div><div class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable %U --proxy-auto-detect</div><div class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></div><div class="line"><span class="attr">Icon</span>=google-chrome</div><div class="line"><span class="attr">Type</span>=Application</div><div class="line"><span class="attr">Categories</span>=Network;WebBrowser;</div><div class="line"><span class="attr">MimeType</span>=text/html;text/xml;application/xhtml_xml;image/webp;x-scheme-handler/http;x-scheme-handler/https;x-scheme-handler/ftp;</div><div class="line"><span class="attr">Actions</span>=NewWindow;NewPrivateWindow;</div><div class="line"><span class="section"></span></div><div class="line">[Desktop Action NewWindow]</div><div class="line"><span class="attr">Name</span>=New Window</div><div class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable </div><div class="line"><span class="section"></span></div><div class="line">[Desktop Action NewPrivateWindow]</div><div class="line"><span class="attr">Name</span>=New Incognito Window</div><div class="line"><span class="attr">Exec</span>=/usr/bin/google-chrome-stable --incognito</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>保存退出，再次打开 google-chrome，便可以正常上网了。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Ubuntu 上装了一个 Xfce 桌面，前段时间一直在使用 Xfce 桌面，今天切换回 GNOME 桌面以后，发现 google-chrome 无法上网了，说是代理服务器有问题，按照它的提示在设置中进行设置，结果打开代理服务器设置时，又出现下面的信息：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;When running Google Chrome under &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; supported desktop environment, &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;system&lt;/span&gt; proxy settings will be used. However, either your &lt;span class=&quot;keyword&quot;&gt;system&lt;/span&gt; is &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; supported &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; there was &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; problem launching your &lt;span class=&quot;keyword&quot;&gt;system&lt;/span&gt; configuration.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;But you can still configure via &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;line&lt;/span&gt;. &lt;span class=&quot;title&quot;&gt;Please&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;google-chrome-stable&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;more&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;information&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;variables&lt;/span&gt;.&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
    
    </summary>
    
      <category term="Browser" scheme="http://ucasfl.me/categories/Browser/"/>
    
    
      <category term="Google-chrome proxy" scheme="http://ucasfl.me/tags/Google-chrome-proxy/"/>
    
  </entry>
  
  <entry>
    <title>Linux 文件系统概览</title>
    <link href="http://ucasfl.me/2017/09/23/Introduction-to-Linux-FileSystem/"/>
    <id>http://ucasfl.me/2017/09/23/Introduction-to-Linux-FileSystem/</id>
    <published>2017-09-23T04:48:42.000Z</published>
    <updated>2017-11-06T08:53:19.531Z</updated>
    
    <content type="html"><![CDATA[<p>本文旨在高屋建瓴地来讨论 Linux 文件系统概念，而不是对某种特定的文件系统，比如 EXT4 是如何工作的进行具体的描述。另外，本文也不是一个文件系统命令的教程。</p>
<a id="more"></a>
<p>每台通用计算机都需要将各种数据存储在硬盘驱动器（HDD）或其他类似设备上，比如 USB 存储器。这样做有两个原因。首先，当计算机关闭以后，内存（RAM）会失去存于它里面的内容。尽管存在非易失类型的 RAM，在计算机断电以后还能把数据存储下来（比如采用 USB 闪存和固态硬盘的闪存），但是，闪存和标准的、易失性的 RAM，比如 DDR3 以及其他相似类型的 RAM 相比，要贵很多。</p>
<p>数据需要存储在硬盘驱动上的另一个原因是，即使是标准的 RAM 也要比普通硬盘贵得多。尽管 RAM 和硬盘的价格都在迅速下降，但是 RAM 的价格依旧在以字节为单位来计算。让我们进行一个以字节为单位的快速计算：基于 16 GB 大的 RAM 的价格和 2 TB 大的硬盘驱动的价格。计算显示 RAM 的价格大约比硬盘驱动贵 71 倍。今天，一个典型的 RAM 的价格大约是 0.000000004373750 美元/每字节。</p>
<p>直观的展示一下在很久以前 RAM 的价格，在计算机发展的非常早的时期，其中一种类型的 RAM 是基于在 CRT 屏幕上的点。这种 RAM 非常昂贵，大约 1 美元/每字节。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3>
<p>你可能听过其他人以各种不同和令人迷惑的方式谈论过文件系统。文件系统这个单词本身有多重含义，你需要从一个讨论或文件的上下文中理解它的正确含义。</p>
<p>我将根据我所观察到的在不同情况下使用“文件系统”这个词来定义它的不同含义。注意，尽管我试图遵循标准的“官方”含义，但是我打算基于它的不同用法来定义这个术语（如下）。这就是说我将在本文的后续章节中进行更详细的探讨。</p>
<ol>
  <li>始于顶层 root（/）目录的整个 Linux 目录结构。</li>
  <li>特定类型的数据存储格式，比如 EXT3、EXT4、BTRFS 以及 XFS 等等。Linux 支持近百种类型的文件系统，包括一些非常老的以及一些最新的。每一种文件系统类型都使用它自己独特的元数据结构来定义数据是如何存储和访问的。</li>
  <li>用特定类型的文件系统格式化后的分区或逻辑卷，可以挂载到 Linux 文件系统的指定挂载点上。</li>
</ol>
<h3 id="文件系统的基本功能"><a href="#文件系统的基本功能" class="headerlink" title="文件系统的基本功能"></a>文件系统的基本功能</h3>
<p>磁盘存储是文件系统必须的功能，它与之伴生的有一些有趣而且不可或缺的细节。很明显，文件系统是用来为非易失数据的存储提供空间，这是它的基本功能。然而，它还有许多从需求出发的重要功能。</p>
<p>所有文件系统都需要提供一个名字空间，这是一种命名和组织方法。它定义了文件应该如何命名、文件名的最大长度，以及所有可用字符集中可用于文件名中字符集子集。它也定义了一个磁盘上数据的逻辑结构，比如使用目录来组织文件而不是把所有文件聚集成一个单一的、巨大的文件混合体。</p>
<p>定义名字空间以后，元数据结构是为该名字空间提供逻辑基础所必须的。这包括所需数据结构要能够支持分层目录结构，同时能够通过结构来确定硬盘空间中的块是已用的或可用的，支持修改文件或目录的名字，提供关于文件大小、创建时间、最后访问或修改时间等信息，以及位置或数据所属的文件在磁盘空间中的位置。其他的元数据用来存储关于磁盘细分的高级信息，比如逻辑卷和分区。这种更高层次的元数据以及它所代表的结构包含描述文件系统存储在驱动器或分区中的信息，但与文件系统元数据无关，与之独立。</p>
<p>文件系统也需要一个应用程序接口（API），从而提供了对文件系统对象，比如文件和目录进行操作的系统功能调用的访问。API 也提供了诸如创建、移动和删除文件的功能。它也提供了算法来确定某些信息，比如文件存于文件系统中的位置。这样的算法可以用来解释诸如磁盘速度和最小化磁盘碎片等术语。</p>
<p>现代文件系统还提供一个安全模型，这是一个定义文件和目录的访问权限的方案。Linux 文件系统安全模型确保用户只能访问自己的文件，而不能访问其他用户的文件或操作系统本身。</p>
<p>最后一块组成部分是实现这些所有功能所需要的软件。Linux 使用两层软件实现的方式来提高系统和程序员的效率。</p>
<p><img src="https://opensource.com/sites/default/files/filesystem_diagram.png" alt=""></p>
<p><em>图片 1：Linux 两层文件系统软件实现。</em></p>
<p>这两层中的第一层是 Linux 虚拟文件系统。虚拟文件系统提供了内核和开发者访问所有类型文件系统的的单一命令集。虚拟文件系统软件通过调用特殊设备驱动来和不同类型的文件系统进行交互。特定文件系统的设备驱动是第二层实现。设备驱动程序将文件系统命令的标准集解释为在分区或逻辑卷上的特定类型文件系统命令。</p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3>
<p>作为一个通常来说非常有条理的处女座，我喜欢将东西存储在更小的、有组织的小容器中，而不是存于同一个大容器中。目录的使用使我能够存储文件并在我想要查看这些文件的时候也能够找到它们。目录也被称为文件夹，之所以被称为文件夹，是因为其中的文件被类比存放于物理桌面上。</p>
<p>在 Linux 和其他许多操作系统中，目录可以被组织成树状的分层结构。在 <a href="http://www.pathname.com/fhs/" target="_blank" rel="external">Linux 文件系统层次标准</a>中定义了 Linux 的目录结构（LCTT 译注：可参阅<a href="https://linux.cn/article-6132-1.html" target="_blank" rel="external">这篇</a>）。当通过目录引用来访问目录时，更深层目录名字是通过正斜杠（/）来连接，从而形成一个序列，比如 <code>/var/log</code> 和 <code>/var/spool/mail</code>  。这些被称为路径。</p>
<p>下表提供了标准的、众所周知的、预定义的顶层 Linux 目录及其用途的简要清单。</p>
<table>
  <thead>
    <tr>
      <th>目录</th>
      <th>描述</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>/ (root 文件系统)</strong></td>
      <td>root 文件系统是文件系统的顶级目录。它必须包含在挂载其它文件系统前需要用来启动 Linux 系统的全部文件。它必须包含需要用来启动剩余文件系统的全部可执行文件和库。文件系统启动以后，所有其他文件系统作为 root 文件系统的子目录挂载到标准的、预定义好的挂载点上。</td>
    </tr>
    <tr>
      <td><strong>/bin</strong></td>
      <td><code>/bin</code> 目录包含用户的可执行文件。</td>
    </tr>
    <tr>
      <td>/boot</td>
      <td>包含启动 Linux 系统所需要的静态引导程序和内核可执行文件以及配置文件。</td>
    </tr>
    <tr>
      <td><strong>/dev</strong></td>
      <td>该目录包含每一个连接到系统的硬件设备的设备文件。这些文件不是设备驱动，而是代表计算机上的每一个计算机能够访问的设备。</td>
    </tr>
    <tr>
      <td><strong>/etc</strong></td>
      <td>包含主机计算机的本地系统配置文件。</td>
    </tr>
    <tr>
      <td>/home</td>
      <td>主目录存储用户文件，每一个用户都有一个位于 <code>/home</code> 目录中的子目录（作为其主目录）。</td>
    </tr>
    <tr>
      <td><strong>/lib</strong></td>
      <td>包含启动系统所需要的共享库文件。</td>
    </tr>
    <tr>
      <td>/media</td>
      <td>一个挂载外部可移动设备的地方，比如主机可能连接了一个 USB 驱动器。</td>
    </tr>
    <tr>
      <td>/mnt</td>
      <td>一个普通文件系统的临时挂载点（如不可移动的介质），当管理员对一个文件系统进行修复或在其上工作时可以使用。</td>
    </tr>
    <tr>
      <td>/opt</td>
      <td>可选文件，比如供应商提供的应用程序应该安装在这儿。</td>
    </tr>
    <tr>
      <td><strong>/root</strong></td>
      <td>这不是 root（<code>/</code>）文件系统。它是 root 用户的主目录。</td>
    </tr>
    <tr>
      <td><strong>/sbin</strong></td>
      <td>系统二进制文件。这些是用于系统管理的可执行文件。</td>
    </tr>
    <tr>
      <td>/tmp</td>
      <td>临时目录。被操作系统和许多程序用来存储临时文件。用户也可能临时在这儿存储文件。注意，存储在这儿的文件可能在任何时候在没有通知的情况下被删除。</td>
    </tr>
    <tr>
      <td>/usr</td>
      <td>该目录里面包含可共享的、只读的文件，包括可执行二进制文件和库、man 文件以及其他类型的文档。</td>
    </tr>
    <tr>
      <td>/var</td>
      <td>可变数据文件存储在这儿。这些文件包括日志文件、MySQL 和其他数据库的文件、Web 服务器的数据文件、邮件以及更多。</td>
    </tr>
  </tbody>
</table>
<p><em>表 1：Linux 文件系统层次结构的顶层</em></p>
<p>这些目录以及它们的子目录如表 1 所示，在所有子目录中，粗体的目录组成了 root 文件系统的必需部分。也就是说，它们不能创建为一个分离的文件系统并且在开机时进行挂载。这是因为它们（特别是它们包含的内容）必须在系统启动的时候出现，从而系统才能正确启动。</p>
<p><code>/media</code> 目录和 <code>/mnt</code> 目录是 root 文件系统的一部分，但是它们从来不包含任何数据，因为它们只是一个临时挂载点。</p>
<p>表 1 中剩下的非粗体的目录不需要在系统启动过程中出现，但会在之后挂载到 root 文件系统上，在开机阶段，它们为主机进行准备，从而执行有用的工作。</p>
<p>请参考官方 <a href="http://www.pathname.com/fhs/" target="_blank" rel="external">Linux 文件系统层次标准</a>（FHS）网页来了解这些每一个目录以及它们的子目录的更多细节。维基百科上也有关于 <a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard" target="_blank" rel="external">FHS</a> 的一个很好的介绍。应该尽可能的遵循这些标准，从而确保操作和功能的一致性。无论在主机上使用什么类型的文件系统，该层次目录结构都是相同的。</p>
<h3 id="Linux-统一目录结构"><a href="#Linux-统一目录结构" class="headerlink" title="Linux 统一目录结构"></a>Linux 统一目录结构</h3>
<p>在一些非 Linux 操作系统的个人电脑上，如果有多个物理硬盘驱动器或多个分区，每一个硬盘或分区都会分配一个驱动器号。知道文件或程序位于哪一个硬盘驱动器上是很有必要的，比如 <code>C:</code> 或 <code>D:</code> 。然后，你可以在命令中使用驱动器号，以 <code>D:</code> 为例，为了进入 <code>D:</code> 驱动器，你可以使用 <code>cd</code> 命令来更改工作目录为正确的目录，从而定位需要的文件。每一个硬盘驱动器都有自己单独的、完整的目录树。</p>
<p>Linux 文件系统将所有物理硬盘驱动器和分区统一为一个目录结构。它们均从顶层 root 目录（<code>/</code>）开始。所有其它目录以及它们的子目录均位于单一的 Linux 根目录下。这意味着只有一棵目录树来搜索文件和程序。</p>
<p>因为只有一个文件系统，所以 <code>/home</code>、<code>/tmp</code>、<code>/var</code>、<code>/opt</code> 或 <code>/usr</code> 能够创建在和 root（<code>/</code>）文件系统不同的物理硬盘驱动器、分区或逻辑分区上，然后挂载到一个挂载点（目录）上，从而作为 root 文件系统树的一部分。甚至可移动驱动器，比如 USB 驱动器或一个外接的 USB 或 ESATA 硬盘驱动器均可以挂载到 root 文件系统上，成为目录树不可或缺的部分。</p>
<p>当从 Linux 发行版的一个版本升级到另一个版本或从一个发行版更改到另一个发行版的时候，就会很清楚地看到这样创建到不同分区的好处。通常情况下，除了任何像 Fedora 中的 <code>dnf-upgrade</code> 之类的升级工具，会明智地在升级过程中偶尔重新格式化包含操作系统的硬盘驱动来删除那些长期积累的垃圾。如果 <code>/home</code> 目录是 root 文件系统的一部分（位于同一个硬盘驱动器），那么它也会被格式化，然后需要通过之前的备份恢复。如果 /home 目录作为一个分离的文件系统，那么安装程序将会识别到，并跳过它的格式化。对于存储数据库、邮箱、网页和其它可变的用户以及系统数据的
  <code>/var</code> 目录也是这样的。</p>
<p>将 Linux 系统目录树的某些部分作为一个分离的文件系统还有一些其他原因。比如，在很久以前，我还不知道将所有需要的 Linux 目录均作为 root（<code>/</code>）文件系统的一部分可能存在的问题，于是，一些非常大的文件填满了 <code>/home</code> 目录。因为 <code>/home</code> 目录和 <code>/tmp</code> 目录均不是分离的文件系统，而是 root 文件系统的简单子目录，整个 root 文件系统就被填满了。于是就不再有剩余空间可以让操作系统用来存储临时文件或扩展已存在数据文件。首先，应用程序开始抱怨没有空间来保存文件，然后，操作系统也开始异常行动。启动到单用户模式，并清除了
  <code>/home</code> 目录中的多余文件之后，终于又能够重新工作了。然后，我使用非常标准的多重文件系统设置来重新安装 Linux 系统，从而避免了系统崩溃的再次发生。</p>
<p>我曾经遇到一个情况，Linux 主机还在运行，但是却不允许用户通过 GUI 桌面登录。我可以通过使用<a href="https://en.wikipedia.org/wiki/Virtual_console" target="_blank" rel="external">虚拟控制台</a>之一，通过命令行界面（CLI）本地登录，然后远程使用 SSH 。问题的原因是因为 <code>/tmp</code> 文件系统满了，因此 GUI 桌面登录时所需要的一些临时文件不能被创建。因为命令行界面登录不需要在 <code>/tmp</code> 目录中创建文件，所以无可用空间并不会阻止我使用命令行界面来登录。在这种情况下，<code>/tmp</code>  目录是一个分离的文件系统，在 <code>/tmp</code> 所位于的逻辑卷上还有大量的可用空间。我简单地<a href="https://opensource.com/business/16/9/linux-users-guide-lvm" target="_blank" rel="external">扩展了 /tmp 逻辑卷</a>的容量到能够容纳主机所需要的临时文件，于是问题便解决了。注意，这个解决方法不需要重启，当 <code>/tmp</code> 文件系统扩大以后，用户就可以登录到桌面了。</p>
<p>当我在一家很大的科技公司当实验室管理员的时候，遇到过另外一个故障。开发者将一个应用程序安装到了一个错误的位置（<code>/var</code>）。结果该应用程序崩溃了，因为 <code>/var</code> 文件系统满了，由于缺乏空间，存储于 <code>/var/log</code> 中的日志文件无法附加新的日志消息。然而，系统仍然在运行，因为 root 文件系统和 <code>/tmp</code> 文件系统还没有被填满。删除了该应用程序并重新安装在 <code>/opt</code> 文件系统后，问题便解决了。</p>
<h3 id="文件系统类型"><a href="#文件系统类型" class="headerlink" title="文件系统类型"></a>文件系统类型</h3>
<p>Linux 系统支持大约 100 种分区类型的读取，但是只能对很少的一些进行创建和写操作。但是，可以挂载不同类型的文件系统在同一个 root 文件系统上，并且是很常见的。在这样的背景下，我们所说的文件系统一词是指在硬盘驱动器或逻辑卷上的一个分区中存储和管理用户数据所需要的结构和元数据。能够被 Linux 系统的 <code>fdisk</code> 命令识别的文件系统类型的完整列表<a href="https://www.win.tue.nl/~aeb/partitions/partition_types-1.html" target="_blank" rel="external">在此</a>，你可以感受一下
  Linux 系统对许多类型的系统的高度兼容性。David Both 居住在美国北卡罗纳州的首府罗利，是一个 Linux 开源贡献者。他已经从事 IT 行业 40 余年，在 IBM 教授 OS/2 20 余年。1981 年，他在 IBM 开发了第一个关于最初的 IBM 个人电脑的培训课程。他也曾在 Red Hat 教授 RHCE 课程，也曾供职于 MCI worldcom，Cico 以及北卡罗纳州等。他已经为 Linux 开源社区工作近 20 年。</p>
<p>Linux 支持读取这么多类型的分区系统的主要目的是为了提高兼容性，从而至少能够与一些其他计算机系统的文件系统进行交互。下面列出了在 Fedora 中创建一个新的文件系统时的所有可选类型：</p>
<ul>
  <li>btrfs</li>
  <li><strong>cramfs</strong></li>
  <li><strong>ext2</strong></li>
  <li><strong>ext3</strong></li>
  <li><strong>ext4</strong></li>
  <li>fat</li>
  <li>gfs2</li>
  <li>hfsplus</li>
  <li>minix</li>
  <li><strong>msdos</strong></li>
  <li>ntfs</li>
  <li>reiserfs</li>
  <li><strong>vfat</strong></li>
  <li>xfs</li>
</ul>
<p>其他发行版支持创建的文件系统类型不同。比如，CentOS 6 只支持创建上表中标为黑体的文件系统类型。</p>
<h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3>
<p>在 Linux 系统上“<ruby>挂载<rt>mount</rt></ruby>”文件系统的术语是指在计算机发展的早期，磁带或可移动的磁盘组需要需要物理地挂载到一个合适的驱动器设备上。当通过物理的方式放置到驱动器上以后，操作系统会逻辑地挂载位于磁盘上的文件系统，从而操作系统、应用程序和用户才能够访问文件系统中的内容。</p>
<p>一个挂载点简单的来说就是一个目录，就像任何其它目录一样，是作为 root 文件系统的一部分创建的。所以，比如，home 文件系统是挂载在目录 <code>/home</code> 下。文件系统可以被挂载到其他非 root 文件系统的挂载点上，但是这并不常见。</p>
<p>在 Linux 系统启动阶段的最初阶段，root 文件系统就会被挂载到 root 目录下（<code>/</code>）。其它文件系统在之后通过 SystemV 下的 <code>rc</code> 或更新一些的 Linux 发行版中的 <code>systemd</code> 等 Linux 启动程序挂载。在启动进程中文件系统的挂载是由 <code>/etc/fstab</code> 配置文件管理的。一个简单的记忆方法是，fstab 代表“<ruby>文件系统表<rt>file system table</rt></ruby>”，它包含了需要挂载的文件系统的列表，这些文件系统均指定了挂载点，以及针对特定文件系统可能需要的选项。</p>
<p>使用 <code>mount</code> 命令可以把文件系统挂载到一个已有的目录/挂载点上。通常情况下，任何作为挂载点的目录都应该是空的且不包含任何其他文件。Linux 系统不会阻止用户挂载一个已被挂载了文件系统的目录或将文件系统挂载到一个包含文件的目录上。如果你将文件系统挂载到一个已有的目录或文件系统上，那么其原始内容将会被隐藏，只有新挂载的文件系统的内容是可见的。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3>
<p>我希望通过这篇文章，阐明了围绕文件系统这个术语的一些可能的模糊之处。我花费了很长的时间，以及在一个良师的帮助下才真正理解和欣赏到 Linux 文件系统的复杂性、优雅性和功能以及它的全部含义。</p>
<p>如果你有任何问题，请写到下面的评论中，我会尽力来回答它们。</p>
<h3 id="下个月"><a href="#下个月" class="headerlink" title="下个月"></a>下个月</h3>
<p>Linux 的另一个重要概念是：<a href="https://opensource.com/life/15/9/everything-is-a-file" target="_blank" rel="external">万物皆为文件</a>。这个概念对用户和系统管理员来说有一些有趣和重要的实际应用。当我说完这个理由之后，你可能会想阅读我的文章：<a href="https://opensource.com/life/15/9/everything-is-a-file" target="_blank" rel="external">万物皆为文件</a>，这篇文章会在我下个月计划写的关于 <code>/dev</code>  目录的文章之前写完。（LCTT 译注，也可参阅<a href="https://linux.cn/article-7669-1.html" target="_blank" rel="external">这篇</a>）</p>
<p>（题图 : 原始图片来自 Rikki Endsley. <a href="https://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="external">CC BY-SA 4.0</a>）</p>
<hr>
<p>via: <a href="https://opensource.com/life/16/10/introduction-linux-filesystems" target="_blank" rel="external">https://opensource.com/life/16/10/introduction-linux-filesystems</a></p>
<p>作者：<a href="https://opensource.com/users/dboth" target="_blank" rel="external">David Both</a><br>译者：<a href="https://github.com/ucasFL" target="_blank" rel="external">ucasFL</a><br>校对：<a href="https://github.com/wxy" target="_blank" rel="external">wxy</a></p>
<p>本文由 <a href="https://github.com/LCTT/TranslateProject" target="_blank" rel="external">LCTT</a> 原创编译，<a href="https://linux.cn/" target="_blank" rel="external">Linux中国</a> 荣誉推出</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文旨在高屋建瓴地来讨论 Linux 文件系统概念，而不是对某种特定的文件系统，比如 EXT4 是如何工作的进行具体的描述。另外，本文也不是一个文件系统命令的教程。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ucasfl.me/categories/Linux/"/>
    
    
      <category term="FileSystem Linux" scheme="http://ucasfl.me/tags/FileSystem-Linux/"/>
    
  </entry>
  
  <entry>
    <title>C 语言中变量的段</title>
    <link href="http://ucasfl.me/2017/09/12/the-Section-of-Variables/"/>
    <id>http://ucasfl.me/2017/09/12/the-Section-of-Variables/</id>
    <published>2017-09-12T02:16:42.000Z</published>
    <updated>2017-11-05T11:36:07.958Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3>
<p>在 C 语言中，不同的变量位于不同的段，下面进行简单分析。</p>
<p>看下面一个简单的 C 程序：</p>
<figure class="highlight c">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">char</span> *myname=<span class="string">"Bao Yungang"</span>;</div><div class="line"><span class="keyword">char</span> gdata[<span class="number">128</span>];</div><div class="line"><span class="keyword">char</span> bdata[<span class="number">16</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</div><div class="line">main() &#123;</div><div class="line">	<span class="keyword">char</span> * ldata[<span class="number">16</span>];	</div><div class="line">	<span class="keyword">char</span> * ddata;</div><div class="line"></div><div class="line">	ddata = <span class="built_in">malloc</span>(<span class="number">16</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"myname:%llX\n"</span>, myname);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"main: %llX\n"</span>, main);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"gdata: %llX\nbdata:%llX\nldata:%llx\n&amp;ddata:%llx\nddata: %llx\n"</span>,</div><div class="line">		gdata,bdata,ldata,&amp;ddata,ddata);</div><div class="line">	<span class="built_in">free</span>(ddata);</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>我们分析一下程序中出现的变量所位于的段。</p>
<a id="more"></a>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3>
<p>首先，根据所学知识进行分析：</p>
<ul>
  <li><code>myname</code> 变量是一个全局变量，并且进行了初始化，指向一个字符串常量。因此，<code>myname</code> 变量本身位于<em>数据段：</em><code>.data</code></li>
  <li><code>myname</code>所<strong>指向的字符串</strong>是一个字符串常量，根据 C 语言知识，是只读的，所以应位于<em>只读数据段：</em><code>.rodata</code></li>
  <li><code>gdata</code>是一个为进行初始化的全局变量，因此位于<em>BSS段（Block Started by Symbol）</em>。</li>
  <li><code>bdata</code>和<code>myname</code>一样是初始化了的全局变量，因此位于数据段。</li>
  <li><code>ldata</code>是一个<code>main</code>函数中的局部变量，因此位于<em>栈中。</em></li>
  <li><code>ddata</code>变量自身也是<code>main</code>函数中的一个局部变量，因此也位于<em>栈中。</em></li>
  <li><code>ddata</code>所<strong>指向的内存空间</strong>是通过<code>malloc</code>函数动态分配的，因此位于<em>堆中。</em></li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3>
<p>下面，通过<code>objdump</code>来进行验证：</p>
<p>首先，使用<code>gcc</code>来编译源程序(Ubuntu 16.04.4 + gcc 5.4.0)：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">gcc -save-temps addr_space.c</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>通过添加 <code>-save-temps</code>选项来生成中间文件。</p>
<p>下面，使用 <code>objdump</code> 来查看段信息：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">objdump -D ./a.out</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>通过<code>-D</code>选项显示出所有段的内容。</p>
<ul>
  <li>首先看<code>bdata</code> 和<code>myname</code> ，我们可以直接在 <code>.data</code> 段看到：</li>
</ul>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Disassembly of section .data:</div><div class="line"></div><div class="line">0000000000601040 &lt;__data_start&gt;:</div><div class="line">	...</div><div class="line"></div><div class="line">0000000000601048 &lt;__dso_handle&gt;:</div><div class="line">	...</div><div class="line"></div><div class="line">0000000000601050 &lt;myname&gt;:</div><div class="line">  601050:	68 07 40 00 00       	pushq  $0x4007</div><div class="line">	...</div><div class="line"></div><div class="line">0000000000601060 &lt;bdata&gt;:</div><div class="line">  601060:	01 02                	add    %eax,(%rdx)</div><div class="line">  601062:	03 04 00             	add    (%rax,%rax,1),%eax</div><div class="line">	...</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>对于 <code>gdata</code> ，也可以直接在 <code>.bss</code> 段看到：</li>
</ul>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Disassembly of section .bss:</div><div class="line"></div><div class="line">0000000000601080 &lt;completed.7585&gt;:</div><div class="line">	...</div><div class="line"></div><div class="line">00000000006010a0 &lt;gdata&gt;:</div><div class="line">	...</div></pre>
      </td>
    </tr>
  </table>
</figure>
<ul>
  <li>下面看<code>myname</code> 所指向的字符串常量。</li>
</ul>
<p>首先，运行程序，输出如下：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">myname:400768</div><div class="line">main: 400626</div><div class="line">gdata: 6010A0</div><div class="line">bdata:601060</div><div class="line">ldata:7ffc84068960</div><div class="line">ddata:1490010</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>由运行结果知，<code>myname</code>的值为 400768，它即为 <code>myname</code>所指向的字符串常量的地址。然后我们在 <code>objdump</code>的输出内容中搜索该地址，得到它位于 <code>.rodata</code>中：</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">Disassembly of section .rodata:</div><div class="line"></div><div class="line">0000000000400760 &lt;_IO_stdin_used&gt;:</div><div class="line">  400760:	01 00                	add    %eax,(%rax)</div><div class="line">  400762:	02 00                	add    (%rax),%al</div><div class="line">  400764:	00 00                	add    %al,(%rax)</div><div class="line">  400766:	00 00                	add    %al,(%rax)</div><div class="line">  400768:	42 61                	rex.X (bad) </div><div class="line">  40076a:	6f                   	outsl  %ds:(%rsi),(%dx)</div><div class="line">  40076b:	20 59 75             	and    %bl,0x75(%rcx)</div><div class="line">  40076e:	6e                   	outsb  %ds:(%rsi),(%dx)</div><div class="line">  40076f:	67 61                	addr32 (bad) </div><div class="line">  400771:	6e                   	outsb  %ds:(%rsi),(%dx)</div><div class="line">  400772:	67 00 6d 79          	add    %ch,0x79(%ebp)</div><div class="line">  400776:	6e                   	outsb  %ds:(%rsi),(%dx)</div><div class="line">  400777:	61                   	(bad)  </div><div class="line">  400778:	6d                   	insl   (%dx),%es:(%rdi)</div><div class="line">  400779:	65 3a 25 6c 6c 58 0a 	cmp    %gs:0xa586c6c(%rip),%ah        # a9873ec &lt;_end+0xa3862cc&gt;</div><div class="line">  400780:	00 6d 61             	add    %ch,0x61(%rbp)</div><div class="line">  400783:	69 6e 3a 20 25 6c 6c 	imul   $0x6c6c2520,0x3a(%rsi),%ebp</div><div class="line">  40078a:	58                   	pop    %rax</div><div class="line">  40078b:	0a 00                	or     (%rax),%al</div><div class="line">  40078d:	00 00                	add    %al,(%rax)</div><div class="line">  40078f:	00 67 64             	add    %ah,0x64(%rdi)</div><div class="line">  400792:	61                   	(bad)  </div><div class="line">  400793:	74 61                	je     4007f6 &lt;__GNU_EH_FRAME_HDR+0x36&gt;</div><div class="line">  400795:	3a 20                	cmp    (%rax),%ah</div><div class="line">  400797:	25 6c 6c 58 0a       	and    $0xa586c6c,%eax</div><div class="line">  40079c:	62                   	(bad)  </div><div class="line">  40079d:	64 61                	fs (bad) </div><div class="line">  40079f:	74 61                	je     400802 &lt;__GNU_EH_FRAME_HDR+0x42&gt;</div><div class="line">  4007a1:	3a 25 6c 6c 58 0a    	cmp    0xa586c6c(%rip),%ah        # a987413 &lt;_end+0xa3862f3&gt;</div><div class="line">  4007a7:	6c                   	insb   (%dx),%es:(%rdi)</div><div class="line">  4007a8:	64 61                	fs (bad) </div><div class="line">  4007aa:	74 61                	je     40080d &lt;__GNU_EH_FRAME_HDR+0x4d&gt;</div><div class="line">  4007ac:	3a 25 6c 6c 78 0a    	cmp    0xa786c6c(%rip),%ah        # ab8741e &lt;_end+0xa5862fe&gt;</div><div class="line">  4007b2:	64 64 61             	fs fs (bad) </div><div class="line">  4007b5:	74 61                	je     400818 &lt;__GNU_EH_FRAME_HDR+0x58&gt;</div><div class="line">  4007b7:	3a 25 6c 6c 78 0a    	cmp    0xa786c6c(%rip),%ah        # ab87429 &lt;_end+0xa586309&gt;</div><div class="line">	...</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>因此，说明 <code>myname</code>指向的字符串常量位于 <code>.rodata</code> 中。事实上，看中间一栏，从 400768 开始，到 400772 的第一个数结束，其中的内容 <code>42 61 6f 20 59 75 6e 67 61 6e 67</code>对应的 ASCII 码就是字符串 “Bao Yungang” 。</p>
<ul>
  <li>对于 <code>ldata</code> 和 <code>ddata</code> 以及 <code>ddata</code> 所指向的分配空间，很难直接从 <code>objdump</code> 的输出中看出来。我们再把 <code>ddata</code>变量本身的地址也打印出来：</li>
</ul>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">myname:400768</div><div class="line">main: 400626</div><div class="line">gdata: 6010A0</div><div class="line">bdata:601060</div><div class="line">ldata:7ffe92607930</div><div class="line">&amp;ddata:7ffe92607928</div><div class="line">ddata: 221a010</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>我们看到，<code>ldata</code>和<code>ddata</code>的地址非常大，而 <code>ddata</code>所指向的分配空间的地址相对来说要小很多，这其实也一定程度上验证了我们的结论，根据我们已知的结论，在程序执行过程中，函数中的局部变量是在函数压栈以后，在栈中分配的，而 <code>malloc</code> 函数分配的空间则是在堆中进行分配的，而栈是从上往下长（高地址到低地址），堆则相反，是从下往上长（低地址到高地址），因此，栈中的变量地址较大，而堆中的则较小，所以，程序运行结果与之相符。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;
&lt;p&gt;在 C 语言中，不同的变量位于不同的段，下面进行简单分析。&lt;/p&gt;
&lt;p&gt;看下面一个简单的 C 程序：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;
  &lt;table&gt;
    &lt;tr&gt;
      &lt;td class=&quot;gutter&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
      &lt;td class=&quot;code&quot;&gt;
        &lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *myname=&lt;span class=&quot;string&quot;&gt;&quot;Bao Yungang&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; gdata[&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; bdata[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;main() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * ldata[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;];	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * ddata;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	ddata = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;myname:%llX\n&quot;&lt;/span&gt;, myname);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;main: %llX\n&quot;&lt;/span&gt;, main);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;gdata: %llX\nbdata:%llX\nldata:%llx\n&amp;amp;ddata:%llx\nddata: %llx\n&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		gdata,bdata,ldata,&amp;amp;ddata,ddata);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(ddata);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/figure&gt;
&lt;p&gt;我们分析一下程序中出现的变量所位于的段。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://ucasfl.me/categories/C-C/"/>
    
    
      <category term="C Section" scheme="http://ucasfl.me/tags/C-Section/"/>
    
  </entry>
  
  <entry>
    <title>编译器简介： 在 Siri 前时代如何与计算机对话</title>
    <link href="http://ucasfl.me/2017/09/12/Introduction-to-Compiler/"/>
    <id>http://ucasfl.me/2017/09/12/Introduction-to-Compiler/</id>
    <published>2017-09-12T02:16:15.000Z</published>
    <updated>2017-11-06T08:52:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pbs.twimg.com/media/C_5qf8aXkAAvSXC.jpg" alt="了解在编译器的世界里前端和后端的新意义"></p>
<p>简单说来，一个<ruby>编译器<rt>compiler</rt></ruby>不过是一个可以翻译其他程序的程序。传统的编译器可以把源代码翻译成你的计算机能够理解的可执行机器代码。（一些编译器将源代码翻译成别的程序语言，这样的编译器称为源到源翻译器或<ruby>转化器<rt>transpilers</rt></ruby>。）<a href="http://llvm.org/" target="_blank" rel="external">LLVM</a> 是一个广泛使用的编译器项目，包含许多模块化的编译工具。</p>
<a id="more"></a>
<p>传统的编译器设计包含三个部分：</p>
<p><img src="https://nicoleorchard.com/img/blog/compilers/compiler1.jpg" alt=""></p>
<ul>
  <li><ruby>前端<rt>Frontend</rt></ruby>将源代码翻译为<ruby>中间表示<rt>intermediate representation </rt></ruby> (IR)* 。<a href="http://clang.llvm.org/" target="_blank" rel="external">clang</a> 是 LLVM 中用于 C 家族语言的前端工具。</li>
  <li><ruby>优化器<rt>Optimizer</rt></ruby>分析 IR 然后将其转化为更高效的形式。<a href="http://llvm.org/docs/CommandGuide/opt.html" target="_blank" rel="external">opt</a> 是 LLVM 的优化工具。</li>
  <li><ruby>后端<rt>Backend</rt></ruby>通过将 IR 映射到目标硬件指令集从而生成机器代码。<a href="http://llvm.org/docs/CommandGuide/llc.html" target="_blank" rel="external">llc</a> 是 LLVM 的后端工具。</li>
</ul>
<p>注：LLVM 的 IR 是一种和汇编类似的低级语言。然而，它抽离了特定硬件信息。</p>
<h3 id="Hello-Compiler"><a href="#Hello-Compiler" class="headerlink" title="Hello, Compiler"></a>Hello, Compiler</h3>
<p>下面是一个打印 “Hello, Compiler!” 到标准输出的简单 C 程序。C 语法是人类可读的，但是计算机却不能理解，不知道该程序要干什么。我将通过三个编译阶段使该程序变成机器可执行的程序。</p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// compile_me.c</span></div><div class="line"><span class="comment">// Wave to the compiler. The world can wait.</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Hello, Compiler!\n"</span>);</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4>
<p>正如我在上面所提到的，<code>clang</code> 是 LLVM 中用于 C 家族语言的前端工具。Clang 包含 <ruby>C 预处理器<rt>C preprocessor</rt></ruby>、<ruby>词法分析器<rt>lexer</rt></ruby>、<ruby>语法解析器<rt>parser</rt></ruby>、<ruby>语义分析器<rt>semantic analyzer</rt></ruby>和 <ruby>IR 生成器<rt>IR generator</rt></ruby>。</p>
<p><strong>C 预处理器</strong>在将源程序翻译成 IR 前修改源程序。预处理器处理外部包含文件，比如上面的 <code>#include &lt;stdio.h&gt;</code>。 它将会把这一行替换为 <code>stdio.h</code> C 标准库文件的完整内容，其中包含 <code>printf</code> 函数的声明。</p>
<p>通过运行下面的命令来查看预处理步骤的输出：</p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">clang</span> <span class="selector-tag">-E</span> <span class="selector-tag">compile_me</span><span class="selector-class">.c</span> <span class="selector-tag">-o</span> <span class="selector-tag">preprocessed</span><span class="selector-class">.i</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p><strong>词法分析器</strong>（或<ruby>扫描器<rt>scanner</rt></ruby>或<ruby>分词器<rt>tokenizer</rt></ruby>）将一串字符转化为一串单词。每一个单词或<ruby>记号<rt>token</rt></ruby>，被归并到五种语法类别之一：标点符号、关键字、标识符、文字或注释。</p>
<p>compile_me.c 的分词过程：</p>
<p><img src="https://nicoleorchard.com/img/blog/compilers/lexer.jpg" alt=""></p>
<p><strong>语法分析器</strong>确定源程序中的单词流是否组成了合法的句子。在分析记号流的语法后，它会输出一个<ruby>抽象语法树<rt>abstract syntax tree</rt></ruby>（AST）。Clang 的 AST 中的节点表示声明、语句和类型。</p>
<p>compile_me.c 的语法树：</p>
<p><img src="https://nicoleorchard.com/img/blog/compilers/tree.jpg" alt=""></p>
<p><strong>语义分析器</strong>会遍历抽象语法树，从而确定代码语句是否有正确意义。这个阶段会检查类型错误。如果 <code>compile_me.c</code> 的 main 函数返回 <code>&quot;zero&quot;</code>而不是 <code>0</code>， 那么语义分析器将会抛出一个错误，因为 <code>&quot;zero&quot;</code> 不是 <code>int</code> 类型。</p>
<p><strong>IR 生成器</strong>将抽象语法树翻译为 IR。</p>
<p>对 compile_me.c 运行 clang 来生成 LLVM IR：</p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">clang</span> <span class="selector-tag">-S</span> <span class="selector-tag">-emit-llvm</span> <span class="selector-tag">-o</span> <span class="selector-tag">llvm_ir</span><span class="selector-class">.ll</span> <span class="selector-tag">compile_me</span><span class="selector-class">.c</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>在 <code>llvm_ir.ll</code> 中的 main 函数：</p>
<figure class="highlight llvm">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">; llvm_ir.ll</span></div><div class="line"><span class="title">@.str</span> = <span class="keyword">private</span> <span class="keyword">unnamed_addr</span> <span class="keyword">constant</span> [<span class="number">18</span> <span class="keyword">x</span> <span class="keyword">i8</span>] <span class="keyword">c</span><span class="string">"Hello, Compiler!\0A\00"</span>, <span class="keyword">align</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">define</span> <span class="keyword">i32</span> <span class="title">@main</span>() &#123;</div><div class="line">  <span class="symbol">%1</span> = <span class="keyword">alloca</span> <span class="keyword">i32</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- memory allocated on the stack</span></div><div class="line">  <span class="keyword">store</span> <span class="keyword">i32</span> <span class="number">0</span>, <span class="keyword">i32</span>* <span class="symbol">%1</span>, <span class="keyword">align</span> <span class="number">4</span></div><div class="line">  <span class="symbol">%2</span> = <span class="keyword">call</span> <span class="keyword">i32</span> (<span class="keyword">i8</span>*, ...) <span class="title">@printf</span>(<span class="keyword">i8</span>* <span class="keyword">getelementptr</span> <span class="keyword">inbounds</span> ([<span class="number">18</span> <span class="keyword">x</span> <span class="keyword">i8</span>], [<span class="number">18</span> <span class="keyword">x</span> <span class="keyword">i8</span>]* <span class="title">@.str</span>, <span class="keyword">i32</span> <span class="number">0</span>, <span class="keyword">i32</span> <span class="number">0</span>))</div><div class="line">  <span class="keyword">ret</span> <span class="keyword">i32</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">declare</span> <span class="keyword">i32</span> <span class="title">@printf</span>(<span class="keyword">i8</span>*, ...)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<h4 id="优化程序"><a href="#优化程序" class="headerlink" title="优化程序"></a>优化程序</h4>
<p>优化程序的工作是基于其对程序的运行时行为的理解来提高代码效率。优化程序将 IR 作为输入，然后生成改进后的 IR 作为输出。LLVM 的优化工具 <code>opt</code> 将会通过标记 <code>-O2</code>（大写字母 <code>o</code>，数字 2）来优化处理器速度，通过标记 <code>Os</code>（大写字母 <code>o</code>，小写字母 <code>s</code>）来减少指令数目。</p>
<p>看一看上面的前端工具生成的 LLVM IR 代码和运行下面的命令生成的结果之间的区别：</p>
<figure class="highlight vim">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="keyword">opt</span> -O2 -S llvm_ir.<span class="keyword">ll</span> -<span class="keyword">o</span> optimized.<span class="keyword">ll</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>在 <code>optimized.ll</code> 中的 main 函数：</p>
<figure class="highlight llvm">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">optimized.ll</div><div class="line"></div><div class="line"><span class="title">@str</span> = <span class="keyword">private</span> <span class="keyword">unnamed_addr</span> <span class="keyword">constant</span> [<span class="number">17</span> <span class="keyword">x</span> <span class="keyword">i8</span>] <span class="keyword">c</span><span class="string">"Hello, Compiler!\00"</span></div><div class="line"></div><div class="line"><span class="keyword">define</span> <span class="keyword">i32</span> <span class="title">@main</span>() &#123;</div><div class="line">  <span class="symbol">%puts</span> = <span class="keyword">tail</span> <span class="keyword">call</span> <span class="keyword">i32</span> <span class="title">@puts</span>(<span class="keyword">i8</span>* <span class="keyword">getelementptr</span> <span class="keyword">inbounds</span> ([<span class="number">17</span> <span class="keyword">x</span> <span class="keyword">i8</span>], [<span class="number">17</span> <span class="keyword">x</span> <span class="keyword">i8</span>]* <span class="title">@str</span>, <span class="keyword">i64</span> <span class="number">0</span>, <span class="keyword">i64</span> <span class="number">0</span>))</div><div class="line">  <span class="keyword">ret</span> <span class="keyword">i32</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">declare</span> <span class="keyword">i32</span> <span class="title">@puts</span>(<span class="keyword">i8</span>* <span class="keyword">nocapture</span> <span class="keyword">readonly</span>)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>优化后的版本中， main 函数没有在栈中分配内存，因为它不使用任何内存。优化后的代码中调用 <code>puts</code> 函数而不是 <code>printf</code> 函数，因为程序中并没有使用 <code>printf</code> 函数的格式化功能。</p>
<p>当然，优化程序不仅仅知道何时可以把 <code>printf</code> 函数用 <code>puts</code> 函数代替。优化程序也能展开循环并内联简单计算的结果。考虑下面的程序，它将两个整数相加并打印出结果。</p>
<figure class="highlight cpp">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="comment">// add.c</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">10</span>, c = a + b;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%i + %i = %i\n"</span>, a, b, c);</div><div class="line">&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>下面是未优化的 LLVM IR：</p>
<figure class="highlight llvm">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="title">@.str</span> = <span class="keyword">private</span> <span class="keyword">unnamed_addr</span> <span class="keyword">constant</span> [<span class="number">14</span> <span class="keyword">x</span> <span class="keyword">i8</span>] <span class="keyword">c</span><span class="string">"%i + %i = %i\0A\00"</span>, <span class="keyword">align</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">define</span> <span class="keyword">i32</span> <span class="title">@main</span>() &#123;</div><div class="line">  <span class="symbol">%1</span> = <span class="keyword">alloca</span> <span class="keyword">i32</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- allocate stack space for var a</span></div><div class="line">  <span class="symbol">%2</span> = <span class="keyword">alloca</span> <span class="keyword">i32</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- allocate stack space for var b</span></div><div class="line">  <span class="symbol">%3</span> = <span class="keyword">alloca</span> <span class="keyword">i32</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- allocate stack space for var c</span></div><div class="line">  <span class="keyword">store</span> <span class="keyword">i32</span> <span class="number">5</span>, <span class="keyword">i32</span>* <span class="symbol">%1</span>, <span class="keyword">align</span> <span class="number">4</span>  <span class="comment">; &lt;- store 5 at memory location %1</span></div><div class="line">  <span class="keyword">store</span> <span class="keyword">i32</span> <span class="number">10</span>, <span class="keyword">i32</span>* <span class="symbol">%2</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- store 10 at memory location %2</span></div><div class="line">  <span class="symbol">%4</span> = <span class="keyword">load</span> <span class="keyword">i32</span>, <span class="keyword">i32</span>* <span class="symbol">%1</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- load the value at memory address %1 into register %4</span></div><div class="line">  <span class="symbol">%5</span> = <span class="keyword">load</span> <span class="keyword">i32</span>, <span class="keyword">i32</span>* <span class="symbol">%2</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- load the value at memory address %2 into register %5</span></div><div class="line">  <span class="symbol">%6</span> = <span class="keyword">add</span> <span class="keyword">nsw</span> <span class="keyword">i32</span> <span class="symbol">%4</span>, <span class="symbol">%5</span> <span class="comment">; &lt;- add the values in registers %4 and %5\. put the result in register %6</span></div><div class="line">  <span class="keyword">store</span> <span class="keyword">i32</span> <span class="symbol">%6</span>, <span class="keyword">i32</span>* <span class="symbol">%3</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- put the value of register %6 into memory address %3</span></div><div class="line">  <span class="symbol">%7</span> = <span class="keyword">load</span> <span class="keyword">i32</span>, <span class="keyword">i32</span>* <span class="symbol">%1</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- load the value at memory address %1 into register %7</span></div><div class="line">  <span class="symbol">%8</span> = <span class="keyword">load</span> <span class="keyword">i32</span>, <span class="keyword">i32</span>* <span class="symbol">%2</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- load the value at memory address %2 into register %8</span></div><div class="line">  <span class="symbol">%9</span> = <span class="keyword">load</span> <span class="keyword">i32</span>, <span class="keyword">i32</span>* <span class="symbol">%3</span>, <span class="keyword">align</span> <span class="number">4</span> <span class="comment">; &lt;- load the value at memory address %3 into register %9</span></div><div class="line">  <span class="symbol">%10</span> = <span class="keyword">call</span> <span class="keyword">i32</span> (<span class="keyword">i8</span>*, ...) <span class="title">@printf</span>(<span class="keyword">i8</span>* <span class="keyword">getelementptr</span> <span class="keyword">inbounds</span> ([<span class="number">14</span> <span class="keyword">x</span> <span class="keyword">i8</span>], [<span class="number">14</span> <span class="keyword">x</span> <span class="keyword">i8</span>]* <span class="title">@.str</span>, <span class="keyword">i32</span> <span class="number">0</span>, <span class="keyword">i32</span> <span class="number">0</span>), <span class="keyword">i32</span> <span class="symbol">%7</span>, <span class="keyword">i32</span> <span class="symbol">%8</span>, <span class="keyword">i32</span> <span class="symbol">%9</span>)</div><div class="line">  <span class="keyword">ret</span> <span class="keyword">i32</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">declare</span> <span class="keyword">i32</span> <span class="title">@printf</span>(<span class="keyword">i8</span>*, ...)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>下面是优化后的 LLVM IR：</p>
<figure class="highlight llvm">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="title">@.str</span> = <span class="keyword">private</span> <span class="keyword">unnamed_addr</span> <span class="keyword">constant</span> [<span class="number">14</span> <span class="keyword">x</span> <span class="keyword">i8</span>] <span class="keyword">c</span><span class="string">"%i + %i = %i\0A\00"</span>, <span class="keyword">align</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">define</span> <span class="keyword">i32</span> <span class="title">@main</span>() &#123;</div><div class="line">  <span class="symbol">%1</span> = <span class="keyword">tail</span> <span class="keyword">call</span> <span class="keyword">i32</span> (<span class="keyword">i8</span>*, ...) <span class="title">@printf</span>(<span class="keyword">i8</span>* <span class="keyword">getelementptr</span> <span class="keyword">inbounds</span> ([<span class="number">14</span> <span class="keyword">x</span> <span class="keyword">i8</span>], [<span class="number">14</span> <span class="keyword">x</span> <span class="keyword">i8</span>]* <span class="title">@.str</span>, <span class="keyword">i64</span> <span class="number">0</span>, <span class="keyword">i64</span> <span class="number">0</span>), <span class="keyword">i32</span> <span class="number">5</span>, <span class="keyword">i32</span> <span class="number">10</span>, <span class="keyword">i32</span> <span class="number">15</span>)</div><div class="line">  <span class="keyword">ret</span> <span class="keyword">i32</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">declare</span> <span class="keyword">i32</span> <span class="title">@printf</span>(<span class="keyword">i8</span>* <span class="keyword">nocapture</span> <span class="keyword">readonly</span>, ...)</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>优化后的 main 函数本质上是未优化版本的第 17 行和 18 行，伴有变量值内联。<code>opt</code> 计算加法，因为所有的变量都是常数。很酷吧，对不对？</p>
<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4>
<p>LLVM 的后端工具是 <code>llc</code>。它分三个阶段将 LLVM IR 作为输入生成机器代码。</p>
<ul>
  <li><strong>指令选择</strong>是将 IR 指令映射到目标机器的指令集。这个步骤使用虚拟寄存器的无限名字空间。</li>
  <li><strong>寄存器分配</strong>是将虚拟寄存器映射到目标体系结构的实际寄存器。我的 CPU 是 x86 结构，它只有 16 个寄存器。然而，编译器将会尽可能少的使用寄存器。</li>
  <li><strong>指令安排</strong>是重排操作，从而反映出目标机器的性能约束。</li>
</ul>
<p>运行下面这个命令将会产生一些机器代码：</p>
<figure class="highlight css">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line"><span class="selector-tag">llc</span> <span class="selector-tag">-o</span> <span class="selector-tag">compiled-assembly</span><span class="selector-class">.s</span> <span class="selector-tag">optimized</span><span class="selector-class">.ll</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<figure class="highlight cos">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">_main:</div><div class="line">	pushq	<span class="built_in">%rbp</span></div><div class="line">	movq	<span class="built_in">%rsp</span>, <span class="built_in">%rbp</span></div><div class="line">	leaq	L_str(<span class="built_in">%rip</span>), <span class="built_in">%rdi</span></div><div class="line">	callq	_puts</div><div class="line">	xorl	<span class="built_in">%eax</span>, <span class="built_in">%eax</span></div><div class="line">	popq	<span class="built_in">%rbp</span></div><div class="line">	retq</div><div class="line">L_str:</div><div class="line">	.asciz	<span class="string">"Hello, Compiler!"</span></div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>这个程序是 x86 汇编语言，它是计算机所说的语言，并具有人类可读语法。某些人最后也许能理解我。</p>
<hr>
<p>相关资源：</p>
<ol>
  <li><a href="https://www.amazon.com/Engineering-Compiler-Second-Keith-Cooper/dp/012088478X" target="_blank" rel="external">设计一个编译器</a></li>
  <li><a href="https://www.amazon.com/Getting-Started-LLVM-Core-Libraries/dp/1782166920" target="_blank" rel="external">开始探索 LLVM 核心库</a></li>
</ol>
<hr>
<p>via: <a href="https://nicoleorchard.com/blog/compilers" target="_blank" rel="external">https://nicoleorchard.com/blog/compilers</a></p>
<p>作者：<a href="https://nicoleorchard.com/" target="_blank" rel="external">Nicole Orchard</a><br>译者：<a href="https://github.com/ucasFL" target="_blank" rel="external">ucasFL</a><br>校对：<a href="https://github.com/wxy" target="_blank" rel="external">wxy</a></p>
<p>本文由 <a href="https://github.com/LCTT/TranslateProject" target="_blank" rel="external">LCTT</a> 原创编译，<a href="https://linux.cn/" target="_blank" rel="external">Linux中国</a> 荣誉推出</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/C_5qf8aXkAAvSXC.jpg&quot; alt=&quot;了解在编译器的世界里前端和后端的新意义&quot;&gt;&lt;/p&gt;
&lt;p&gt;简单说来，一个&lt;ruby&gt;编译器&lt;rt&gt;compiler&lt;/rt&gt;&lt;/ruby&gt;不过是一个可以翻译其他程序的程序。传统的编译器可以把源代码翻译成你的计算机能够理解的可执行机器代码。（一些编译器将源代码翻译成别的程序语言，这样的编译器称为源到源翻译器或&lt;ruby&gt;转化器&lt;rt&gt;transpilers&lt;/rt&gt;&lt;/ruby&gt;。）&lt;a href=&quot;http://llvm.org/&quot;&gt;LLVM&lt;/a&gt; 是一个广泛使用的编译器项目，包含许多模块化的编译工具。&lt;/p&gt;
    
    </summary>
    
      <category term="Compiler" scheme="http://ucasfl.me/categories/Compiler/"/>
    
    
      <category term="Compiler LLVM" scheme="http://ucasfl.me/tags/Compiler-LLVM/"/>
    
  </entry>
  
  <entry>
    <title>Npm 安装 Hexo 失败的解决办法</title>
    <link href="http://ucasfl.me/2017/09/02/Fix-Error-With-Install-Hexo/"/>
    <id>http://ucasfl.me/2017/09/02/Fix-Error-With-Install-Hexo/</id>
    <published>2017-09-02T05:12:32.000Z</published>
    <updated>2017-11-05T11:22:45.220Z</updated>
    
    <content type="html"><![CDATA[<p>用 npm 安装 Hexo 时候出现错误，使用 sudo 安装依旧不行。</p>
<p>错误如下：</p>
<a id="more"></a>
<figure class="highlight livescript">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">/usr/local/bin/hexo<span class="function"> -&gt;</span> /usr/local/lib/node_modules/hexo-cli/bin/hexo</div><div class="line"></div><div class="line">&gt; dtrace-provider@<span class="number">0.8</span>.<span class="number">5</span> install /usr/local/lib/node_modules/hexo-cli/node_modules/dtrace-provider</div><div class="line">&gt; node scripts/install.js</div><div class="line"></div><div class="line"></div><div class="line">&gt; hexo-util@<span class="number">0.6</span>.<span class="number">1</span> postinstall /usr/local/lib/node_modules/hexo-cli/node_modules/hexo-util</div><div class="line">&gt; <span class="built_in">npm</span> run build:highlight</div><div class="line"></div><div class="line"></div><div class="line">&gt; hexo-util@<span class="number">0.6</span>.<span class="number">1</span> build:highlight /usr/local/lib/node_modules/hexo-cli/node_modules/hexo-util</div><div class="line">&gt; node scripts/build_highlight_alias.js &gt; highlight_alias.json</div><div class="line"></div><div class="line">sh: <span class="number">1</span>: cannot create highlight_alias.json: Permission denied</div><div class="line"><span class="built_in">npm</span> ERR! code ELIFECYCLE</div><div class="line"><span class="built_in">npm</span> ERR! errno <span class="number">2</span></div><div class="line"><span class="built_in">npm</span> ERR! hexo-util@<span class="number">0.6</span>.<span class="number">1</span> build:highlight: `node scripts/build_highlight_alias.js &gt; highlight_alias.json`</div><div class="line"><span class="built_in">npm</span> ERR! Exit status <span class="number">2</span></div><div class="line"><span class="built_in">npm</span> ERR! </div><div class="line"><span class="built_in">npm</span> ERR! Failed at the hexo-util@<span class="number">0.6</span>.<span class="number">1</span> build:highlight script.</div><div class="line"><span class="built_in">npm</span> ERR! This <span class="keyword">is</span> probably <span class="keyword">not</span> a problem <span class="keyword">with</span> <span class="built_in">npm</span>. There <span class="keyword">is</span> likely additional logging output above.</div><div class="line"></div><div class="line">┌──────────────────────────────────────────────────────────┐</div><div class="line">│                 <span class="built_in">npm</span> update check failed                  │</div><div class="line">│           Try running <span class="keyword">with</span> sudo <span class="keyword">or</span> get access            │</div><div class="line">│           <span class="keyword">to</span> the local update config store via           │</div><div class="line">│ sudo chown -R $USER:$(id -gn $USER) <span class="regexp">/home/fenglv/</span>.config │</div><div class="line">└──────────────────────────────────────────────────────────┘</div><div class="line"></div><div class="line"><span class="built_in">npm</span> ERR! A complete log <span class="keyword">of</span> <span class="keyword">this</span> run can be found in:</div><div class="line"><span class="built_in">npm</span> ERR!     <span class="regexp">/home/fenglv/</span>.<span class="built_in">npm</span>/_logs/<span class="number">2017</span>-<span class="number">09</span>-<span class="number">02</span>T05_00_49_566Z-debug.log</div><div class="line"><span class="built_in">npm</span> WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@<span class="number">1.1</span>.<span class="number">2</span> (node_modules/hexo-cli/node_modules/fsevents):</div><div class="line"><span class="built_in">npm</span> WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="keyword">for</span> fsevents@<span class="number">1.1</span>.<span class="number">2</span>: wanted &#123;<span class="string">"os"</span>:<span class="string">"darwin"</span>,<span class="string">"arch"</span>:<span class="string">"any"</span>&#125; (current: &#123;<span class="string">"os"</span>:<span class="string">"linux"</span>,<span class="string">"arch"</span>:<span class="string">"x64"</span>&#125;)</div><div class="line"></div><div class="line"><span class="built_in">npm</span> ERR! code ELIFECYCLE</div><div class="line"><span class="built_in">npm</span> ERR! errno <span class="number">2</span></div><div class="line"><span class="built_in">npm</span> ERR! hexo-util@<span class="number">0.6</span>.<span class="number">1</span> postinstall: `<span class="built_in">npm</span> run build:highlight`</div><div class="line"><span class="built_in">npm</span> ERR! Exit status <span class="number">2</span></div><div class="line"><span class="built_in">npm</span> ERR! </div><div class="line"><span class="built_in">npm</span> ERR! Failed at the hexo-util@<span class="number">0.6</span>.<span class="number">1</span> postinstall script.</div><div class="line"><span class="built_in">npm</span> ERR! This <span class="keyword">is</span> probably <span class="keyword">not</span> a problem <span class="keyword">with</span> <span class="built_in">npm</span>. There <span class="keyword">is</span> likely additional logging output above.</div><div class="line"></div><div class="line"><span class="built_in">npm</span> ERR! A complete log <span class="keyword">of</span> <span class="keyword">this</span> run can be found in:</div><div class="line"><span class="built_in">npm</span> ERR!     <span class="regexp">/home/fenglv/</span>.<span class="built_in">npm</span>/_logs/<span class="number">2017</span>-<span class="number">09</span>-<span class="number">02</span>T05_00_53_335Z-debug.log</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>解决办法：参见<a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" target="_blank" rel="external">npm 官网</a></p>
<figure class="highlight bash">
  <table>
    <tr>
      <td class="gutter">
        <pre><div class="line">1</div></pre>
      </td>
      <td class="code">
        <pre><div class="line">sudo chown -R <span class="variable">$USER</span> $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</div></pre>
      </td>
    </tr>
  </table>
</figure>
<p>问题解决。</p>
<p>
  <div id="container"></div>
</p>
<p>
  <link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css">
</p>
<script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script>
<script>
  var gitment = new Gitment({
    owner: 'ucasFL',
    repo: 'BlogComments',
    oauth: {
      client_id: 'ef399b43f01e072241fd',
      client_secret: '9258aef304e43fda24e51941bb0bbfc167e4e0a5',
    },
  })
  gitment.render('container');
</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 npm 安装 Hexo 时候出现错误，使用 sudo 安装依旧不行。&lt;/p&gt;
&lt;p&gt;错误如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://ucasfl.me/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://ucasfl.me/tags/Hexo/"/>
    
  </entry>
  
</feed>
